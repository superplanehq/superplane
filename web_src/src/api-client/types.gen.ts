// This file is auto-generated by @hey-api/openapi-ts

export type AuthorizationAddUserToCanvasGroupBody = {
    userId?: string;
};

export type AuthorizationAddUserToCanvasGroupResponse = {
    [key: string]: unknown;
};

export type AuthorizationAddUserToOrganizationGroupBody = {
    organizationId?: string;
    userId?: string;
};

export type AuthorizationAddUserToOrganizationGroupResponse = {
    [key: string]: unknown;
};

export type AuthorizationAssignRoleRequest = {
    userId?: string;
    roleAssignment?: AuthorizationRoleAssignment;
};

export type AuthorizationAssignRoleResponse = {
    [key: string]: unknown;
};

export type AuthorizationCreateCanvasGroupBody = {
    groupName?: string;
    role?: string;
};

export type AuthorizationCreateCanvasGroupResponse = {
    group?: AuthorizationGroup;
};

export type AuthorizationCreateOrganizationGroupRequest = {
    organizationId?: string;
    groupName?: string;
    role?: string;
};

export type AuthorizationCreateOrganizationGroupResponse = {
    group?: AuthorizationGroup;
};

export type AuthorizationCreateRoleRequest = {
    name?: string;
    domainType?: AuthorizationDomainType;
    domainId?: string;
    permissions?: Array<AuthorizationPermission>;
    inheritedRole?: string;
};

export type AuthorizationCreateRoleResponse = {
    [key: string]: unknown;
};

export type AuthorizationDeleteRoleResponse = {
    [key: string]: unknown;
};

export type AuthorizationDescribeRoleResponse = {
    role?: AuthorizationRole;
};

export type AuthorizationDomainType = 'DOMAIN_TYPE_UNSPECIFIED' | 'DOMAIN_TYPE_ORGANIZATION' | 'DOMAIN_TYPE_CANVAS';

export type AuthorizationGetCanvasGroupResponse = {
    group?: AuthorizationGroup;
};

export type AuthorizationGetCanvasGroupUsersResponse = {
    userIds?: Array<string>;
    group?: AuthorizationGroup;
};

export type AuthorizationGetOrganizationGroupResponse = {
    group?: AuthorizationGroup;
};

export type AuthorizationGetOrganizationGroupUsersResponse = {
    userIds?: Array<string>;
    group?: AuthorizationGroup;
};

export type AuthorizationGetUserRolesResponse = {
    userId?: string;
    domainType?: AuthorizationDomainType;
    domainId?: string;
    roles?: Array<AuthorizationRole>;
};

export type AuthorizationGroup = {
    name?: string;
    domainType?: AuthorizationDomainType;
    domainId?: string;
    role?: string;
};

export type AuthorizationListCanvasGroupsResponse = {
    groups?: Array<AuthorizationGroup>;
};

export type AuthorizationListOrganizationGroupsResponse = {
    groups?: Array<AuthorizationGroup>;
};

export type AuthorizationListRolesResponse = {
    roles?: Array<AuthorizationRole>;
};

export type AuthorizationListUserPermissionsResponse = {
    userId?: string;
    domainType?: AuthorizationDomainType;
    domainId?: string;
    permissions?: Array<AuthorizationPermission>;
};

export type AuthorizationPermission = {
    resource?: string;
    action?: string;
    domainType?: AuthorizationDomainType;
};

export type AuthorizationRemoveRoleRequest = {
    userId?: string;
    roleAssignment?: AuthorizationRoleAssignment;
};

export type AuthorizationRemoveRoleResponse = {
    [key: string]: unknown;
};

export type AuthorizationRemoveUserFromCanvasGroupResponse = {
    [key: string]: unknown;
};

export type AuthorizationRemoveUserFromOrganizationGroupResponse = {
    [key: string]: unknown;
};

export type AuthorizationRole = {
    name?: string;
    domainType?: AuthorizationDomainType;
    permissions?: Array<AuthorizationPermission>;
    inheritedRole?: AuthorizationRole;
};

export type AuthorizationRoleAssignment = {
    domainType?: AuthorizationDomainType;
    domainId?: string;
    role?: string;
};

export type AuthorizationUpdateRoleBody = {
    domainType?: AuthorizationDomainType;
    domainId?: string;
    permissions?: Array<AuthorizationPermission>;
    inheritedRole?: string;
};

export type AuthorizationUpdateRoleResponse = {
    [key: string]: unknown;
};

export type ConnectionDataFilter = {
    expression?: string;
};

export type ConnectionFilter = {
    type?: ConnectionFilterType;
    data?: ConnectionDataFilter;
    header?: ConnectionHeaderFilter;
};

export type ConnectionFilterOperator = 'FILTER_OPERATOR_AND' | 'FILTER_OPERATOR_OR';

export type ConnectionFilterType = 'FILTER_TYPE_UNKNOWN' | 'FILTER_TYPE_DATA' | 'FILTER_TYPE_HEADER';

export type ConnectionHeaderFilter = {
    expression?: string;
};

export type ExecutionResult = 'RESULT_UNKNOWN' | 'RESULT_PASSED' | 'RESULT_FAILED';

export type ExecutorSpecHttp = {
    url?: string;
    headers?: {
        [key: string]: string;
    };
    payload?: {
        [key: string]: string;
    };
    responsePolicy?: ExecutorSpecHttpResponsePolicy;
};

export type ExecutorSpecHttpResponsePolicy = {
    statusCodes?: Array<number>;
};

export type ExecutorSpecSemaphore = {
    projectId?: string;
    branch?: string;
    pipelineFile?: string;
    taskId?: string;
    parameters?: {
        [key: string]: string;
    };
    apiToken?: string;
    organizationUrl?: string;
};

export type GroupByField = {
    name?: string;
    expression?: string;
};

export type InputMappingWhen = {
    triggeredBy?: InputMappingWhenTriggeredBy;
};

export type InputMappingWhenTriggeredBy = {
    connection?: string;
};

export type OrganizationsCreateOrganizationRequest = {
    organization?: OrganizationsOrganization;
};

export type OrganizationsCreateOrganizationResponse = {
    organization?: OrganizationsOrganization;
};

export type OrganizationsDeleteOrganizationResponse = {
    [key: string]: unknown;
};

export type OrganizationsDescribeOrganizationResponse = {
    organization?: OrganizationsOrganization;
};

export type OrganizationsListOrganizationsResponse = {
    organizations?: Array<OrganizationsOrganization>;
};

export type OrganizationsOrganization = {
    metadata?: OrganizationsOrganizationMetadata;
};

export type OrganizationsOrganizationMetadata = {
    id?: string;
    name?: string;
    displayName?: string;
    createdBy?: string;
    createdAt?: string;
    updatedAt?: string;
};

export type OrganizationsUpdateOrganizationBody = {
    organization?: OrganizationsOrganization;
};

export type OrganizationsUpdateOrganizationResponse = {
    organization?: OrganizationsOrganization;
};

/**
 * Local secrets are stored and managed by SuperPlane itself.
 */
export type SecretLocal = {
    data?: {
        [key: string]: string;
    };
};

export type SecretProvider = 'PROVIDER_UNKNOWN' | 'PROVIDER_LOCAL';

export type SpecGroupBy = {
    fields?: Array<GroupByField>;
};

export type SpecTimeoutBehavior = 'TIMEOUT_BEHAVIOR_NONE' | 'TIMEOUT_BEHAVIOR_DROP' | 'TIMEOUT_BEHAVIOR_EMIT';

export type SuperplaneApprovalRequirement = {
    type?: SuperplaneApprovalRequirementType;
    name?: string;
    id?: string;
    count?: number;
};

export type SuperplaneApprovalRequirementType = 'TYPE_UNKNOWN' | 'TYPE_USER' | 'TYPE_ROLE' | 'TYPE_GROUP';

export type SuperplaneApproveStageEventBody = {
    [key: string]: unknown;
};

export type SuperplaneApproveStageEventResponse = {
    event?: SuperplaneStageEvent;
};

export type SuperplaneCanvas = {
    metadata?: SuperplaneCanvasMetadata;
};

export type SuperplaneCanvasMetadata = {
    id?: string;
    name?: string;
    createdBy?: string;
    createdAt?: string;
};

export type SuperplaneCondition = {
    type?: SuperplaneConditionType;
    approval?: SuperplaneConditionApproval;
    timeWindow?: SuperplaneConditionTimeWindow;
};

export type SuperplaneConditionApproval = {
    from?: Array<SuperplaneApprovalRequirement>;
};

export type SuperplaneConditionTimeWindow = {
    start?: string;
    end?: string;
    weekDays?: Array<string>;
};

export type SuperplaneConditionType = 'CONDITION_TYPE_UNKNOWN' | 'CONDITION_TYPE_APPROVAL' | 'CONDITION_TYPE_TIME_WINDOW';

export type SuperplaneConnection = {
    type?: SuperplaneConnectionType;
    name?: string;
    filters?: Array<ConnectionFilter>;
    filterOperator?: ConnectionFilterOperator;
};

export type SuperplaneConnectionGroup = {
    metadata?: SuperplaneConnectionGroupMetadata;
    spec?: SuperplaneConnectionGroupSpec;
};

export type SuperplaneConnectionGroupEvent = {
    id?: string;
    sourceId?: string;
    sourceType?: SuperplaneConnectionType;
    sourceName?: string;
    receivedAt?: string;
};

export type SuperplaneConnectionGroupFieldSet = {
    id?: string;
    fields?: Array<SuperplaneKeyValuePair>;
    hash?: string;
    state?: SuperplaneConnectionGroupFieldSetState;
    stateReason?: SuperplaneConnectionGroupFieldSetStateReason;
    events?: Array<SuperplaneConnectionGroupEvent>;
    createdAt?: string;
};

export type SuperplaneConnectionGroupFieldSetState = 'STATE_UNKNOWN' | 'STATE_PENDING' | 'STATE_PROCESSED' | 'STATE_DISCARDED';

export type SuperplaneConnectionGroupFieldSetStateReason = 'STATE_REASON_NONE' | 'STATE_REASON_OK' | 'STATE_REASON_TIMEOUT';

export type SuperplaneConnectionGroupMetadata = {
    id?: string;
    name?: string;
    canvasId?: string;
    createdAt?: string;
    createdBy?: string;
    updatedAt?: string;
    updatedBy?: string;
};

export type SuperplaneConnectionGroupSpec = {
    connections?: Array<SuperplaneConnection>;
    groupBy?: SpecGroupBy;
    timeout?: number;
    timeoutBehavior?: SpecTimeoutBehavior;
};

export type SuperplaneConnectionType = 'TYPE_UNKNOWN' | 'TYPE_EVENT_SOURCE' | 'TYPE_STAGE' | 'TYPE_CONNECTION_GROUP';

export type SuperplaneCreateCanvasRequest = {
    canvas?: SuperplaneCanvas;
    organizationId?: string;
};

export type SuperplaneCreateCanvasResponse = {
    canvas?: SuperplaneCanvas;
};

export type SuperplaneCreateConnectionGroupBody = {
    connectionGroup?: SuperplaneConnectionGroup;
};

export type SuperplaneCreateConnectionGroupResponse = {
    connectionGroup?: SuperplaneConnectionGroup;
};

export type SuperplaneCreateEventSourceBody = {
    eventSource?: SuperplaneEventSource;
};

export type SuperplaneCreateEventSourceResponse = {
    eventSource?: SuperplaneEventSource;
    key?: string;
};

export type SuperplaneCreateSecretBody = {
    secret?: SuperplaneSecret;
};

export type SuperplaneCreateSecretResponse = {
    secret?: SuperplaneSecret;
};

export type SuperplaneCreateStageBody = {
    stage?: SuperplaneStage;
};

export type SuperplaneCreateStageResponse = {
    stage?: SuperplaneStage;
};

export type SuperplaneDeleteSecretResponse = {
    [key: string]: unknown;
};

export type SuperplaneDescribeCanvasResponse = {
    canvas?: SuperplaneCanvas;
};

export type SuperplaneDescribeConnectionGroupResponse = {
    connectionGroup?: SuperplaneConnectionGroup;
};

export type SuperplaneDescribeEventSourceResponse = {
    eventSource?: SuperplaneEventSource;
};

export type SuperplaneDescribeSecretResponse = {
    secret?: SuperplaneSecret;
};

export type SuperplaneDescribeStageResponse = {
    stage?: SuperplaneStage;
};

export type SuperplaneEventSource = {
    metadata?: SuperplaneEventSourceMetadata;
    spec?: SuperplaneEventSourceSpec;
};

export type SuperplaneEventSourceMetadata = {
    id?: string;
    name?: string;
    canvasId?: string;
    createdAt?: string;
    updatedAt?: string;
};

export type SuperplaneEventSourceSpec = {
    [key: string]: unknown;
};

export type SuperplaneExecution = {
    id?: string;
    referenceId?: string;
    state?: SuperplaneExecutionState;
    result?: ExecutionResult;
    createdAt?: string;
    startedAt?: string;
    finishedAt?: string;
    outputs?: Array<SuperplaneOutputValue>;
};

export type SuperplaneExecutionState = 'STATE_UNKNOWN' | 'STATE_PENDING' | 'STATE_STARTED' | 'STATE_FINISHED';

export type SuperplaneExecutorSpec = {
    type?: SuperplaneExecutorSpecType;
    semaphore?: ExecutorSpecSemaphore;
    http?: ExecutorSpecHttp;
};

export type SuperplaneExecutorSpecType = 'TYPE_UNKNOWN' | 'TYPE_SEMAPHORE' | 'TYPE_HTTP';

export type SuperplaneInputDefinition = {
    name?: string;
    description?: string;
};

export type SuperplaneInputMapping = {
    values?: Array<SuperplaneValueDefinition>;
    when?: InputMappingWhen;
};

export type SuperplaneKeyValuePair = {
    name?: string;
    value?: string;
};

export type SuperplaneListCanvasesResponse = {
    canvases?: Array<SuperplaneCanvas>;
};

export type SuperplaneListConnectionGroupFieldSetsResponse = {
    fieldSets?: Array<SuperplaneConnectionGroupFieldSet>;
};

export type SuperplaneListConnectionGroupsResponse = {
    connectionGroups?: Array<SuperplaneConnectionGroup>;
};

export type SuperplaneListEventSourcesResponse = {
    eventSources?: Array<SuperplaneEventSource>;
};

export type SuperplaneListSecretsResponse = {
    secrets?: Array<SuperplaneSecret>;
};

export type SuperplaneListStageEventsResponse = {
    events?: Array<SuperplaneStageEvent>;
};

export type SuperplaneListStagesResponse = {
    stages?: Array<SuperplaneStage>;
};

export type SuperplaneOutputDefinition = {
    name?: string;
    description?: string;
    required?: boolean;
};

export type SuperplaneOutputValue = {
    name?: string;
    value?: string;
};

export type SuperplaneResetEventSourceKeyBody = {
    [key: string]: unknown;
};

export type SuperplaneResetEventSourceKeyResponse = {
    eventSource?: SuperplaneEventSource;
    key?: string;
};

export type SuperplaneSecret = {
    metadata?: SuperplaneSecretMetadata;
    spec?: SuperplaneSecretSpec;
};

export type SuperplaneSecretMetadata = {
    id?: string;
    name?: string;
    canvasId?: string;
    createdAt?: string;
};

export type SuperplaneSecretSpec = {
    provider?: SecretProvider;
    local?: SecretLocal;
};

export type SuperplaneStage = {
    metadata?: SuperplaneStageMetadata;
    spec?: SuperplaneStageSpec;
};

export type SuperplaneStageEvent = {
    id?: string;
    sourceId?: string;
    sourceType?: SuperplaneConnectionType;
    state?: SuperplaneStageEventState;
    stateReason?: SuperplaneStageEventStateReason;
    createdAt?: string;
    approvals?: Array<SuperplaneStageEventApproval>;
    execution?: SuperplaneExecution;
    inputs?: Array<SuperplaneKeyValuePair>;
};

export type SuperplaneStageEventApproval = {
    approvedBy?: string;
    approvedAt?: string;
};

export type SuperplaneStageEventState = 'STATE_UNKNOWN' | 'STATE_PENDING' | 'STATE_WAITING' | 'STATE_PROCESSED';

export type SuperplaneStageEventStateReason = 'STATE_REASON_UNKNOWN' | 'STATE_REASON_APPROVAL' | 'STATE_REASON_TIME_WINDOW' | 'STATE_REASON_EXECUTION' | 'STATE_REASON_CONNECTION' | 'STATE_REASON_CANCELLED' | 'STATE_REASON_UNHEALTHY';

export type SuperplaneStageMetadata = {
    id?: string;
    name?: string;
    canvasId?: string;
    createdAt?: string;
};

export type SuperplaneStageSpec = {
    connections?: Array<SuperplaneConnection>;
    conditions?: Array<SuperplaneCondition>;
    executor?: SuperplaneExecutorSpec;
    inputs?: Array<SuperplaneInputDefinition>;
    inputMappings?: Array<SuperplaneInputMapping>;
    outputs?: Array<SuperplaneOutputDefinition>;
    secrets?: Array<SuperplaneValueDefinition>;
};

export type SuperplaneUpdateConnectionGroupBody = {
    connectionGroup?: SuperplaneConnectionGroup;
};

export type SuperplaneUpdateConnectionGroupResponse = {
    connectionGroup?: SuperplaneConnectionGroup;
};

export type SuperplaneUpdateSecretBody = {
    secret?: SuperplaneSecret;
};

export type SuperplaneUpdateSecretResponse = {
    secret?: SuperplaneSecret;
};

export type SuperplaneUpdateStageBody = {
    stage?: SuperplaneStage;
};

export type SuperplaneUpdateStageResponse = {
    stage?: SuperplaneStage;
};

export type SuperplaneValueDefinition = {
    name?: string;
    valueFrom?: SuperplaneValueFrom;
    value?: string;
};

export type SuperplaneValueFrom = {
    eventData?: SuperplaneValueFromEventData;
    lastExecution?: SuperplaneValueFromLastExecution;
    secret?: SuperplaneValueFromSecret;
};

export type SuperplaneValueFromEventData = {
    connection?: string;
    expression?: string;
};

export type SuperplaneValueFromLastExecution = {
    results?: Array<ExecutionResult>;
};

export type SuperplaneValueFromSecret = {
    name?: string;
    key?: string;
};

export type ProtobufAny = {
    '@type'?: string;
    [key: string]: unknown | string | undefined;
};

export type RpcStatus = {
    code?: number;
    message?: string;
    details?: Array<ProtobufAny>;
};

export type AuthorizationListRolesData = {
    body?: never;
    path?: never;
    query?: {
        domainType?: 'DOMAIN_TYPE_UNSPECIFIED' | 'DOMAIN_TYPE_ORGANIZATION' | 'DOMAIN_TYPE_CANVAS';
        domainId?: string;
    };
    url: '/api/v1/authorization/roles';
};

export type AuthorizationListRolesErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationListRolesError = AuthorizationListRolesErrors[keyof AuthorizationListRolesErrors];

export type AuthorizationListRolesResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationListRolesResponse;
};

export type AuthorizationListRolesResponse2 = AuthorizationListRolesResponses[keyof AuthorizationListRolesResponses];

export type AuthorizationCreateRoleData = {
    body: AuthorizationCreateRoleRequest;
    path?: never;
    query?: never;
    url: '/api/v1/authorization/roles';
};

export type AuthorizationCreateRoleErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationCreateRoleError = AuthorizationCreateRoleErrors[keyof AuthorizationCreateRoleErrors];

export type AuthorizationCreateRoleResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationCreateRoleResponse;
};

export type AuthorizationCreateRoleResponse2 = AuthorizationCreateRoleResponses[keyof AuthorizationCreateRoleResponses];

export type AuthorizationAssignRoleData = {
    body: AuthorizationAssignRoleRequest;
    path?: never;
    query?: never;
    url: '/api/v1/authorization/roles/assign';
};

export type AuthorizationAssignRoleErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationAssignRoleError = AuthorizationAssignRoleErrors[keyof AuthorizationAssignRoleErrors];

export type AuthorizationAssignRoleResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationAssignRoleResponse;
};

export type AuthorizationAssignRoleResponse2 = AuthorizationAssignRoleResponses[keyof AuthorizationAssignRoleResponses];

export type AuthorizationDescribeRoleData = {
    body?: never;
    path?: never;
    query?: {
        domainType?: 'DOMAIN_TYPE_UNSPECIFIED' | 'DOMAIN_TYPE_ORGANIZATION' | 'DOMAIN_TYPE_CANVAS';
        domainId?: string;
        role?: string;
    };
    url: '/api/v1/authorization/roles/describe';
};

export type AuthorizationDescribeRoleErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationDescribeRoleError = AuthorizationDescribeRoleErrors[keyof AuthorizationDescribeRoleErrors];

export type AuthorizationDescribeRoleResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationDescribeRoleResponse;
};

export type AuthorizationDescribeRoleResponse2 = AuthorizationDescribeRoleResponses[keyof AuthorizationDescribeRoleResponses];

export type AuthorizationRemoveRoleData = {
    body: AuthorizationRemoveRoleRequest;
    path?: never;
    query?: never;
    url: '/api/v1/authorization/roles/remove';
};

export type AuthorizationRemoveRoleErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationRemoveRoleError = AuthorizationRemoveRoleErrors[keyof AuthorizationRemoveRoleErrors];

export type AuthorizationRemoveRoleResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationRemoveRoleResponse;
};

export type AuthorizationRemoveRoleResponse2 = AuthorizationRemoveRoleResponses[keyof AuthorizationRemoveRoleResponses];

export type AuthorizationDeleteRoleData = {
    body?: never;
    path: {
        roleName: string;
    };
    query?: {
        domainType?: 'DOMAIN_TYPE_UNSPECIFIED' | 'DOMAIN_TYPE_ORGANIZATION' | 'DOMAIN_TYPE_CANVAS';
        domainId?: string;
    };
    url: '/api/v1/authorization/roles/{roleName}';
};

export type AuthorizationDeleteRoleErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationDeleteRoleError = AuthorizationDeleteRoleErrors[keyof AuthorizationDeleteRoleErrors];

export type AuthorizationDeleteRoleResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationDeleteRoleResponse;
};

export type AuthorizationDeleteRoleResponse2 = AuthorizationDeleteRoleResponses[keyof AuthorizationDeleteRoleResponses];

export type AuthorizationUpdateRoleData = {
    body: AuthorizationUpdateRoleBody;
    path: {
        roleName: string;
    };
    query?: never;
    url: '/api/v1/authorization/roles/{roleName}';
};

export type AuthorizationUpdateRoleErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationUpdateRoleError = AuthorizationUpdateRoleErrors[keyof AuthorizationUpdateRoleErrors];

export type AuthorizationUpdateRoleResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationUpdateRoleResponse;
};

export type AuthorizationUpdateRoleResponse2 = AuthorizationUpdateRoleResponses[keyof AuthorizationUpdateRoleResponses];

export type AuthorizationListUserPermissionsData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        domainType?: 'DOMAIN_TYPE_UNSPECIFIED' | 'DOMAIN_TYPE_ORGANIZATION' | 'DOMAIN_TYPE_CANVAS';
        domainId?: string;
    };
    url: '/api/v1/authorization/users/{userId}/permissions';
};

export type AuthorizationListUserPermissionsErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationListUserPermissionsError = AuthorizationListUserPermissionsErrors[keyof AuthorizationListUserPermissionsErrors];

export type AuthorizationListUserPermissionsResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationListUserPermissionsResponse;
};

export type AuthorizationListUserPermissionsResponse2 = AuthorizationListUserPermissionsResponses[keyof AuthorizationListUserPermissionsResponses];

export type AuthorizationGetUserRolesData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        domainType?: 'DOMAIN_TYPE_UNSPECIFIED' | 'DOMAIN_TYPE_ORGANIZATION' | 'DOMAIN_TYPE_CANVAS';
        domainId?: string;
    };
    url: '/api/v1/authorization/users/{userId}/roles';
};

export type AuthorizationGetUserRolesErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationGetUserRolesError = AuthorizationGetUserRolesErrors[keyof AuthorizationGetUserRolesErrors];

export type AuthorizationGetUserRolesResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationGetUserRolesResponse;
};

export type AuthorizationGetUserRolesResponse2 = AuthorizationGetUserRolesResponses[keyof AuthorizationGetUserRolesResponses];

export type SuperplaneListCanvasesData = {
    body?: never;
    path?: never;
    query?: {
        organizationId?: string;
    };
    url: '/api/v1/canvases';
};

export type SuperplaneListCanvasesErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneListCanvasesError = SuperplaneListCanvasesErrors[keyof SuperplaneListCanvasesErrors];

export type SuperplaneListCanvasesResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneListCanvasesResponse;
};

export type SuperplaneListCanvasesResponse2 = SuperplaneListCanvasesResponses[keyof SuperplaneListCanvasesResponses];

export type SuperplaneCreateCanvasData = {
    body: SuperplaneCreateCanvasRequest;
    path?: never;
    query?: never;
    url: '/api/v1/canvases';
};

export type SuperplaneCreateCanvasErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneCreateCanvasError = SuperplaneCreateCanvasErrors[keyof SuperplaneCreateCanvasErrors];

export type SuperplaneCreateCanvasResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneCreateCanvasResponse;
};

export type SuperplaneCreateCanvasResponse2 = SuperplaneCreateCanvasResponses[keyof SuperplaneCreateCanvasResponses];

export type SuperplaneListConnectionGroupsData = {
    body?: never;
    path: {
        canvasIdOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/connection-groups';
};

export type SuperplaneListConnectionGroupsErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneListConnectionGroupsError = SuperplaneListConnectionGroupsErrors[keyof SuperplaneListConnectionGroupsErrors];

export type SuperplaneListConnectionGroupsResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneListConnectionGroupsResponse;
};

export type SuperplaneListConnectionGroupsResponse2 = SuperplaneListConnectionGroupsResponses[keyof SuperplaneListConnectionGroupsResponses];

export type SuperplaneCreateConnectionGroupData = {
    body: SuperplaneCreateConnectionGroupBody;
    path: {
        canvasIdOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/connection-groups';
};

export type SuperplaneCreateConnectionGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneCreateConnectionGroupError = SuperplaneCreateConnectionGroupErrors[keyof SuperplaneCreateConnectionGroupErrors];

export type SuperplaneCreateConnectionGroupResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneCreateConnectionGroupResponse;
};

export type SuperplaneCreateConnectionGroupResponse2 = SuperplaneCreateConnectionGroupResponses[keyof SuperplaneCreateConnectionGroupResponses];

export type SuperplaneDescribeConnectionGroupData = {
    body?: never;
    path: {
        canvasIdOrName: string;
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}';
};

export type SuperplaneDescribeConnectionGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneDescribeConnectionGroupError = SuperplaneDescribeConnectionGroupErrors[keyof SuperplaneDescribeConnectionGroupErrors];

export type SuperplaneDescribeConnectionGroupResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneDescribeConnectionGroupResponse;
};

export type SuperplaneDescribeConnectionGroupResponse2 = SuperplaneDescribeConnectionGroupResponses[keyof SuperplaneDescribeConnectionGroupResponses];

export type SuperplaneUpdateConnectionGroupData = {
    body: SuperplaneUpdateConnectionGroupBody;
    path: {
        canvasIdOrName: string;
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}';
};

export type SuperplaneUpdateConnectionGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneUpdateConnectionGroupError = SuperplaneUpdateConnectionGroupErrors[keyof SuperplaneUpdateConnectionGroupErrors];

export type SuperplaneUpdateConnectionGroupResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneUpdateConnectionGroupResponse;
};

export type SuperplaneUpdateConnectionGroupResponse2 = SuperplaneUpdateConnectionGroupResponses[keyof SuperplaneUpdateConnectionGroupResponses];

export type SuperplaneListConnectionGroupFieldSetsData = {
    body?: never;
    path: {
        canvasIdOrName: string;
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}/field-sets';
};

export type SuperplaneListConnectionGroupFieldSetsErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneListConnectionGroupFieldSetsError = SuperplaneListConnectionGroupFieldSetsErrors[keyof SuperplaneListConnectionGroupFieldSetsErrors];

export type SuperplaneListConnectionGroupFieldSetsResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneListConnectionGroupFieldSetsResponse;
};

export type SuperplaneListConnectionGroupFieldSetsResponse2 = SuperplaneListConnectionGroupFieldSetsResponses[keyof SuperplaneListConnectionGroupFieldSetsResponses];

export type SuperplaneListEventSourcesData = {
    body?: never;
    path: {
        canvasIdOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/event-sources';
};

export type SuperplaneListEventSourcesErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneListEventSourcesError = SuperplaneListEventSourcesErrors[keyof SuperplaneListEventSourcesErrors];

export type SuperplaneListEventSourcesResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneListEventSourcesResponse;
};

export type SuperplaneListEventSourcesResponse2 = SuperplaneListEventSourcesResponses[keyof SuperplaneListEventSourcesResponses];

export type SuperplaneCreateEventSourceData = {
    body: SuperplaneCreateEventSourceBody;
    path: {
        canvasIdOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/event-sources';
};

export type SuperplaneCreateEventSourceErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneCreateEventSourceError = SuperplaneCreateEventSourceErrors[keyof SuperplaneCreateEventSourceErrors];

export type SuperplaneCreateEventSourceResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneCreateEventSourceResponse;
};

export type SuperplaneCreateEventSourceResponse2 = SuperplaneCreateEventSourceResponses[keyof SuperplaneCreateEventSourceResponses];

export type SuperplaneResetEventSourceKeyData = {
    body: SuperplaneResetEventSourceKeyBody;
    path: {
        canvasIdOrName: string;
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/event-sources/{idOrName}/reset-key';
};

export type SuperplaneResetEventSourceKeyErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneResetEventSourceKeyError = SuperplaneResetEventSourceKeyErrors[keyof SuperplaneResetEventSourceKeyErrors];

export type SuperplaneResetEventSourceKeyResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneResetEventSourceKeyResponse;
};

export type SuperplaneResetEventSourceKeyResponse2 = SuperplaneResetEventSourceKeyResponses[keyof SuperplaneResetEventSourceKeyResponses];

export type SuperplaneDescribeEventSourceData = {
    body?: never;
    path: {
        canvasIdOrName: string;
        id: string;
    };
    query?: {
        name?: string;
    };
    url: '/api/v1/canvases/{canvasIdOrName}/event-sources/{id}';
};

export type SuperplaneDescribeEventSourceErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneDescribeEventSourceError = SuperplaneDescribeEventSourceErrors[keyof SuperplaneDescribeEventSourceErrors];

export type SuperplaneDescribeEventSourceResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneDescribeEventSourceResponse;
};

export type SuperplaneDescribeEventSourceResponse2 = SuperplaneDescribeEventSourceResponses[keyof SuperplaneDescribeEventSourceResponses];

export type AuthorizationListCanvasGroupsData = {
    body?: never;
    path: {
        canvasIdOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/groups';
};

export type AuthorizationListCanvasGroupsErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationListCanvasGroupsError = AuthorizationListCanvasGroupsErrors[keyof AuthorizationListCanvasGroupsErrors];

export type AuthorizationListCanvasGroupsResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationListCanvasGroupsResponse;
};

export type AuthorizationListCanvasGroupsResponse2 = AuthorizationListCanvasGroupsResponses[keyof AuthorizationListCanvasGroupsResponses];

export type AuthorizationCreateCanvasGroupData = {
    body: AuthorizationCreateCanvasGroupBody;
    path: {
        canvasIdOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/groups';
};

export type AuthorizationCreateCanvasGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationCreateCanvasGroupError = AuthorizationCreateCanvasGroupErrors[keyof AuthorizationCreateCanvasGroupErrors];

export type AuthorizationCreateCanvasGroupResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationCreateCanvasGroupResponse;
};

export type AuthorizationCreateCanvasGroupResponse2 = AuthorizationCreateCanvasGroupResponses[keyof AuthorizationCreateCanvasGroupResponses];

export type AuthorizationGetCanvasGroupData = {
    body?: never;
    path: {
        canvasIdOrName: string;
        groupName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/groups/{groupName}';
};

export type AuthorizationGetCanvasGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationGetCanvasGroupError = AuthorizationGetCanvasGroupErrors[keyof AuthorizationGetCanvasGroupErrors];

export type AuthorizationGetCanvasGroupResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationGetCanvasGroupResponse;
};

export type AuthorizationGetCanvasGroupResponse2 = AuthorizationGetCanvasGroupResponses[keyof AuthorizationGetCanvasGroupResponses];

export type AuthorizationGetCanvasGroupUsersData = {
    body?: never;
    path: {
        canvasIdOrName: string;
        groupName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/groups/{groupName}/users';
};

export type AuthorizationGetCanvasGroupUsersErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationGetCanvasGroupUsersError = AuthorizationGetCanvasGroupUsersErrors[keyof AuthorizationGetCanvasGroupUsersErrors];

export type AuthorizationGetCanvasGroupUsersResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationGetCanvasGroupUsersResponse;
};

export type AuthorizationGetCanvasGroupUsersResponse2 = AuthorizationGetCanvasGroupUsersResponses[keyof AuthorizationGetCanvasGroupUsersResponses];

export type AuthorizationAddUserToCanvasGroupData = {
    body: AuthorizationAddUserToCanvasGroupBody;
    path: {
        canvasIdOrName: string;
        groupName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/groups/{groupName}/users';
};

export type AuthorizationAddUserToCanvasGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationAddUserToCanvasGroupError = AuthorizationAddUserToCanvasGroupErrors[keyof AuthorizationAddUserToCanvasGroupErrors];

export type AuthorizationAddUserToCanvasGroupResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationAddUserToCanvasGroupResponse;
};

export type AuthorizationAddUserToCanvasGroupResponse2 = AuthorizationAddUserToCanvasGroupResponses[keyof AuthorizationAddUserToCanvasGroupResponses];

export type AuthorizationRemoveUserFromCanvasGroupData = {
    body?: never;
    path: {
        canvasIdOrName: string;
        groupName: string;
        userId: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/groups/{groupName}/users/{userId}';
};

export type AuthorizationRemoveUserFromCanvasGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationRemoveUserFromCanvasGroupError = AuthorizationRemoveUserFromCanvasGroupErrors[keyof AuthorizationRemoveUserFromCanvasGroupErrors];

export type AuthorizationRemoveUserFromCanvasGroupResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationRemoveUserFromCanvasGroupResponse;
};

export type AuthorizationRemoveUserFromCanvasGroupResponse2 = AuthorizationRemoveUserFromCanvasGroupResponses[keyof AuthorizationRemoveUserFromCanvasGroupResponses];

export type SuperplaneListSecretsData = {
    body?: never;
    path: {
        canvasIdOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/secrets';
};

export type SuperplaneListSecretsErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneListSecretsError = SuperplaneListSecretsErrors[keyof SuperplaneListSecretsErrors];

export type SuperplaneListSecretsResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneListSecretsResponse;
};

export type SuperplaneListSecretsResponse2 = SuperplaneListSecretsResponses[keyof SuperplaneListSecretsResponses];

export type SuperplaneCreateSecretData = {
    body: SuperplaneCreateSecretBody;
    path: {
        canvasIdOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/secrets';
};

export type SuperplaneCreateSecretErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneCreateSecretError = SuperplaneCreateSecretErrors[keyof SuperplaneCreateSecretErrors];

export type SuperplaneCreateSecretResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneCreateSecretResponse;
};

export type SuperplaneCreateSecretResponse2 = SuperplaneCreateSecretResponses[keyof SuperplaneCreateSecretResponses];

export type SuperplaneDeleteSecretData = {
    body?: never;
    path: {
        canvasIdOrName: string;
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/secrets/{idOrName}';
};

export type SuperplaneDeleteSecretErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneDeleteSecretError = SuperplaneDeleteSecretErrors[keyof SuperplaneDeleteSecretErrors];

export type SuperplaneDeleteSecretResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneDeleteSecretResponse;
};

export type SuperplaneDeleteSecretResponse2 = SuperplaneDeleteSecretResponses[keyof SuperplaneDeleteSecretResponses];

export type SuperplaneDescribeSecretData = {
    body?: never;
    path: {
        canvasIdOrName: string;
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/secrets/{idOrName}';
};

export type SuperplaneDescribeSecretErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneDescribeSecretError = SuperplaneDescribeSecretErrors[keyof SuperplaneDescribeSecretErrors];

export type SuperplaneDescribeSecretResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneDescribeSecretResponse;
};

export type SuperplaneDescribeSecretResponse2 = SuperplaneDescribeSecretResponses[keyof SuperplaneDescribeSecretResponses];

export type SuperplaneUpdateSecretData = {
    body: SuperplaneUpdateSecretBody;
    path: {
        canvasIdOrName: string;
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/secrets/{idOrName}';
};

export type SuperplaneUpdateSecretErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneUpdateSecretError = SuperplaneUpdateSecretErrors[keyof SuperplaneUpdateSecretErrors];

export type SuperplaneUpdateSecretResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneUpdateSecretResponse;
};

export type SuperplaneUpdateSecretResponse2 = SuperplaneUpdateSecretResponses[keyof SuperplaneUpdateSecretResponses];

export type SuperplaneListStagesData = {
    body?: never;
    path: {
        canvasIdOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/stages';
};

export type SuperplaneListStagesErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneListStagesError = SuperplaneListStagesErrors[keyof SuperplaneListStagesErrors];

export type SuperplaneListStagesResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneListStagesResponse;
};

export type SuperplaneListStagesResponse2 = SuperplaneListStagesResponses[keyof SuperplaneListStagesResponses];

export type SuperplaneCreateStageData = {
    body: SuperplaneCreateStageBody;
    path: {
        canvasIdOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/stages';
};

export type SuperplaneCreateStageErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneCreateStageError = SuperplaneCreateStageErrors[keyof SuperplaneCreateStageErrors];

export type SuperplaneCreateStageResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneCreateStageResponse;
};

export type SuperplaneCreateStageResponse2 = SuperplaneCreateStageResponses[keyof SuperplaneCreateStageResponses];

export type SuperplaneUpdateStageData = {
    body: SuperplaneUpdateStageBody;
    path: {
        canvasIdOrName: string;
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/stages/{idOrName}';
};

export type SuperplaneUpdateStageErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneUpdateStageError = SuperplaneUpdateStageErrors[keyof SuperplaneUpdateStageErrors];

export type SuperplaneUpdateStageResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneUpdateStageResponse;
};

export type SuperplaneUpdateStageResponse2 = SuperplaneUpdateStageResponses[keyof SuperplaneUpdateStageResponses];

export type SuperplaneDescribeStageData = {
    body?: never;
    path: {
        canvasIdOrName: string;
        id: string;
    };
    query?: {
        name?: string;
    };
    url: '/api/v1/canvases/{canvasIdOrName}/stages/{id}';
};

export type SuperplaneDescribeStageErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneDescribeStageError = SuperplaneDescribeStageErrors[keyof SuperplaneDescribeStageErrors];

export type SuperplaneDescribeStageResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneDescribeStageResponse;
};

export type SuperplaneDescribeStageResponse2 = SuperplaneDescribeStageResponses[keyof SuperplaneDescribeStageResponses];

export type SuperplaneListStageEventsData = {
    body?: never;
    path: {
        canvasIdOrName: string;
        stageIdOrName: string;
    };
    query?: {
        states?: Array<'STATE_UNKNOWN' | 'STATE_PENDING' | 'STATE_WAITING' | 'STATE_PROCESSED'>;
        stateReasons?: Array<'STATE_REASON_UNKNOWN' | 'STATE_REASON_APPROVAL' | 'STATE_REASON_TIME_WINDOW' | 'STATE_REASON_EXECUTION' | 'STATE_REASON_CONNECTION' | 'STATE_REASON_CANCELLED' | 'STATE_REASON_UNHEALTHY'>;
    };
    url: '/api/v1/canvases/{canvasIdOrName}/stages/{stageIdOrName}/events';
};

export type SuperplaneListStageEventsErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneListStageEventsError = SuperplaneListStageEventsErrors[keyof SuperplaneListStageEventsErrors];

export type SuperplaneListStageEventsResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneListStageEventsResponse;
};

export type SuperplaneListStageEventsResponse2 = SuperplaneListStageEventsResponses[keyof SuperplaneListStageEventsResponses];

export type SuperplaneApproveStageEventData = {
    body: SuperplaneApproveStageEventBody;
    path: {
        canvasIdOrName: string;
        stageIdOrName: string;
        eventId: string;
    };
    query?: never;
    url: '/api/v1/canvases/{canvasIdOrName}/stages/{stageIdOrName}/events/{eventId}/approve';
};

export type SuperplaneApproveStageEventErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneApproveStageEventError = SuperplaneApproveStageEventErrors[keyof SuperplaneApproveStageEventErrors];

export type SuperplaneApproveStageEventResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneApproveStageEventResponse;
};

export type SuperplaneApproveStageEventResponse2 = SuperplaneApproveStageEventResponses[keyof SuperplaneApproveStageEventResponses];

export type SuperplaneDescribeCanvasData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        name?: string;
        organizationId?: string;
    };
    url: '/api/v1/canvases/{id}';
};

export type SuperplaneDescribeCanvasErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type SuperplaneDescribeCanvasError = SuperplaneDescribeCanvasErrors[keyof SuperplaneDescribeCanvasErrors];

export type SuperplaneDescribeCanvasResponses = {
    /**
     * A successful response.
     */
    200: SuperplaneDescribeCanvasResponse;
};

export type SuperplaneDescribeCanvasResponse2 = SuperplaneDescribeCanvasResponses[keyof SuperplaneDescribeCanvasResponses];

export type AuthorizationListOrganizationGroupsData = {
    body?: never;
    path?: never;
    query?: {
        organizationId?: string;
    };
    url: '/api/v1/groups';
};

export type AuthorizationListOrganizationGroupsErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationListOrganizationGroupsError = AuthorizationListOrganizationGroupsErrors[keyof AuthorizationListOrganizationGroupsErrors];

export type AuthorizationListOrganizationGroupsResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationListOrganizationGroupsResponse;
};

export type AuthorizationListOrganizationGroupsResponse2 = AuthorizationListOrganizationGroupsResponses[keyof AuthorizationListOrganizationGroupsResponses];

export type AuthorizationCreateOrganizationGroupData = {
    body: AuthorizationCreateOrganizationGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v1/groups';
};

export type AuthorizationCreateOrganizationGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationCreateOrganizationGroupError = AuthorizationCreateOrganizationGroupErrors[keyof AuthorizationCreateOrganizationGroupErrors];

export type AuthorizationCreateOrganizationGroupResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationCreateOrganizationGroupResponse;
};

export type AuthorizationCreateOrganizationGroupResponse2 = AuthorizationCreateOrganizationGroupResponses[keyof AuthorizationCreateOrganizationGroupResponses];

export type AuthorizationGetOrganizationGroupData = {
    body?: never;
    path: {
        groupName: string;
    };
    query?: {
        organizationId?: string;
    };
    url: '/api/v1/groups/{groupName}';
};

export type AuthorizationGetOrganizationGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationGetOrganizationGroupError = AuthorizationGetOrganizationGroupErrors[keyof AuthorizationGetOrganizationGroupErrors];

export type AuthorizationGetOrganizationGroupResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationGetOrganizationGroupResponse;
};

export type AuthorizationGetOrganizationGroupResponse2 = AuthorizationGetOrganizationGroupResponses[keyof AuthorizationGetOrganizationGroupResponses];

export type AuthorizationGetOrganizationGroupUsersData = {
    body?: never;
    path: {
        groupName: string;
    };
    query?: {
        organizationId?: string;
    };
    url: '/api/v1/groups/{groupName}/users';
};

export type AuthorizationGetOrganizationGroupUsersErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationGetOrganizationGroupUsersError = AuthorizationGetOrganizationGroupUsersErrors[keyof AuthorizationGetOrganizationGroupUsersErrors];

export type AuthorizationGetOrganizationGroupUsersResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationGetOrganizationGroupUsersResponse;
};

export type AuthorizationGetOrganizationGroupUsersResponse2 = AuthorizationGetOrganizationGroupUsersResponses[keyof AuthorizationGetOrganizationGroupUsersResponses];

export type AuthorizationAddUserToOrganizationGroupData = {
    body: AuthorizationAddUserToOrganizationGroupBody;
    path: {
        groupName: string;
    };
    query?: never;
    url: '/api/v1/groups/{groupName}/users';
};

export type AuthorizationAddUserToOrganizationGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationAddUserToOrganizationGroupError = AuthorizationAddUserToOrganizationGroupErrors[keyof AuthorizationAddUserToOrganizationGroupErrors];

export type AuthorizationAddUserToOrganizationGroupResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationAddUserToOrganizationGroupResponse;
};

export type AuthorizationAddUserToOrganizationGroupResponse2 = AuthorizationAddUserToOrganizationGroupResponses[keyof AuthorizationAddUserToOrganizationGroupResponses];

export type AuthorizationRemoveUserFromOrganizationGroupData = {
    body?: never;
    path: {
        groupName: string;
        userId: string;
    };
    query?: {
        organizationId?: string;
    };
    url: '/api/v1/groups/{groupName}/users/{userId}';
};

export type AuthorizationRemoveUserFromOrganizationGroupErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type AuthorizationRemoveUserFromOrganizationGroupError = AuthorizationRemoveUserFromOrganizationGroupErrors[keyof AuthorizationRemoveUserFromOrganizationGroupErrors];

export type AuthorizationRemoveUserFromOrganizationGroupResponses = {
    /**
     * A successful response.
     */
    200: AuthorizationRemoveUserFromOrganizationGroupResponse;
};

export type AuthorizationRemoveUserFromOrganizationGroupResponse2 = AuthorizationRemoveUserFromOrganizationGroupResponses[keyof AuthorizationRemoveUserFromOrganizationGroupResponses];

export type OrganizationsListOrganizationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/organizations';
};

export type OrganizationsListOrganizationsErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type OrganizationsListOrganizationsError = OrganizationsListOrganizationsErrors[keyof OrganizationsListOrganizationsErrors];

export type OrganizationsListOrganizationsResponses = {
    /**
     * A successful response.
     */
    200: OrganizationsListOrganizationsResponse;
};

export type OrganizationsListOrganizationsResponse2 = OrganizationsListOrganizationsResponses[keyof OrganizationsListOrganizationsResponses];

export type OrganizationsCreateOrganizationData = {
    body: OrganizationsCreateOrganizationRequest;
    path?: never;
    query?: never;
    url: '/api/v1/organizations';
};

export type OrganizationsCreateOrganizationErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type OrganizationsCreateOrganizationError = OrganizationsCreateOrganizationErrors[keyof OrganizationsCreateOrganizationErrors];

export type OrganizationsCreateOrganizationResponses = {
    /**
     * A successful response.
     */
    200: OrganizationsCreateOrganizationResponse;
};

export type OrganizationsCreateOrganizationResponse2 = OrganizationsCreateOrganizationResponses[keyof OrganizationsCreateOrganizationResponses];

export type OrganizationsDeleteOrganizationData = {
    body?: never;
    path: {
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/organizations/{idOrName}';
};

export type OrganizationsDeleteOrganizationErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type OrganizationsDeleteOrganizationError = OrganizationsDeleteOrganizationErrors[keyof OrganizationsDeleteOrganizationErrors];

export type OrganizationsDeleteOrganizationResponses = {
    /**
     * A successful response.
     */
    200: OrganizationsDeleteOrganizationResponse;
};

export type OrganizationsDeleteOrganizationResponse2 = OrganizationsDeleteOrganizationResponses[keyof OrganizationsDeleteOrganizationResponses];

export type OrganizationsDescribeOrganizationData = {
    body?: never;
    path: {
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/organizations/{idOrName}';
};

export type OrganizationsDescribeOrganizationErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type OrganizationsDescribeOrganizationError = OrganizationsDescribeOrganizationErrors[keyof OrganizationsDescribeOrganizationErrors];

export type OrganizationsDescribeOrganizationResponses = {
    /**
     * A successful response.
     */
    200: OrganizationsDescribeOrganizationResponse;
};

export type OrganizationsDescribeOrganizationResponse2 = OrganizationsDescribeOrganizationResponses[keyof OrganizationsDescribeOrganizationResponses];

export type OrganizationsUpdateOrganizationData = {
    body: OrganizationsUpdateOrganizationBody;
    path: {
        idOrName: string;
    };
    query?: never;
    url: '/api/v1/organizations/{idOrName}';
};

export type OrganizationsUpdateOrganizationErrors = {
    /**
     * An unexpected error response.
     */
    default: RpcStatus;
};

export type OrganizationsUpdateOrganizationError = OrganizationsUpdateOrganizationErrors[keyof OrganizationsUpdateOrganizationErrors];

export type OrganizationsUpdateOrganizationResponses = {
    /**
     * A successful response.
     */
    200: OrganizationsUpdateOrganizationResponse;
};

export type OrganizationsUpdateOrganizationResponse2 = OrganizationsUpdateOrganizationResponses[keyof OrganizationsUpdateOrganizationResponses];

export type ClientOptions = {
    baseUrl: `http://${string}` | `https://${string}` | (string & {});
};