// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { AuthorizationListGroupsData, AuthorizationListGroupsResponse2, AuthorizationListGroupsError, AuthorizationCreateGroupData, AuthorizationCreateGroupResponse2, AuthorizationCreateGroupError, AuthorizationGetGroupUsersData, AuthorizationGetGroupUsersResponse2, AuthorizationGetGroupUsersError, AuthorizationAddUserToGroupData, AuthorizationAddUserToGroupResponse2, AuthorizationAddUserToGroupError, AuthorizationRemoveUserFromGroupData, AuthorizationRemoveUserFromGroupResponse2, AuthorizationRemoveUserFromGroupError, AuthorizationListRolesData, AuthorizationListRolesResponse2, AuthorizationListRolesError, AuthorizationAssignRoleData, AuthorizationAssignRoleResponse2, AuthorizationAssignRoleError, AuthorizationDescribeRoleData, AuthorizationDescribeRoleResponse2, AuthorizationDescribeRoleError, AuthorizationRemoveRoleData, AuthorizationRemoveRoleResponse2, AuthorizationRemoveRoleError, AuthorizationListUserPermissionsData, AuthorizationListUserPermissionsResponse2, AuthorizationListUserPermissionsError, AuthorizationGetUserRolesData, AuthorizationGetUserRolesResponse2, AuthorizationGetUserRolesError, SuperplaneListCanvasesData, SuperplaneListCanvasesResponse2, SuperplaneListCanvasesError, SuperplaneCreateCanvasData, SuperplaneCreateCanvasResponse2, SuperplaneCreateCanvasError, SuperplaneListConnectionGroupsData, SuperplaneListConnectionGroupsResponse2, SuperplaneListConnectionGroupsError, SuperplaneCreateConnectionGroupData, SuperplaneCreateConnectionGroupResponse2, SuperplaneCreateConnectionGroupError, SuperplaneDescribeConnectionGroupData, SuperplaneDescribeConnectionGroupResponse2, SuperplaneDescribeConnectionGroupError, SuperplaneUpdateConnectionGroupData, SuperplaneUpdateConnectionGroupResponse2, SuperplaneUpdateConnectionGroupError, SuperplaneListConnectionGroupFieldSetsData, SuperplaneListConnectionGroupFieldSetsResponse2, SuperplaneListConnectionGroupFieldSetsError, SuperplaneListEventSourcesData, SuperplaneListEventSourcesResponse2, SuperplaneListEventSourcesError, SuperplaneCreateEventSourceData, SuperplaneCreateEventSourceResponse2, SuperplaneCreateEventSourceError, SuperplaneResetEventSourceKeyData, SuperplaneResetEventSourceKeyResponse2, SuperplaneResetEventSourceKeyError, SuperplaneDescribeEventSourceData, SuperplaneDescribeEventSourceResponse2, SuperplaneDescribeEventSourceError, SuperplaneListSecretsData, SuperplaneListSecretsResponse2, SuperplaneListSecretsError, SuperplaneCreateSecretData, SuperplaneCreateSecretResponse2, SuperplaneCreateSecretError, SuperplaneDeleteSecretData, SuperplaneDeleteSecretResponse2, SuperplaneDeleteSecretError, SuperplaneDescribeSecretData, SuperplaneDescribeSecretResponse2, SuperplaneDescribeSecretError, SuperplaneUpdateSecretData, SuperplaneUpdateSecretResponse2, SuperplaneUpdateSecretError, SuperplaneListStagesData, SuperplaneListStagesResponse2, SuperplaneListStagesError, SuperplaneCreateStageData, SuperplaneCreateStageResponse2, SuperplaneCreateStageError, SuperplaneUpdateStageData, SuperplaneUpdateStageResponse2, SuperplaneUpdateStageError, SuperplaneDescribeStageData, SuperplaneDescribeStageResponse2, SuperplaneDescribeStageError, SuperplaneListStageEventsData, SuperplaneListStageEventsResponse2, SuperplaneListStageEventsError, SuperplaneApproveStageEventData, SuperplaneApproveStageEventResponse2, SuperplaneApproveStageEventError, SuperplaneDescribeCanvasData, SuperplaneDescribeCanvasResponse2, SuperplaneDescribeCanvasError, OrganizationsListOrganizationsData, OrganizationsListOrganizationsResponse2, OrganizationsListOrganizationsError, OrganizationsCreateOrganizationData, OrganizationsCreateOrganizationResponse2, OrganizationsCreateOrganizationError, OrganizationsDeleteOrganizationData, OrganizationsDeleteOrganizationResponse2, OrganizationsDeleteOrganizationError, OrganizationsDescribeOrganizationData, OrganizationsDescribeOrganizationResponse2, OrganizationsDescribeOrganizationError, OrganizationsUpdateOrganizationData, OrganizationsUpdateOrganizationResponse2, OrganizationsUpdateOrganizationError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List groups
 * Returns a list of groups within a domain (organization or canvas)
 */
export const authorizationListGroups = <ThrowOnError extends boolean = false>(options?: Options<AuthorizationListGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthorizationListGroupsResponse2, AuthorizationListGroupsError, ThrowOnError>({
        url: '/api/v1/authorization/groups',
        ...options
    });
};

/**
 * Create group
 * Creates a new group within a domain (organization or canvas) with a specific role
 */
export const authorizationCreateGroup = <ThrowOnError extends boolean = false>(options: Options<AuthorizationCreateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthorizationCreateGroupResponse2, AuthorizationCreateGroupError, ThrowOnError>({
        url: '/api/v1/authorization/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get group users
 * Returns users that belong to a specific group within any domain
 */
export const authorizationGetGroupUsers = <ThrowOnError extends boolean = false>(options?: Options<AuthorizationGetGroupUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthorizationGetGroupUsersResponse2, AuthorizationGetGroupUsersError, ThrowOnError>({
        url: '/api/v1/authorization/groups/users',
        ...options
    });
};

/**
 * Add user to group
 * Adds a user to a group within any domain
 */
export const authorizationAddUserToGroup = <ThrowOnError extends boolean = false>(options: Options<AuthorizationAddUserToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AuthorizationAddUserToGroupResponse2, AuthorizationAddUserToGroupError, ThrowOnError>({
        url: '/api/v1/authorization/groups/users/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove user from group
 * Removes a user from a group within any domain
 */
export const authorizationRemoveUserFromGroup = <ThrowOnError extends boolean = false>(options: Options<AuthorizationRemoveUserFromGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AuthorizationRemoveUserFromGroupResponse2, AuthorizationRemoveUserFromGroupError, ThrowOnError>({
        url: '/api/v1/authorization/groups/users/remove',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List roles
 * Returns available roles for a specific domain type with their permissions and inheritance
 */
export const authorizationListRoles = <ThrowOnError extends boolean = false>(options?: Options<AuthorizationListRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthorizationListRolesResponse2, AuthorizationListRolesError, ThrowOnError>({
        url: '/api/v1/authorization/roles',
        ...options
    });
};

/**
 * Assign role
 * Assigns a role to a user within an organization or canvas
 */
export const authorizationAssignRole = <ThrowOnError extends boolean = false>(options: Options<AuthorizationAssignRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AuthorizationAssignRoleResponse2, AuthorizationAssignRoleError, ThrowOnError>({
        url: '/api/v1/authorization/roles/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Describe role
 * Returns detailed information about a specific role including permissions and inheritance
 */
export const authorizationDescribeRole = <ThrowOnError extends boolean = false>(options?: Options<AuthorizationDescribeRoleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthorizationDescribeRoleResponse2, AuthorizationDescribeRoleError, ThrowOnError>({
        url: '/api/v1/authorization/roles/describe',
        ...options
    });
};

/**
 * Remove role
 * Removes a role from a user within an organization or canvas
 */
export const authorizationRemoveRole = <ThrowOnError extends boolean = false>(options: Options<AuthorizationRemoveRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AuthorizationRemoveRoleResponse2, AuthorizationRemoveRoleError, ThrowOnError>({
        url: '/api/v1/authorization/roles/remove',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List user permissions
 * Returns all permissions a user has within a specific domain
 */
export const authorizationListUserPermissions = <ThrowOnError extends boolean = false>(options: Options<AuthorizationListUserPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AuthorizationListUserPermissionsResponse2, AuthorizationListUserPermissionsError, ThrowOnError>({
        url: '/api/v1/authorization/users/{userId}/permissions',
        ...options
    });
};

/**
 * Get user roles
 * Returns the roles a user has within a specific domain
 */
export const authorizationGetUserRoles = <ThrowOnError extends boolean = false>(options: Options<AuthorizationGetUserRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AuthorizationGetUserRolesResponse2, AuthorizationGetUserRolesError, ThrowOnError>({
        url: '/api/v1/authorization/users/{userId}/roles',
        ...options
    });
};

/**
 * List canvases
 * Returns a list of all canvases
 */
export const superplaneListCanvases = <ThrowOnError extends boolean = false>(options?: Options<SuperplaneListCanvasesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SuperplaneListCanvasesResponse2, SuperplaneListCanvasesError, ThrowOnError>({
        url: '/api/v1/canvases',
        ...options
    });
};

/**
 * Create a new canvas
 * Creates a new canvas with the given name and organization ID
 */
export const superplaneCreateCanvas = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateCanvasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateCanvasResponse2, SuperplaneCreateCanvasError, ThrowOnError>({
        url: '/api/v1/canvases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List connection groups
 * Returns a list of all connection groups for the specified canvas (can be referenced by ID or name)
 */
export const superplaneListConnectionGroups = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListConnectionGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListConnectionGroupsResponse2, SuperplaneListConnectionGroupsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/connection-groups',
        ...options
    });
};

/**
 * Create a new canvas connection group
 * Creates a new canvas connection group
 */
export const superplaneCreateConnectionGroup = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateConnectionGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateConnectionGroupResponse2, SuperplaneCreateConnectionGroupError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/connection-groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get connection group details
 * Returns the details of a specific connection group (canvas can be referenced by ID or name)
 */
export const superplaneDescribeConnectionGroup = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeConnectionGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeConnectionGroupResponse2, SuperplaneDescribeConnectionGroupError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}',
        ...options
    });
};

/**
 * Update a connection group
 * Updates the specified connection group (canvas can be referenced by ID or name)
 */
export const superplaneUpdateConnectionGroup = <ThrowOnError extends boolean = false>(options: Options<SuperplaneUpdateConnectionGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SuperplaneUpdateConnectionGroupResponse2, SuperplaneUpdateConnectionGroupError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List connection group field sets
 * Returns a list of field sets for the specified connection group (canvas can be referenced by ID or name)
 */
export const superplaneListConnectionGroupFieldSets = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListConnectionGroupFieldSetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListConnectionGroupFieldSetsResponse2, SuperplaneListConnectionGroupFieldSetsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}/field-sets',
        ...options
    });
};

/**
 * List event sources
 * Returns a list of all event sources for the specified canvas (can be referenced by ID or name)
 */
export const superplaneListEventSources = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListEventSourcesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListEventSourcesResponse2, SuperplaneListEventSourcesError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources',
        ...options
    });
};

/**
 * Create a new event source
 * Creates a new event source for the specified canvas (can be referenced by ID or name)
 */
export const superplaneCreateEventSource = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateEventSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateEventSourceResponse2, SuperplaneCreateEventSourceError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset the key for an event source
 * Resets the key used to receive events from the specified event source (canvas can be referenced by ID or name)
 */
export const superplaneResetEventSourceKey = <ThrowOnError extends boolean = false>(options: Options<SuperplaneResetEventSourceKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneResetEventSourceKeyResponse2, SuperplaneResetEventSourceKeyError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources/{idOrName}/reset-key',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get event source details
 * Returns the details of a specific event source (canvas can be referenced by ID or name)
 */
export const superplaneDescribeEventSource = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeEventSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeEventSourceResponse2, SuperplaneDescribeEventSourceError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources/{id}',
        ...options
    });
};

/**
 * List secrets
 * Returns a list of all secrets for the specified canvas (can be referenced by ID or name)
 */
export const superplaneListSecrets = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListSecretsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListSecretsResponse2, SuperplaneListSecretsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/secrets',
        ...options
    });
};

/**
 * Create a new canvas secret
 * Creates a new canvas secret
 */
export const superplaneCreateSecret = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateSecretResponse2, SuperplaneCreateSecretError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/secrets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes a canvas secret
 * Deletes the specified canvas secret
 */
export const superplaneDeleteSecret = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDeleteSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SuperplaneDeleteSecretResponse2, SuperplaneDeleteSecretError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/secrets/{idOrName}',
        ...options
    });
};

/**
 * Get secret details
 * Returns the details of a specific secret (canvas can be referenced by ID or name)
 */
export const superplaneDescribeSecret = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeSecretResponse2, SuperplaneDescribeSecretError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/secrets/{idOrName}',
        ...options
    });
};

/**
 * Updates a secret
 * Updates the specified secret (can be referenced by ID or name)
 */
export const superplaneUpdateSecret = <ThrowOnError extends boolean = false>(options: Options<SuperplaneUpdateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SuperplaneUpdateSecretResponse2, SuperplaneUpdateSecretError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/secrets/{idOrName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List stages
 * Returns a list of all stages for the specified canvas (can be referenced by ID or name)
 */
export const superplaneListStages = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListStagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListStagesResponse2, SuperplaneListStagesError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages',
        ...options
    });
};

/**
 * Create a new stage
 * Creates a new stage for the specified canvas (can be referenced by ID or name)
 */
export const superplaneCreateStage = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateStageResponse2, SuperplaneCreateStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update a stage
 * Updates the specified stage (canvas can be referenced by ID or name)
 */
export const superplaneUpdateStage = <ThrowOnError extends boolean = false>(options: Options<SuperplaneUpdateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SuperplaneUpdateStageResponse2, SuperplaneUpdateStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{idOrName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get stage details
 * Returns the details of a specific stage (canvas can be referenced by ID or name)
 */
export const superplaneDescribeStage = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeStageResponse2, SuperplaneDescribeStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{id}',
        ...options
    });
};

/**
 * List stage events
 * Returns a list of events for the specified stage (canvas can be referenced by ID or name)
 */
export const superplaneListStageEvents = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListStageEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListStageEventsResponse2, SuperplaneListStageEventsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{stageIdOrName}/events',
        ...options
    });
};

/**
 * Approve a stage event
 * Approves the specified stage event (canvas can be referenced by ID or name)
 */
export const superplaneApproveStageEvent = <ThrowOnError extends boolean = false>(options: Options<SuperplaneApproveStageEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneApproveStageEventResponse2, SuperplaneApproveStageEventError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{stageIdOrName}/events/{eventId}/approve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get canvas details
 * Returns the details of a specific canvas
 */
export const superplaneDescribeCanvas = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeCanvasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeCanvasResponse2, SuperplaneDescribeCanvasError, ThrowOnError>({
        url: '/api/v1/canvases/{id}',
        ...options
    });
};

/**
 * List organizations
 * Returns a list of all organizations ordered by display name
 */
export const organizationsListOrganizations = <ThrowOnError extends boolean = false>(options?: Options<OrganizationsListOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrganizationsListOrganizationsResponse2, OrganizationsListOrganizationsError, ThrowOnError>({
        url: '/api/v1/organizations',
        ...options
    });
};

/**
 * Create a new organization
 * Creates a new organization with the given name and display name
 */
export const organizationsCreateOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsCreateOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationsCreateOrganizationResponse2, OrganizationsCreateOrganizationError, ThrowOnError>({
        url: '/api/v1/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an organization
 * Deletes the specified organization (can be referenced by ID or name)
 */
export const organizationsDeleteOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsDeleteOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationsDeleteOrganizationResponse2, OrganizationsDeleteOrganizationError, ThrowOnError>({
        url: '/api/v1/organizations/{idOrName}',
        ...options
    });
};

/**
 * Get organization details
 * Returns the details of a specific organization (can be referenced by ID or name)
 */
export const organizationsDescribeOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsDescribeOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationsDescribeOrganizationResponse2, OrganizationsDescribeOrganizationError, ThrowOnError>({
        url: '/api/v1/organizations/{idOrName}',
        ...options
    });
};

/**
 * Update an organization
 * Updates the specified organization (can be referenced by ID or name)
 */
export const organizationsUpdateOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsUpdateOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrganizationsUpdateOrganizationResponse2, OrganizationsUpdateOrganizationError, ThrowOnError>({
        url: '/api/v1/organizations/{idOrName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};