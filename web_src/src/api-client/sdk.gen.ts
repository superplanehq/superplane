// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SuperplaneListCanvasesData, SuperplaneListCanvasesResponse2, SuperplaneListCanvasesError, SuperplaneCreateCanvasData, SuperplaneCreateCanvasResponse2, SuperplaneCreateCanvasError, SuperplaneListConnectionGroupsData, SuperplaneListConnectionGroupsResponse2, SuperplaneListConnectionGroupsError, SuperplaneCreateConnectionGroupData, SuperplaneCreateConnectionGroupResponse2, SuperplaneCreateConnectionGroupError, SuperplaneDescribeConnectionGroupData, SuperplaneDescribeConnectionGroupResponse2, SuperplaneDescribeConnectionGroupError, SuperplaneUpdateConnectionGroupData, SuperplaneUpdateConnectionGroupResponse2, SuperplaneUpdateConnectionGroupError, SuperplaneListConnectionGroupFieldSetsData, SuperplaneListConnectionGroupFieldSetsResponse2, SuperplaneListConnectionGroupFieldSetsError, SuperplaneListEventSourcesData, SuperplaneListEventSourcesResponse2, SuperplaneListEventSourcesError, SuperplaneCreateEventSourceData, SuperplaneCreateEventSourceResponse2, SuperplaneCreateEventSourceError, SuperplaneDescribeEventSourceData, SuperplaneDescribeEventSourceResponse2, SuperplaneDescribeEventSourceError, SuperplaneResetEventSourceKeyData, SuperplaneResetEventSourceKeyResponse2, SuperplaneResetEventSourceKeyError, SuperplaneListEventsData, SuperplaneListEventsResponse2, SuperplaneListEventsError, SuperplaneListStagesData, SuperplaneListStagesResponse2, SuperplaneListStagesError, SuperplaneCreateStageData, SuperplaneCreateStageResponse2, SuperplaneCreateStageError, SuperplaneDescribeStageData, SuperplaneDescribeStageResponse2, SuperplaneDescribeStageError, SuperplaneUpdateStageData, SuperplaneUpdateStageResponse2, SuperplaneUpdateStageError, SuperplaneListStageEventsData, SuperplaneListStageEventsResponse2, SuperplaneListStageEventsError, SuperplaneApproveStageEventData, SuperplaneApproveStageEventResponse2, SuperplaneApproveStageEventError, SuperplaneDeleteCanvasData, SuperplaneDeleteCanvasResponse2, SuperplaneDeleteCanvasError, SuperplaneDescribeCanvasData, SuperplaneDescribeCanvasResponse2, SuperplaneDescribeCanvasError, GroupsListGroupsData, GroupsListGroupsResponse2, GroupsListGroupsError, GroupsCreateGroupData, GroupsCreateGroupResponse2, GroupsCreateGroupError, GroupsDeleteGroupData, GroupsDeleteGroupResponse2, GroupsDeleteGroupError, GroupsDescribeGroupData, GroupsDescribeGroupResponse2, GroupsDescribeGroupError, GroupsUpdateGroupData, GroupsUpdateGroupResponse2, GroupsUpdateGroupError, GroupsListGroupUsersData, GroupsListGroupUsersResponse2, GroupsListGroupUsersError, GroupsAddUserToGroupData, GroupsAddUserToGroupResponse2, GroupsAddUserToGroupError, GroupsRemoveUserFromGroupData, GroupsRemoveUserFromGroupResponse2, GroupsRemoveUserFromGroupError, IntegrationsListIntegrationsData, IntegrationsListIntegrationsResponse2, IntegrationsListIntegrationsError, IntegrationsCreateIntegrationData, IntegrationsCreateIntegrationResponse2, IntegrationsCreateIntegrationError, IntegrationsDescribeIntegrationData, IntegrationsDescribeIntegrationResponse2, IntegrationsDescribeIntegrationError, OrganizationsDeleteOrganizationData, OrganizationsDeleteOrganizationResponse2, OrganizationsDeleteOrganizationError, OrganizationsDescribeOrganizationData, OrganizationsDescribeOrganizationResponse2, OrganizationsDescribeOrganizationError, OrganizationsUpdateOrganizationData, OrganizationsUpdateOrganizationResponse2, OrganizationsUpdateOrganizationError, OrganizationsListInvitationsData, OrganizationsListInvitationsResponse2, OrganizationsListInvitationsError, OrganizationsCreateInvitationData, OrganizationsCreateInvitationResponse2, OrganizationsCreateInvitationError, RolesListRolesData, RolesListRolesResponse2, RolesListRolesError, RolesCreateRoleData, RolesCreateRoleResponse2, RolesCreateRoleError, RolesAssignRoleData, RolesAssignRoleResponse2, RolesAssignRoleError, RolesDescribeRoleData, RolesDescribeRoleResponse2, RolesDescribeRoleError, RolesRemoveRoleData, RolesRemoveRoleResponse2, RolesRemoveRoleError, RolesDeleteRoleData, RolesDeleteRoleResponse2, RolesDeleteRoleError, RolesUpdateRoleData, RolesUpdateRoleResponse2, RolesUpdateRoleError, SecretsListSecretsData, SecretsListSecretsResponse2, SecretsListSecretsError, SecretsCreateSecretData, SecretsCreateSecretResponse2, SecretsCreateSecretError, SecretsDeleteSecretData, SecretsDeleteSecretResponse2, SecretsDeleteSecretError, SecretsDescribeSecretData, SecretsDescribeSecretResponse2, SecretsDescribeSecretError, SecretsUpdateSecretData, SecretsUpdateSecretResponse2, SecretsUpdateSecretError, UsersListUsersData, UsersListUsersResponse2, UsersListUsersError, UsersListUserPermissionsData, UsersListUserPermissionsResponse2, UsersListUserPermissionsError, UsersListUserRolesData, UsersListUserRolesResponse2, UsersListUserRolesError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List canvases
 * Returns a list of all canvases
 */
export const superplaneListCanvases = <ThrowOnError extends boolean = true>(options?: Options<SuperplaneListCanvasesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SuperplaneListCanvasesResponse2, SuperplaneListCanvasesError, ThrowOnError>({
        url: '/api/v1/canvases',
        ...options
    });
};

/**
 * Create a new canvas
 * Creates a new canvas with the given name and organization ID
 */
export const superplaneCreateCanvas = <ThrowOnError extends boolean = true>(options: Options<SuperplaneCreateCanvasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateCanvasResponse2, SuperplaneCreateCanvasError, ThrowOnError>({
        url: '/api/v1/canvases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List connection groups
 * Returns a list of all connection groups for the specified canvas (can be referenced by ID or name)
 */
export const superplaneListConnectionGroups = <ThrowOnError extends boolean = true>(options: Options<SuperplaneListConnectionGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListConnectionGroupsResponse2, SuperplaneListConnectionGroupsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/connection-groups',
        ...options
    });
};

/**
 * Create a new canvas connection group
 * Creates a new canvas connection group
 */
export const superplaneCreateConnectionGroup = <ThrowOnError extends boolean = true>(options: Options<SuperplaneCreateConnectionGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateConnectionGroupResponse2, SuperplaneCreateConnectionGroupError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/connection-groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get connection group details
 * Returns the details of a specific connection group (canvas can be referenced by ID or name)
 */
export const superplaneDescribeConnectionGroup = <ThrowOnError extends boolean = true>(options: Options<SuperplaneDescribeConnectionGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeConnectionGroupResponse2, SuperplaneDescribeConnectionGroupError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}',
        ...options
    });
};

/**
 * Update a connection group
 * Updates the specified connection group (canvas can be referenced by ID or name)
 */
export const superplaneUpdateConnectionGroup = <ThrowOnError extends boolean = true>(options: Options<SuperplaneUpdateConnectionGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SuperplaneUpdateConnectionGroupResponse2, SuperplaneUpdateConnectionGroupError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List connection group field sets
 * Returns a list of field sets for the specified connection group (canvas can be referenced by ID or name)
 */
export const superplaneListConnectionGroupFieldSets = <ThrowOnError extends boolean = true>(options: Options<SuperplaneListConnectionGroupFieldSetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListConnectionGroupFieldSetsResponse2, SuperplaneListConnectionGroupFieldSetsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}/field-sets',
        ...options
    });
};

/**
 * List event sources
 * Returns a list of all event sources for the specified canvas (can be referenced by ID or name)
 */
export const superplaneListEventSources = <ThrowOnError extends boolean = true>(options: Options<SuperplaneListEventSourcesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListEventSourcesResponse2, SuperplaneListEventSourcesError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources',
        ...options
    });
};

/**
 * Create a new event source
 * Creates a new event source for the specified canvas (can be referenced by ID or name)
 */
export const superplaneCreateEventSource = <ThrowOnError extends boolean = true>(options: Options<SuperplaneCreateEventSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateEventSourceResponse2, SuperplaneCreateEventSourceError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get event source details
 * Returns the details of a specific event source (canvas can be referenced by ID or name)
 */
export const superplaneDescribeEventSource = <ThrowOnError extends boolean = true>(options: Options<SuperplaneDescribeEventSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeEventSourceResponse2, SuperplaneDescribeEventSourceError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources/{idOrName}',
        ...options
    });
};

/**
 * Reset the key for an event source
 * Resets the key used to receive events from the specified event source (canvas can be referenced by ID or name)
 */
export const superplaneResetEventSourceKey = <ThrowOnError extends boolean = true>(options: Options<SuperplaneResetEventSourceKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneResetEventSourceKeyResponse2, SuperplaneResetEventSourceKeyError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources/{idOrName}/reset-key',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List events
 * Returns a list of events with optional filtering by source type and source ID
 */
export const superplaneListEvents = <ThrowOnError extends boolean = true>(options: Options<SuperplaneListEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListEventsResponse2, SuperplaneListEventsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/events',
        ...options
    });
};

/**
 * List stages
 * Returns a list of all stages for the specified canvas (can be referenced by ID or name)
 */
export const superplaneListStages = <ThrowOnError extends boolean = true>(options: Options<SuperplaneListStagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListStagesResponse2, SuperplaneListStagesError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages',
        ...options
    });
};

/**
 * Create a new stage
 * Creates a new stage for the specified canvas (can be referenced by ID or name)
 */
export const superplaneCreateStage = <ThrowOnError extends boolean = true>(options: Options<SuperplaneCreateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateStageResponse2, SuperplaneCreateStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get stage details
 * Returns the details of a specific stage
 */
export const superplaneDescribeStage = <ThrowOnError extends boolean = true>(options: Options<SuperplaneDescribeStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeStageResponse2, SuperplaneDescribeStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{idOrName}',
        ...options
    });
};

/**
 * Update a stage
 * Updates the specified stage (canvas can be referenced by ID or name)
 */
export const superplaneUpdateStage = <ThrowOnError extends boolean = true>(options: Options<SuperplaneUpdateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SuperplaneUpdateStageResponse2, SuperplaneUpdateStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{idOrName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List stage events
 * Returns a list of events for the specified stage (canvas can be referenced by ID or name)
 */
export const superplaneListStageEvents = <ThrowOnError extends boolean = true>(options: Options<SuperplaneListStageEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListStageEventsResponse2, SuperplaneListStageEventsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{stageIdOrName}/events',
        ...options
    });
};

/**
 * Approve a stage event
 * Approves the specified stage event (canvas can be referenced by ID or name)
 */
export const superplaneApproveStageEvent = <ThrowOnError extends boolean = true>(options: Options<SuperplaneApproveStageEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneApproveStageEventResponse2, SuperplaneApproveStageEventError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{stageIdOrName}/events/{eventId}/approve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a canvas
 * Deletes the specified canvas (can be referenced by ID or name)
 */
export const superplaneDeleteCanvas = <ThrowOnError extends boolean = true>(options: Options<SuperplaneDeleteCanvasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SuperplaneDeleteCanvasResponse2, SuperplaneDeleteCanvasError, ThrowOnError>({
        url: '/api/v1/canvases/{idOrName}',
        ...options
    });
};

/**
 * Get canvas details
 * Returns the details of a specific canvas
 */
export const superplaneDescribeCanvas = <ThrowOnError extends boolean = true>(options: Options<SuperplaneDescribeCanvasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeCanvasResponse2, SuperplaneDescribeCanvasError, ThrowOnError>({
        url: '/api/v1/canvases/{id}',
        ...options
    });
};

/**
 * List groups
 * Returns a list of groups within a domain
 */
export const groupsListGroups = <ThrowOnError extends boolean = true>(options?: Options<GroupsListGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GroupsListGroupsResponse2, GroupsListGroupsError, ThrowOnError>({
        url: '/api/v1/groups',
        ...options
    });
};

/**
 * Create group
 * Creates a new group within a domain with a specific role
 */
export const groupsCreateGroup = <ThrowOnError extends boolean = true>(options: Options<GroupsCreateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupsCreateGroupResponse2, GroupsCreateGroupError, ThrowOnError>({
        url: '/api/v1/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete group
 * Deletes an existing group within a domain
 */
export const groupsDeleteGroup = <ThrowOnError extends boolean = true>(options: Options<GroupsDeleteGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GroupsDeleteGroupResponse2, GroupsDeleteGroupError, ThrowOnError>({
        url: '/api/v1/groups/{groupName}',
        ...options
    });
};

/**
 * Get group
 * Returns details of a specific group within a domain
 */
export const groupsDescribeGroup = <ThrowOnError extends boolean = true>(options: Options<GroupsDescribeGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GroupsDescribeGroupResponse2, GroupsDescribeGroupError, ThrowOnError>({
        url: '/api/v1/groups/{groupName}',
        ...options
    });
};

/**
 * Update group
 * Updates an existing group within a domain
 */
export const groupsUpdateGroup = <ThrowOnError extends boolean = true>(options: Options<GroupsUpdateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<GroupsUpdateGroupResponse2, GroupsUpdateGroupError, ThrowOnError>({
        url: '/api/v1/groups/{groupName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get group users
 * Returns users that belong to a specific group within a domain
 */
export const groupsListGroupUsers = <ThrowOnError extends boolean = true>(options: Options<GroupsListGroupUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GroupsListGroupUsersResponse2, GroupsListGroupUsersError, ThrowOnError>({
        url: '/api/v1/groups/{groupName}/users',
        ...options
    });
};

/**
 * Add user to group
 * Adds a user to a group within a domain
 */
export const groupsAddUserToGroup = <ThrowOnError extends boolean = true>(options: Options<GroupsAddUserToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupsAddUserToGroupResponse2, GroupsAddUserToGroupError, ThrowOnError>({
        url: '/api/v1/groups/{groupName}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove user from group
 * Removes a user from a group within a domain
 */
export const groupsRemoveUserFromGroup = <ThrowOnError extends boolean = true>(options: Options<GroupsRemoveUserFromGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GroupsRemoveUserFromGroupResponse2, GroupsRemoveUserFromGroupError, ThrowOnError>({
        url: '/api/v1/groups/{groupName}/users/remove',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List integrations
 * List integrations
 */
export const integrationsListIntegrations = <ThrowOnError extends boolean = true>(options?: Options<IntegrationsListIntegrationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IntegrationsListIntegrationsResponse2, IntegrationsListIntegrationsError, ThrowOnError>({
        url: '/api/v1/integrations',
        ...options
    });
};

/**
 * Create a new canvas integration
 * Creates a new canvas integration
 */
export const integrationsCreateIntegration = <ThrowOnError extends boolean = true>(options: Options<IntegrationsCreateIntegrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IntegrationsCreateIntegrationResponse2, IntegrationsCreateIntegrationError, ThrowOnError>({
        url: '/api/v1/integrations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Describe an integration
 * Describe an integration
 */
export const integrationsDescribeIntegration = <ThrowOnError extends boolean = true>(options: Options<IntegrationsDescribeIntegrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IntegrationsDescribeIntegrationResponse2, IntegrationsDescribeIntegrationError, ThrowOnError>({
        url: '/api/v1/integrations/{idOrName}',
        ...options
    });
};

/**
 * Delete an organization
 * Deletes the specified organization (can be referenced by ID or name)
 */
export const organizationsDeleteOrganization = <ThrowOnError extends boolean = true>(options: Options<OrganizationsDeleteOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationsDeleteOrganizationResponse2, OrganizationsDeleteOrganizationError, ThrowOnError>({
        url: '/api/v1/organizations/{id}',
        ...options
    });
};

/**
 * Get organization details
 * Returns the details of a specific organization (can be referenced by ID or name)
 */
export const organizationsDescribeOrganization = <ThrowOnError extends boolean = true>(options: Options<OrganizationsDescribeOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationsDescribeOrganizationResponse2, OrganizationsDescribeOrganizationError, ThrowOnError>({
        url: '/api/v1/organizations/{id}',
        ...options
    });
};

/**
 * Update an organization
 * Updates the specified organization (can be referenced by ID or name)
 */
export const organizationsUpdateOrganization = <ThrowOnError extends boolean = true>(options: Options<OrganizationsUpdateOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrganizationsUpdateOrganizationResponse2, OrganizationsUpdateOrganizationError, ThrowOnError>({
        url: '/api/v1/organizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List organization invitations
 * Returns pending invitations for an organization
 */
export const organizationsListInvitations = <ThrowOnError extends boolean = true>(options: Options<OrganizationsListInvitationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationsListInvitationsResponse2, OrganizationsListInvitationsError, ThrowOnError>({
        url: '/api/v1/organizations/{id}/invitations',
        ...options
    });
};

/**
 * Create an organization invitation
 * Invites a user to join an organization by email
 */
export const organizationsCreateInvitation = <ThrowOnError extends boolean = true>(options: Options<OrganizationsCreateInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationsCreateInvitationResponse2, OrganizationsCreateInvitationError, ThrowOnError>({
        url: '/api/v1/organizations/{id}/invitations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List roles
 * Returns available roles for a specific domain type with their permissions and inheritance
 */
export const rolesListRoles = <ThrowOnError extends boolean = true>(options?: Options<RolesListRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RolesListRolesResponse2, RolesListRolesError, ThrowOnError>({
        url: '/api/v1/roles',
        ...options
    });
};

/**
 * Create role
 * Creates a new custom role with specified permissions
 */
export const rolesCreateRole = <ThrowOnError extends boolean = true>(options: Options<RolesCreateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RolesCreateRoleResponse2, RolesCreateRoleError, ThrowOnError>({
        url: '/api/v1/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Assign role
 * Assigns a role to a user within a domain
 */
export const rolesAssignRole = <ThrowOnError extends boolean = true>(options: Options<RolesAssignRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RolesAssignRoleResponse2, RolesAssignRoleError, ThrowOnError>({
        url: '/api/v1/roles/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Describe role
 * Returns detailed information about a specific role including permissions and inheritance
 */
export const rolesDescribeRole = <ThrowOnError extends boolean = true>(options?: Options<RolesDescribeRoleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RolesDescribeRoleResponse2, RolesDescribeRoleError, ThrowOnError>({
        url: '/api/v1/roles/describe',
        ...options
    });
};

/**
 * Remove role
 * Removes a role from a user within a domain
 */
export const rolesRemoveRole = <ThrowOnError extends boolean = true>(options: Options<RolesRemoveRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RolesRemoveRoleResponse2, RolesRemoveRoleError, ThrowOnError>({
        url: '/api/v1/roles/remove',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete role
 * Deletes an existing custom role
 */
export const rolesDeleteRole = <ThrowOnError extends boolean = true>(options: Options<RolesDeleteRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RolesDeleteRoleResponse2, RolesDeleteRoleError, ThrowOnError>({
        url: '/api/v1/roles/{roleName}',
        ...options
    });
};

/**
 * Update role
 * Updates an existing custom role with new permissions
 */
export const rolesUpdateRole = <ThrowOnError extends boolean = true>(options: Options<RolesUpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RolesUpdateRoleResponse2, RolesUpdateRoleError, ThrowOnError>({
        url: '/api/v1/roles/{roleName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List secrets
 * Returns the list of secrets
 */
export const secretsListSecrets = <ThrowOnError extends boolean = true>(options?: Options<SecretsListSecretsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SecretsListSecretsResponse2, SecretsListSecretsError, ThrowOnError>({
        url: '/api/v1/secrets',
        ...options
    });
};

/**
 * Create a new secret
 * Creates a new secret
 */
export const secretsCreateSecret = <ThrowOnError extends boolean = true>(options: Options<SecretsCreateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SecretsCreateSecretResponse2, SecretsCreateSecretError, ThrowOnError>({
        url: '/api/v1/secrets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes a secret
 * Deletes the specified secret
 */
export const secretsDeleteSecret = <ThrowOnError extends boolean = true>(options: Options<SecretsDeleteSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SecretsDeleteSecretResponse2, SecretsDeleteSecretError, ThrowOnError>({
        url: '/api/v1/secrets/{idOrName}',
        ...options
    });
};

/**
 * Get secret details
 * Returns the details of a specific secret
 */
export const secretsDescribeSecret = <ThrowOnError extends boolean = true>(options: Options<SecretsDescribeSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SecretsDescribeSecretResponse2, SecretsDescribeSecretError, ThrowOnError>({
        url: '/api/v1/secrets/{idOrName}',
        ...options
    });
};

/**
 * Updates a secret
 * Updates the specified secret
 */
export const secretsUpdateSecret = <ThrowOnError extends boolean = true>(options: Options<SecretsUpdateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SecretsUpdateSecretResponse2, SecretsUpdateSecretError, ThrowOnError>({
        url: '/api/v1/secrets/{idOrName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List users
 * Returns all users that have roles within a domain
 */
export const usersListUsers = <ThrowOnError extends boolean = true>(options?: Options<UsersListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersListUsersResponse2, UsersListUsersError, ThrowOnError>({
        url: '/api/v1/users',
        ...options
    });
};

/**
 * List user permissions
 * Returns all permissions a user has within a specific domain
 */
export const usersListUserPermissions = <ThrowOnError extends boolean = true>(options: Options<UsersListUserPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersListUserPermissionsResponse2, UsersListUserPermissionsError, ThrowOnError>({
        url: '/api/v1/users/{userId}/permissions',
        ...options
    });
};

/**
 * Get user roles
 * Returns the roles a user has within a specific domain
 */
export const usersListUserRoles = <ThrowOnError extends boolean = true>(options: Options<UsersListUserRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersListUserRolesResponse2, UsersListUserRolesError, ThrowOnError>({
        url: '/api/v1/users/{userId}/roles',
        ...options
    });
};