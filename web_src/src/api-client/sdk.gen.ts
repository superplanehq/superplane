// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SuperplaneCreateCanvasData, SuperplaneCreateCanvasResponse2, SuperplaneCreateCanvasError, SuperplaneListEventSourcesData, SuperplaneListEventSourcesResponse2, SuperplaneListEventSourcesError, SuperplaneCreateEventSourceData, SuperplaneCreateEventSourceResponse2, SuperplaneCreateEventSourceError, SuperplaneDescribeEventSourceData, SuperplaneDescribeEventSourceResponse2, SuperplaneDescribeEventSourceError, SuperplaneListStagesData, SuperplaneListStagesResponse2, SuperplaneListStagesError, SuperplaneCreateStageData, SuperplaneCreateStageResponse2, SuperplaneCreateStageError, SuperplaneDescribeStageData, SuperplaneDescribeStageResponse2, SuperplaneDescribeStageError, SuperplaneUpdateStageData, SuperplaneUpdateStageResponse2, SuperplaneUpdateStageError, SuperplaneListStageEventsData, SuperplaneListStageEventsResponse2, SuperplaneListStageEventsError, SuperplaneApproveStageEventData, SuperplaneApproveStageEventResponse2, SuperplaneApproveStageEventError, SuperplaneDescribeCanvasData, SuperplaneDescribeCanvasResponse2, SuperplaneDescribeCanvasError, SuperplaneListTags2Data, SuperplaneListTags2Response, SuperplaneListTags2Error, SuperplaneListTagsData, SuperplaneListTagsResponse2, SuperplaneListTagsError, SuperplaneUpdateTagStateData, SuperplaneUpdateTagStateResponse2, SuperplaneUpdateTagStateError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create a new canvas
 * Creates a new canvas with the given name and organization ID
 */
export const superplaneCreateCanvas = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateCanvasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateCanvasResponse2, SuperplaneCreateCanvasError, ThrowOnError>({
        url: '/api/v1/canvases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List event sources
 * Returns a list of all event sources for the specified canvas
 */
export const superplaneListEventSources = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListEventSourcesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListEventSourcesResponse2, SuperplaneListEventSourcesError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasId}/event-sources',
        ...options
    });
};

/**
 * Create a new event source
 * Creates a new event source for the specified canvas
 */
export const superplaneCreateEventSource = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateEventSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateEventSourceResponse2, SuperplaneCreateEventSourceError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasId}/event-sources',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get event source details
 * Returns the details of a specific event source
 */
export const superplaneDescribeEventSource = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeEventSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeEventSourceResponse2, SuperplaneDescribeEventSourceError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasId}/event-sources/{id}',
        ...options
    });
};

/**
 * List stages
 * Returns a list of all stages for the specified canvas
 */
export const superplaneListStages = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListStagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListStagesResponse2, SuperplaneListStagesError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasId}/stages',
        ...options
    });
};

/**
 * Create a new stage
 * Creates a new stage for the specified canvas
 */
export const superplaneCreateStage = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateStageResponse2, SuperplaneCreateStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasId}/stages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get stage details
 * Returns the details of a specific stage
 */
export const superplaneDescribeStage = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeStageResponse2, SuperplaneDescribeStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasId}/stages/{id}',
        ...options
    });
};

/**
 * Update a stage
 * Updates the specified stage
 */
export const superplaneUpdateStage = <ThrowOnError extends boolean = false>(options: Options<SuperplaneUpdateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SuperplaneUpdateStageResponse2, SuperplaneUpdateStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasId}/stages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List stage events
 * Returns a list of events for the specified stage
 */
export const superplaneListStageEvents = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListStageEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListStageEventsResponse2, SuperplaneListStageEventsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasId}/stages/{stageId}/events',
        ...options
    });
};

/**
 * Approve a stage event
 * Approves the specified stage event
 */
export const superplaneApproveStageEvent = <ThrowOnError extends boolean = false>(options: Options<SuperplaneApproveStageEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneApproveStageEventResponse2, SuperplaneApproveStageEventError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasId}/stages/{stageId}/events/{eventId}/approve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get canvas details
 * Returns the details of a specific canvas
 */
export const superplaneDescribeCanvas = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeCanvasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeCanvasResponse2, SuperplaneDescribeCanvasError, ThrowOnError>({
        url: '/api/v1/canvases/{id}',
        ...options
    });
};

/**
 * List tags
 * Returns a list of tags, optionally filtered by stage
 */
export const superplaneListTags2 = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListTags2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListTags2Response, SuperplaneListTags2Error, ThrowOnError>({
        url: '/api/v1/stages/{stageId}/tags',
        ...options
    });
};

/**
 * List tags
 * Returns a list of tags, optionally filtered by stage
 */
export const superplaneListTags = <ThrowOnError extends boolean = false>(options?: Options<SuperplaneListTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SuperplaneListTagsResponse2, SuperplaneListTagsError, ThrowOnError>({
        url: '/api/v1/tags',
        ...options
    });
};

/**
 * Update tag state
 * Updates the state of the specified tag
 */
export const superplaneUpdateTagState = <ThrowOnError extends boolean = false>(options: Options<SuperplaneUpdateTagStateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SuperplaneUpdateTagStateResponse2, SuperplaneUpdateTagStateError, ThrowOnError>({
        url: '/api/v1/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};