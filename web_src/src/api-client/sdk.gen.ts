// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SuperplaneListCanvasesData, SuperplaneListCanvasesResponse2, SuperplaneListCanvasesError, SuperplaneCreateCanvasData, SuperplaneCreateCanvasResponse2, SuperplaneCreateCanvasError, SuperplaneListEventSourcesData, SuperplaneListEventSourcesResponse2, SuperplaneListEventSourcesError, SuperplaneCreateEventSourceData, SuperplaneCreateEventSourceResponse2, SuperplaneCreateEventSourceError, SuperplaneDescribeEventSourceData, SuperplaneDescribeEventSourceResponse2, SuperplaneDescribeEventSourceError, SuperplaneListSecretsData, SuperplaneListSecretsResponse2, SuperplaneListSecretsError, SuperplaneCreateSecretData, SuperplaneCreateSecretResponse2, SuperplaneCreateSecretError, SuperplaneDeleteSecretData, SuperplaneDeleteSecretResponse2, SuperplaneDeleteSecretError, SuperplaneDescribeSecretData, SuperplaneDescribeSecretResponse2, SuperplaneDescribeSecretError, SuperplaneUpdateSecretData, SuperplaneUpdateSecretResponse2, SuperplaneUpdateSecretError, SuperplaneListStagesData, SuperplaneListStagesResponse2, SuperplaneListStagesError, SuperplaneCreateStageData, SuperplaneCreateStageResponse2, SuperplaneCreateStageError, SuperplaneUpdateStageData, SuperplaneUpdateStageResponse2, SuperplaneUpdateStageError, SuperplaneDescribeStageData, SuperplaneDescribeStageResponse2, SuperplaneDescribeStageError, SuperplaneListStageEventsData, SuperplaneListStageEventsResponse2, SuperplaneListStageEventsError, SuperplaneApproveStageEventData, SuperplaneApproveStageEventResponse2, SuperplaneApproveStageEventError, SuperplaneDescribeCanvasData, SuperplaneDescribeCanvasResponse2, SuperplaneDescribeCanvasError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List canvases
 * Returns a list of all canvases
 */
export const superplaneListCanvases = <ThrowOnError extends boolean = false>(options?: Options<SuperplaneListCanvasesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SuperplaneListCanvasesResponse2, SuperplaneListCanvasesError, ThrowOnError>({
        url: '/api/v1/canvases',
        ...options
    });
};

/**
 * Create a new canvas
 * Creates a new canvas with the given name and organization ID
 */
export const superplaneCreateCanvas = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateCanvasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateCanvasResponse2, SuperplaneCreateCanvasError, ThrowOnError>({
        url: '/api/v1/canvases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List event sources
 * Returns a list of all event sources for the specified canvas (can be referenced by ID or name)
 */
export const superplaneListEventSources = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListEventSourcesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListEventSourcesResponse2, SuperplaneListEventSourcesError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources',
        ...options
    });
};

/**
 * Create a new event source
 * Creates a new event source for the specified canvas (can be referenced by ID or name)
 */
export const superplaneCreateEventSource = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateEventSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateEventSourceResponse2, SuperplaneCreateEventSourceError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get event source details
 * Returns the details of a specific event source (canvas can be referenced by ID or name)
 */
export const superplaneDescribeEventSource = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeEventSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeEventSourceResponse2, SuperplaneDescribeEventSourceError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/event-sources/{id}',
        ...options
    });
};

/**
 * List secrets
 * Returns a list of all secrets for the specified canvas (can be referenced by ID or name)
 */
export const superplaneListSecrets = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListSecretsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListSecretsResponse2, SuperplaneListSecretsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/secrets',
        ...options
    });
};

/**
 * Create a new canvas secret
 * Creates a new canvas secret
 */
export const superplaneCreateSecret = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateSecretResponse2, SuperplaneCreateSecretError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/secrets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes a canvas secret
 * Deletes the specified canvas secret
 */
export const superplaneDeleteSecret = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDeleteSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SuperplaneDeleteSecretResponse2, SuperplaneDeleteSecretError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/secrets/{idOrName}',
        ...options
    });
};

/**
 * Get secret details
 * Returns the details of a specific secret (canvas can be referenced by ID or name)
 */
export const superplaneDescribeSecret = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeSecretResponse2, SuperplaneDescribeSecretError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/secrets/{idOrName}',
        ...options
    });
};

/**
 * Updates a secret
 * Updates the specified secret (can be referenced by ID or name)
 */
export const superplaneUpdateSecret = <ThrowOnError extends boolean = false>(options: Options<SuperplaneUpdateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SuperplaneUpdateSecretResponse2, SuperplaneUpdateSecretError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/secrets/{idOrName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List stages
 * Returns a list of all stages for the specified canvas (can be referenced by ID or name)
 */
export const superplaneListStages = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListStagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListStagesResponse2, SuperplaneListStagesError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages',
        ...options
    });
};

/**
 * Create a new stage
 * Creates a new stage for the specified canvas (can be referenced by ID or name)
 */
export const superplaneCreateStage = <ThrowOnError extends boolean = false>(options: Options<SuperplaneCreateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneCreateStageResponse2, SuperplaneCreateStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update a stage
 * Updates the specified stage (canvas can be referenced by ID or name)
 */
export const superplaneUpdateStage = <ThrowOnError extends boolean = false>(options: Options<SuperplaneUpdateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SuperplaneUpdateStageResponse2, SuperplaneUpdateStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{idOrName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get stage details
 * Returns the details of a specific stage (canvas can be referenced by ID or name)
 */
export const superplaneDescribeStage = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeStageResponse2, SuperplaneDescribeStageError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{id}',
        ...options
    });
};

/**
 * List stage events
 * Returns a list of events for the specified stage (canvas can be referenced by ID or name)
 */
export const superplaneListStageEvents = <ThrowOnError extends boolean = false>(options: Options<SuperplaneListStageEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneListStageEventsResponse2, SuperplaneListStageEventsError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{stageIdOrName}/events',
        ...options
    });
};

/**
 * Approve a stage event
 * Approves the specified stage event (canvas can be referenced by ID or name)
 */
export const superplaneApproveStageEvent = <ThrowOnError extends boolean = false>(options: Options<SuperplaneApproveStageEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuperplaneApproveStageEventResponse2, SuperplaneApproveStageEventError, ThrowOnError>({
        url: '/api/v1/canvases/{canvasIdOrName}/stages/{stageIdOrName}/events/{eventId}/approve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get canvas details
 * Returns the details of a specific canvas
 */
export const superplaneDescribeCanvas = <ThrowOnError extends boolean = false>(options: Options<SuperplaneDescribeCanvasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuperplaneDescribeCanvasResponse2, SuperplaneDescribeCanvasError, ThrowOnError>({
        url: '/api/v1/canvases/{id}',
        ...options
    });
};