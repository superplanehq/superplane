syntax = "proto3";

package Superplane;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/superplanehq/superplane/pkg/protos/superplane";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Superplane API";
    version: "1.0";
    description: "API for the Superplane service";
    contact: {
      name: "API Support";
      email: "support@superplane.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Superplane {
  rpc ListCanvases(ListCanvasesRequest) returns (ListCanvasesResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List canvases";
      description: "Returns a list of all canvases";
      tags: "Canvas";
    };
  }

  rpc CreateCanvas(CreateCanvasRequest) returns (CreateCanvasResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new canvas";
      description: "Creates a new canvas with the given name and organization ID";
      tags: "Canvas";
    };
  }
  
  rpc CreateEventSource(CreateEventSourceRequest) returns (CreateEventSourceResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/event-sources"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new event source";
      description: "Creates a new event source for the specified canvas (can be referenced by ID or name)";
      tags: "EventSource";
    };
  }
  
  rpc CreateStage(CreateStageRequest) returns (CreateStageResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/stages"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new stage";
      description: "Creates a new stage for the specified canvas (can be referenced by ID or name)";
      tags: "Stage";
    };
  }

  rpc DescribeCanvas(DescribeCanvasRequest) returns (DescribeCanvasResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get canvas details";
      description: "Returns the details of a specific canvas";
      tags: "Canvas";
    };
  }
  
  rpc DescribeStage(DescribeStageRequest) returns (DescribeStageResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/stages/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get stage details";
      description: "Returns the details of a specific stage (canvas can be referenced by ID or name)";
      tags: "Stage";
    };
  }
  
  rpc DescribeEventSource(DescribeEventSourceRequest) returns (DescribeEventSourceResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/event-sources/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get event source details";
      description: "Returns the details of a specific event source (canvas can be referenced by ID or name)";
      tags: "EventSource";
    };
  }

  rpc ListStages(ListStagesRequest) returns (ListStagesResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/stages"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List stages";
      description: "Returns a list of all stages for the specified canvas (can be referenced by ID or name)";
      tags: "Stage";
    };
  }
  
  rpc ListEventSources(ListEventSourcesRequest) returns (ListEventSourcesResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/event-sources"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List event sources";
      description: "Returns a list of all event sources for the specified canvas (can be referenced by ID or name)";
      tags: "EventSource";
    };
  }
  
  rpc ListStageEvents(ListStageEventsRequest) returns (ListStageEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/stages/{stage_id_or_name}/events"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List stage events";
      description: "Returns a list of events for the specified stage (canvas can be referenced by ID or name)";
      tags: "Event";
    };
  }

  rpc UpdateStage(UpdateStageRequest) returns (UpdateStageResponse) {
    option (google.api.http) = {
      patch: "/api/v1/canvases/{canvas_id_or_name}/stages/{id_or_name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a stage";
      description: "Updates the specified stage (canvas can be referenced by ID or name)";
      tags: "Stage";
    };
  }
  
  rpc ApproveStageEvent(ApproveStageEventRequest) returns (ApproveStageEventResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/stages/{stage_id_or_name}/events/{event_id}/approve"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Approve a stage event";
      description: "Approves the specified stage event (canvas can be referenced by ID or name)";
      tags: "Event";
    };
  }
}

message ListCanvasesRequest {}

message ListCanvasesResponse {
  repeated Canvas canvases = 1;
}

message Canvas {
  string id = 1;
  string name = 2;
  string created_by = 3;
  google.protobuf.Timestamp created_at = 4;
}

message CreateCanvasRequest {
  string name = 1;
  string requester_id = 2;
}

message CreateCanvasResponse {
  Canvas canvas = 1;
}

message DescribeCanvasRequest {
  string id = 1;
  string name = 2;
}

message DescribeCanvasResponse {
  Canvas canvas = 1;
}

message EventSource {
  string id = 1;
  string name = 2;
  string canvas_id = 3;
  google.protobuf.Timestamp created_at = 4;
}

message DescribeStageRequest {
  string id = 1;
  string name = 2;
  string canvas_id_or_name = 3;
}

message DescribeStageResponse {
  Stage stage = 1;
}

message CreateEventSourceRequest {
  string name = 1;
  string canvas_id_or_name = 2;
  string requester_id = 3;
}

message CreateEventSourceResponse {
  EventSource event_source = 1;
  string key = 2;
}

message DescribeEventSourceRequest {
  string id = 1;
  string name = 2;
  string canvas_id_or_name = 3;
}

message DescribeEventSourceResponse {
  EventSource event_source = 1;
}

message Connection {
  enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_EVENT_SOURCE = 1;
    TYPE_STAGE = 2;
  }

  enum FilterType {
    FILTER_TYPE_UNKNOWN = 0;
    FILTER_TYPE_DATA = 1;
    FILTER_TYPE_HEADER = 2;
  }

  message Filter {
    FilterType type = 1;
    DataFilter data = 2;
    HeaderFilter header = 3;
  }

  message DataFilter {
    string expression = 1;
  }

  message HeaderFilter {
    string expression = 1;
  }

  //
  // Filters can be combined in two ways:
  //   - FILTER_OPERATOR_AND: all filters must be true (default)
  //   - FILTER_OPERATOR_OR: at least one filter must be true
  //
  enum FilterOperator {
    FILTER_OPERATOR_AND = 0;
    FILTER_OPERATOR_OR = 1;
  }

  Type type = 1;
  string name = 2;
  repeated Filter filters = 3;
  FilterOperator filter_operator = 4;
}

message Stage {
  string id = 1;
  string name = 2;
  string canvas_id = 3;
  google.protobuf.Timestamp created_at = 4;
  repeated Connection connections = 5;
  repeated Condition conditions = 6;
  ExecutorSpec executor = 7;
  repeated InputDefinition inputs = 8;
  repeated InputMapping input_mappings = 9;
  repeated OutputDefinition outputs = 10;
}

message OutputDefinition {
  string name = 1;
  string description = 2;
  bool required = 3;
  string default = 4;
}

message InputDefinition {
  string name = 1;
  string description = 2;
  bool required = 3;
  string default = 4;
}

message InputMapping {
  message When {
    WhenTriggeredBy triggered_by = 1;
  }

  message WhenTriggeredBy {
    string connection = 1;
  }

  message ValueDefinition {
    string name = 1;
    ValueFrom value_from = 2;
    string value = 3;
  }

  message ValueFrom {
    ValueFromEventData event_data = 1;
    ValueFromLastExecution last_execution = 2;
  }

  message ValueFromEventData {
    string connection = 1;
    string expression = 2;
  }

  message ValueFromLastExecution {
    string input_name = 1;
    repeated Execution.Result results = 2;
  }

  repeated ValueDefinition values = 1;
  When when = 2;
}

message Condition {
  enum Type {
    CONDITION_TYPE_UNKNOWN = 0;
    CONDITION_TYPE_APPROVAL = 1;
    CONDITION_TYPE_TIME_WINDOW = 2;
  }

  Type type = 1;
  ConditionApproval approval = 2;
  ConditionTimeWindow time_window = 3;
}

message ConditionApproval {
  uint32 count = 1;
}

message ConditionTimeWindow {
  string start = 1;
  string end = 2;
  repeated string week_days = 3;
}

message CreateStageRequest {
  string name = 1;
  string canvas_id_or_name = 2;
  string requester_id = 3;
  repeated Connection connections = 4;
  repeated Condition conditions = 5;
  ExecutorSpec executor = 6;
  repeated InputDefinition inputs = 7;
  repeated InputMapping input_mappings = 8;
  repeated OutputDefinition outputs = 9;
}

message ExecutorSpec {
  enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_SEMAPHORE = 1;
  }

  message Semaphore {
    string project_id = 1;
    string branch = 2;
    string pipeline_file = 3;
    string task_id = 4;
    map<string, string> parameters = 5;
    string api_token = 6;
    string organization_url = 7;
  }

  Type type = 1;
  Semaphore semaphore = 2;
}

message CreateStageResponse {
  Stage stage = 1;
}

message UpdateStageRequest {
  string id_or_name = 1;
  string canvas_id_or_name = 2;
  string requester_id = 3;
  repeated Connection connections = 4;
  repeated Condition conditions = 5;
  ExecutorSpec executor = 6;
  repeated InputDefinition inputs = 7;
  repeated InputMapping input_mappings = 8;
  repeated OutputDefinition outputs = 9;
}

message UpdateStageResponse {
  Stage stage = 1;
}

message ListStagesRequest {
  string canvas_id_or_name = 1;
}

message ListStagesResponse {
  repeated Stage stages = 1;
}

message ListEventSourcesRequest {
  string canvas_id_or_name = 1;
}

message ListEventSourcesResponse {
  repeated EventSource event_sources = 1;
}

message ListStageEventsRequest {
  string stage_id_or_name = 1;
  string canvas_id_or_name = 2;
  repeated StageEvent.State states = 3;
  repeated StageEvent.StateReason state_reasons = 4;
}

message ListStageEventsResponse {
  repeated StageEvent events = 1;
}

message StageEvent {
  enum State {
    STATE_UNKNOWN = 0;
    STATE_PENDING = 1;
    STATE_WAITING = 2;
    STATE_PROCESSED = 4;
  }

  enum StateReason {
    STATE_REASON_UNKNOWN = 0;
    STATE_REASON_APPROVAL = 1;
    STATE_REASON_TIME_WINDOW = 2;
    STATE_REASON_EXECUTION = 3;
    STATE_REASON_CONNECTION = 4;
    STATE_REASON_CANCELLED = 5;
    STATE_REASON_UNHEALTHY = 6;
  }

  string id = 1;
  string source_id = 2;
  Connection.Type source_type = 3;
  State state = 4;
  StateReason state_reason = 5;
  google.protobuf.Timestamp created_at = 6;
  repeated StageEventApproval approvals = 7;
  Execution execution = 8;
  repeated InputValue inputs = 9;
}

message InputValue {
  string name = 1;
  string value = 2;
}

message OutputValue {
  string name = 1;
  string value = 2;
}

message Execution {
  enum State {
    STATE_UNKNOWN = 0;
    STATE_PENDING = 1;
    STATE_STARTED = 2;
    STATE_FINISHED = 4;
  }

  enum Result {
    RESULT_UNKNOWN = 0;
    RESULT_PASSED = 1;
    RESULT_FAILED = 2;
  }

  string id = 1;
  string reference_id = 2;
  State state = 3;
  Result result = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp started_at = 6;
  google.protobuf.Timestamp finished_at = 7;
  repeated OutputValue outputs = 8;
}

message StageEventApproval {
  string approved_by = 1;
  google.protobuf.Timestamp approved_at = 2;
}

message ApproveStageEventRequest {
  string stage_id_or_name = 1;
  string canvas_id_or_name = 2;
  string event_id = 3;
  string requester_id = 4;
}

message ApproveStageEventResponse {
  StageEvent event = 1;
}

message StageCreated {
  string canvas_id = 1;
  string stage_id = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message StageUpdated {
  string canvas_id = 1;
  string stage_id = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message EventSourceCreated {
  string canvas_id = 1;
  string source_id = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message StageEventCreated {
  string canvas_id = 1;
  string stage_id = 2;
  string event_id = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message StageEventApproved {
  string canvas_id = 1;
  string stage_id = 2;
  string event_id = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message StageExecutionCreated {
  string canvas_id = 1;
  string execution_id = 2;
  string stage_id = 3;
  string event_id = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message StageExecutionStarted {
  string canvas_id = 1;
  string execution_id = 2;
  string stage_id = 3;
  string event_id = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message StageExecutionFinished {
  string canvas_id = 1;
  string execution_id = 2;
  string stage_id = 3;
  string event_id = 4;
  google.protobuf.Timestamp timestamp = 5;
}