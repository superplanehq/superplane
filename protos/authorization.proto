syntax = "proto3";

package Superplane.Authorization;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/superplanehq/superplane/pkg/protos/authorization";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Superplane Authorization API";
    version: "1.0";
    description: "API for the Superplane Authorization service";
    contact: {
      name: "API Support";
      email: "support@superplane.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Authorization {
  //
  // Endpoint for listing all user permissions within a domain
  // Operation is synchronous and idempotent.
  //
  rpc ListUserPermissions(ListUserPermissionsRequest) returns (ListUserPermissionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/authorization/users/{user_id}/permissions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List user permissions";
      description: "Returns all permissions a user has within a specific domain";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for assigning a role to a user in an organization or canvas
  // Operation is synchronous and idempotent.
  //
  rpc AssignRole(AssignRoleRequest) returns (AssignRoleResponse) {
    option (google.api.http) = {
      patch: "/api/v1/authorization/roles/assign"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Assign role";
      description: "Assigns a role to a user within an organization or canvas";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for removing a role from a user in an organization or canvas
  // Operation is synchronous and idempotent.
  //
  rpc RemoveRole(RemoveRoleRequest) returns (RemoveRoleResponse) {
    option (google.api.http) = {
      patch: "/api/v1/authorization/roles/remove"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove role";
      description: "Removes a role from a user within an organization or canvas";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for listing available roles within a domain
  // Operation is synchronous and idempotent.
  //
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {
      get: "/api/v1/authorization/roles"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List roles";
      description: "Returns available roles for a specific domain type with their permissions and inheritance";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for describing a specific role
  // Operation is synchronous and idempotent.
  //
  rpc DescribeRole(DescribeRoleRequest) returns (DescribeRoleResponse) {
    option (google.api.http) = {
      get: "/api/v1/authorization/roles/describe"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Describe role";
      description: "Returns detailed information about a specific role including permissions and inheritance";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for getting user roles within a domain
  // Operation is synchronous and idempotent.
  //
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse) {
    option (google.api.http) = {
      get: "/api/v1/authorization/users/{user_id}/roles"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get user roles";
      description: "Returns the roles a user has within a specific domain";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for creating a group within an organization
  // Operation is synchronous and idempotent.
  //
  rpc CreateOrganizationGroup(CreateOrganizationGroupRequest) returns (CreateOrganizationGroupResponse) {
    option (google.api.http) = {
      post: "/api/v1/groups"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create group";
      description: "Creates a new group within an organization with a specific role";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for creating a group within a canvas
  // Operation is synchronous and idempotent.
  //
  rpc CreateCanvasGroup(CreateCanvasGroupRequest) returns (CreateCanvasGroupResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id}/groups"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create canvas group";
      description: "Creates a new group within a canvas with a specific role";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for adding a user to an organization group
  // Operation is synchronous and idempotent.
  //
  rpc AddUserToOrganizationGroup(AddUserToOrganizationGroupRequest) returns (AddUserToOrganizationGroupResponse) {
    option (google.api.http) = {
      post: "/api/v1/groups/{group_name}/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add user to organization group";
      description: "Adds a user to a group within an organization";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for adding a user to a canvas group
  // Operation is synchronous and idempotent.
  //
  rpc AddUserToCanvasGroup(AddUserToCanvasGroupRequest) returns (AddUserToCanvasGroupResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id}/groups/{group_name}/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add user to canvas group";
      description: "Adds a user to a group within a canvas";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for removing a user from an organization group
  // Operation is synchronous and idempotent.
  //
  rpc RemoveUserFromOrganizationGroup(RemoveUserFromOrganizationGroupRequest) returns (RemoveUserFromOrganizationGroupResponse) {
    option (google.api.http) = {
      delete: "/api/v1/groups/{group_name}/users/{user_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove user from organization group";
      description: "Removes a user from a group within an organization";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for removing a user from a canvas group
  // Operation is synchronous and idempotent.
  //
  rpc RemoveUserFromCanvasGroup(RemoveUserFromCanvasGroupRequest) returns (RemoveUserFromCanvasGroupResponse) {
    option (google.api.http) = {
      delete: "/api/v1/canvases/{canvas_id}/groups/{group_name}/users/{user_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove user from canvas group";
      description: "Removes a user from a group within a canvas";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for listing groups within an organization
  // Operation is synchronous and idempotent.
  //
  rpc ListOrganizationGroups(ListOrganizationGroupsRequest) returns (ListOrganizationGroupsResponse) {
    option (google.api.http) = {
      get: "/api/v1/groups"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List organization groups";
      description: "Returns a list of groups within an organization";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for listing groups within a canvas
  // Operation is synchronous and idempotent.
  //
  rpc ListCanvasGroups(ListCanvasGroupsRequest) returns (ListCanvasGroupsResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id}/groups"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List canvas groups";
      description: "Returns a list of groups within a canvas";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for getting users in a specific organization group
  // Operation is synchronous and idempotent.
  //
  rpc GetOrganizationGroupUsers(GetOrganizationGroupUsersRequest) returns (GetOrganizationGroupUsersResponse) {
    option (google.api.http) = {
      get: "/api/v1/groups/{group_name}/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get organization group users";
      description: "Returns users that belong to a specific group within an organization";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for getting users in a specific canvas group
  // Operation is synchronous and idempotent.
  //
  rpc GetCanvasGroupUsers(GetCanvasGroupUsersRequest) returns (GetCanvasGroupUsersResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id}/groups/{group_name}/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get canvas group users";
      description: "Returns users that belong to a specific group within a canvas";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for getting details of a specific organization group
  // Operation is synchronous and idempotent.
  //
  rpc GetOrganizationGroup(GetOrganizationGroupRequest) returns (GetOrganizationGroupResponse) {
    option (google.api.http) = {
      get: "/api/v1/groups/{group_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get organization group";
      description: "Returns details of a specific group within an organization";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for getting details of a specific canvas group
  // Operation is synchronous and idempotent.
  //
  rpc GetCanvasGroup(GetCanvasGroupRequest) returns (GetCanvasGroupResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id}/groups/{group_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get canvas group";
      description: "Returns details of a specific group within a canvas";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for creating a custom role
  // Operation is synchronous and idempotent.
  //
  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
    option (google.api.http) = {
      post: "/api/v1/authorization/roles"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create role";
      description: "Creates a new custom role with specified permissions";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for updating a custom role
  // Operation is synchronous and idempotent.
  //
  rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {
    option (google.api.http) = {
      put: "/api/v1/authorization/roles/{role_name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update role";
      description: "Updates an existing custom role with new permissions";
      tags: "Authorization";
    };
  }

  //
  // Endpoint for deleting a custom role
  // Operation is synchronous and idempotent.
  //
  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {
    option (google.api.http) = {
      delete: "/api/v1/authorization/roles/{role_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete role";
      description: "Deletes an existing custom role";
      tags: "Authorization";
    };
  }
}

// User permissions listing messages
message ListUserPermissionsRequest {
  string user_id = 1;
  DomainType domain_type = 2;
  string domain_id = 3;
}

message ListUserPermissionsResponse {
  string user_id = 1;
  DomainType domain_type = 2;
  string domain_id = 3;
  repeated Permission permissions = 4;
}

// Role assignment messages
message AssignRoleRequest {
  string user_id = 1;
  RoleAssignment role_assignment = 2;
}

message AssignRoleResponse {}

message RemoveRoleRequest {
  string user_id = 1;
  RoleAssignment role_assignment = 2;
}

message RemoveRoleResponse {}

message RoleAssignment {
  DomainType domain_type = 1;
  string domain_id = 2;
  string role = 3;
}

// Role discovery messages
message ListRolesRequest {
  DomainType domain_type = 1;
  string domain_id = 2;
}

message ListRolesResponse {
  repeated Role roles = 1;
}

message DescribeRoleRequest {
  DomainType domain_type = 1;
  string domain_id = 2;
  string role = 3;
}

message DescribeRoleResponse {
  Role role = 1;
}

// User roles messages
message GetUserRolesRequest {
  string user_id = 1;
  DomainType domain_type = 2;
  string domain_id = 3;
}

message GetUserRolesResponse {
  string user_id = 1;
  DomainType domain_type = 2;
  string domain_id = 3;
  repeated Role roles = 4;
}

// Group management messages
message CreateOrganizationGroupRequest {
  string organization_id = 1;
  string group_name = 2;
  string role = 3;
}

message CreateOrganizationGroupResponse {
  Group group = 1;
}

message AddUserToOrganizationGroupRequest {
  string organization_id = 1;
  string group_name = 2;
  string user_id = 3;
}

message AddUserToOrganizationGroupResponse {}

message RemoveUserFromOrganizationGroupRequest {
  string organization_id = 1;
  string group_name = 2;
  string user_id = 3;
}

message RemoveUserFromOrganizationGroupResponse {}

message ListOrganizationGroupsRequest {
  string organization_id = 1;
}

message ListOrganizationGroupsResponse {
  repeated Group groups = 1;
}

message GetOrganizationGroupUsersRequest {
  string organization_id = 1;
  string group_name = 2;
}

message GetOrganizationGroupUsersResponse {
  repeated string user_ids = 1;
  Group group = 2;
}

// Group detail messages
message GetOrganizationGroupRequest {
  string organization_id = 1;
  string group_name = 2;
}

message GetOrganizationGroupResponse {
  Group group = 1;
}

// Canvas group management messages
message CreateCanvasGroupRequest {
  string canvas_id = 1;
  string group_name = 2;
  string role = 3;
}

message CreateCanvasGroupResponse {
  Group group = 1;
}

message AddUserToCanvasGroupRequest {
  string canvas_id = 1;
  string group_name = 2;
  string user_id = 3;
}

message AddUserToCanvasGroupResponse {}

message RemoveUserFromCanvasGroupRequest {
  string canvas_id = 1;
  string group_name = 2;
  string user_id = 3;
}

message RemoveUserFromCanvasGroupResponse {}

message ListCanvasGroupsRequest {
  string canvas_id = 1;
}

message ListCanvasGroupsResponse {
  repeated Group groups = 1;
}

message GetCanvasGroupUsersRequest {
  string canvas_id = 1;
  string group_name = 2;
}

message GetCanvasGroupUsersResponse {
  repeated string user_ids = 1;
  Group group = 2;
}

message GetCanvasGroupRequest {
  string canvas_id = 1;
  string group_name = 2;
}

message GetCanvasGroupResponse {
  Group group = 1;
}

// Custom role management messages
message CreateRoleRequest {
  string name = 1;
  DomainType domain_type = 2;
  string domain_id = 3;
  repeated Permission permissions = 4;
  string inherited_role = 5;
}

message CreateRoleResponse {}

message UpdateRoleRequest {
  string role_name = 1;
  DomainType domain_type = 2;
  string domain_id = 3;
  repeated Permission permissions = 4;
  string inherited_role = 5;
}

message UpdateRoleResponse {}

message DeleteRoleRequest {
  string role_name = 1;
  DomainType domain_type = 2;
  string domain_id = 3;
}

message DeleteRoleResponse {}

// Core data structures
message Group {
  string name = 1;
  DomainType domain_type = 2;
  string domain_id = 3;
  string role = 4;
}

message Role {
  string name = 1;
  DomainType domain_type = 2;
  repeated Permission permissions = 3;
  Role inherited_role = 4;
}

message Permission {
  string resource = 1;
  string action = 2;
  DomainType domain_type = 3;
}

// Enums
enum DomainType {
  DOMAIN_TYPE_UNSPECIFIED = 0;
  DOMAIN_TYPE_ORGANIZATION = 1;
  DOMAIN_TYPE_CANVAS = 2;
}
