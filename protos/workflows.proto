syntax = "proto3";

package Superplane.Workflows;

import "components.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/superplanehq/superplane/pkg/protos/workflows";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Superplane Workflows API";
    version: "1.0";
    description: "API for Superplane workflows";
    contact: {
      name: "API Support";
      email: "support@superplane.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Workflows {
  rpc ListWorkflows(ListWorkflowsRequest) returns (ListWorkflowsResponse) {
    option (google.api.http) = {
      get: "/api/v1/workflows"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List workflows";
      description: "Returns a list of all workflows";
      tags: "Workflow";
    };
  }

  rpc CreateWorkflow(CreateWorkflowRequest) returns (CreateWorkflowResponse) {
    option (google.api.http) = {
      post: "/api/v1/workflows"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create workflow";
      description: "Creates a new workflow";
      tags: "Workflow";
    };
  }

  rpc DescribeWorkflow(DescribeWorkflowRequest) returns (DescribeWorkflowResponse) {
    option (google.api.http) = {
      get: "/api/v1/workflows/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Describe workflow";
      description: "Returns a workflow by ID";
      tags: "Workflow";
    };
  }

  rpc UpdateWorkflow(UpdateWorkflowRequest) returns (UpdateWorkflowResponse) {
    option (google.api.http) = {
      put: "/api/v1/workflows/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update workflow";
      description: "Updates an existing workflow";
      tags: "Workflow";
    };
  }

  rpc DeleteWorkflow(DeleteWorkflowRequest) returns (DeleteWorkflowResponse) {
    option (google.api.http) = {
      delete: "/api/v1/workflows/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete workflow";
      description: "Deletes an existing workflow";
      tags: "Workflow";
    };
  }

  rpc ListNodeExecutions(ListNodeExecutionsRequest) returns (ListNodeExecutionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/workflows/{workflow_id}/nodes/{node_id}/executions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List node executions";
      description: "Returns a list of executions for a specific workflow node";
      tags: "WorkflowNode";
    };
  }

  rpc InvokeNodeExecutionAction(InvokeNodeExecutionActionRequest) returns (InvokeNodeExecutionActionResponse) {
    option (google.api.http) = {
      post: "/api/v1/workflows/executions/{execution_id}/actions/{action_name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Invoke execution action";
      description: "Invokes a custom action on a workflow node execution";
      tags: "WorkflowNodeExecution";
    };
  }

  rpc ListWorkflowEvents(ListWorkflowEventsRequest) returns (ListWorkflowEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/workflows/{workflow_id}/events"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List workflow events";
      description: "Returns a list of initial events that triggered executions in a workflow";
      tags: "WorkflowEvent";
    };
  }

  rpc ListEventExecutions(ListEventExecutionsRequest) returns (ListEventExecutionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/workflows/{workflow_id}/events/{event_id}/executions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List event executions";
      description: "Returns a list of all node executions triggered by a specific initial event";
      tags: "WorkflowEvent";
    };
  }
}

message ListWorkflowsRequest {}

message ListWorkflowsResponse {
  repeated Workflow workflows = 1;
}

message DescribeWorkflowRequest {
  string id = 1;
}

message DescribeWorkflowResponse {
  Workflow workflow = 1;
}

message CreateWorkflowRequest {
  Workflow workflow = 1;
}

message CreateWorkflowResponse {
  Workflow workflow = 1;
}

message UpdateWorkflowRequest {
  string id = 1;
  Workflow workflow = 2;
}

message UpdateWorkflowResponse {
  Workflow workflow = 1;
}

message DeleteWorkflowRequest {
  string id = 1;
}

message DeleteWorkflowResponse {}

message Workflow {
  string id = 1;
  string organization_id = 2;
  string name = 3;
  string description = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  repeated Components.Node nodes = 7;
  repeated Components.Edge edges = 8;
}

message ListNodeExecutionsRequest {
  string workflow_id = 1;
  string node_id = 2;
  repeated WorkflowNodeExecution.State states = 3;
  repeated WorkflowNodeExecution.Result results = 4;
  uint32 limit = 5;
  google.protobuf.Timestamp before = 6;
}

message ListNodeExecutionsResponse {
  repeated WorkflowNodeExecution executions = 1;
  uint32 total_count = 2;
  bool has_next_page = 3;
  google.protobuf.Timestamp last_timestamp = 4;
}

message WorkflowNodeExecution {
  enum State {
    STATE_UNKNOWN = 0;
    STATE_PENDING = 1;
    STATE_WAITING = 2;
    STATE_STARTED = 3;
    STATE_ROUTING = 4;
    STATE_FINISHED = 5;
  }

  enum Result {
    RESULT_UNKNOWN = 0;
    RESULT_PASSED = 1;
    RESULT_FAILED = 2;
    RESULT_CANCELLED = 3;
  }

  enum ResultReason {
    RESULT_REASON_OK = 0;
    RESULT_REASON_ERROR = 1;
  }

  string id = 1;
  string workflow_id = 2;
  string node_id = 3;
  string parent_execution_id = 4;
  string blueprint_id = 5;
  State state = 6;
  Result result = 7;
  ResultReason result_reason = 8;
  string result_message = 9;
  google.protobuf.Struct input = 10;
  google.protobuf.Struct outputs = 11;
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
  google.protobuf.Struct metadata = 14;
  google.protobuf.Struct configuration = 15;
  string previous_execution_id = 16;
  string previous_output_branch = 17;
  int32 previous_output_index = 18;
}

message InvokeNodeExecutionActionRequest {
  string execution_id = 1;
  string action_name = 2;
  google.protobuf.Struct parameters = 3;
}

message InvokeNodeExecutionActionResponse {}

message ListWorkflowEventsRequest {
  string workflow_id = 1;
  uint32 limit = 2;
  google.protobuf.Timestamp before = 3;
}

message ListWorkflowEventsResponse {
  repeated WorkflowInitialEvent events = 1;
  uint32 total_count = 2;
  bool has_next_page = 3;
  google.protobuf.Timestamp last_timestamp = 4;
}

message WorkflowInitialEvent {
  string id = 1;
  string workflow_id = 2;
  google.protobuf.Struct data = 3;
  google.protobuf.Timestamp created_at = 4;
}

message ListEventExecutionsRequest {
  string workflow_id = 1;
  string event_id = 2;
}

message ListEventExecutionsResponse {
  repeated WorkflowNodeExecution executions = 1;
}