syntax = "proto3";

package Superplane;

import "authorization.proto";
import "integrations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/superplanehq/superplane/pkg/protos/canvases";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Superplane API";
    version: "1.0";
    description: "API for the Superplane service";
    contact: {
      name: "API Support";
      email: "support@superplane.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Superplane {
  rpc ListCanvases(ListCanvasesRequest) returns (ListCanvasesResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List canvases";
      description: "Returns a list of all canvases";
      tags: "Canvas";
    };
  }

  rpc CreateCanvas(CreateCanvasRequest) returns (CreateCanvasResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new canvas";
      description: "Creates a new canvas with the given name and organization ID";
      tags: "Canvas";
    };
  }

  rpc DeleteCanvas(DeleteCanvasRequest) returns (DeleteCanvasResponse) {
    option (google.api.http) = {
      delete: "/api/v1/canvases/{id_or_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a canvas";
      description: "Deletes the specified canvas (can be referenced by ID or name)";
      tags: "Canvas";
    };
  }

  rpc CreateConnectionGroup(CreateConnectionGroupRequest) returns (CreateConnectionGroupResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/connection-groups"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new canvas connection group";
      description: "Creates a new canvas connection group";
      tags: "ConnectionGroup";
    };
  }

  rpc CreateEventSource(CreateEventSourceRequest) returns (CreateEventSourceResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/event-sources"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new event source";
      description: "Creates a new event source for the specified canvas (can be referenced by ID or name)";
      tags: "EventSource";
    };
  }
  
  rpc ResetEventSourceKey(ResetEventSourceKeyRequest) returns (ResetEventSourceKeyResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/event-sources/{id_or_name}/reset-key"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Reset the key for an event source";
      description: "Resets the key used to receive events from the specified event source (canvas can be referenced by ID or name)";
      tags: "EventSource";
    };
  }

  rpc CreateStage(CreateStageRequest) returns (CreateStageResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/stages"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new stage";
      description: "Creates a new stage for the specified canvas (can be referenced by ID or name)";
      tags: "Stage";
    };
  }

  rpc DescribeCanvas(DescribeCanvasRequest) returns (DescribeCanvasResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get canvas details";
      description: "Returns the details of a specific canvas";
      tags: "Canvas";
    };
  }
  
  rpc DescribeStage(DescribeStageRequest) returns (DescribeStageResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/stages/{id_or_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get stage details";
      description: "Returns the details of a specific stage";
      tags: "Stage";
    };
  }
  
  rpc DescribeEventSource(DescribeEventSourceRequest) returns (DescribeEventSourceResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/event-sources/{id_or_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get event source details";
      description: "Returns the details of a specific event source (canvas can be referenced by ID or name)";
      tags: "EventSource";
    };
  }

  rpc DescribeConnectionGroup(DescribeConnectionGroupRequest) returns (DescribeConnectionGroupResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/connection-groups/{id_or_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get connection group details";
      description: "Returns the details of a specific connection group (canvas can be referenced by ID or name)";
      tags: "ConnectionGroup";
    };
  }

  rpc ListStages(ListStagesRequest) returns (ListStagesResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/stages"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List stages";
      description: "Returns a list of all stages for the specified canvas (can be referenced by ID or name)";
      tags: "Stage";
    };
  }
  
  rpc ListEventSources(ListEventSourcesRequest) returns (ListEventSourcesResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/event-sources"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List event sources";
      description: "Returns a list of all event sources for the specified canvas (can be referenced by ID or name)";
      tags: "EventSource";
    };
  }
  
  rpc ListConnectionGroups(ListConnectionGroupsRequest) returns (ListConnectionGroupsResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/connection-groups"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List connection groups";
      description: "Returns a list of all connection groups for the specified canvas (can be referenced by ID or name)";
      tags: "ConnectionGroup";
    };
  }

  rpc ListStageExecutions(ListStageExecutionsRequest) returns (ListStageExecutionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/stages/{stage_id_or_name}/executions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List executions";
      description: "Returns a list of all executions for the specified stage (canvas can be referenced by ID or name)";
      tags: "Execution";
    };
  }

  rpc ListStageEvents(ListStageEventsRequest) returns (ListStageEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/stages/{stage_id_or_name}/events"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List stage events";
      description: "Returns a list of events for the specified stage (canvas can be referenced by ID or name)";
      tags: "Stage";
    };
  }

  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/events"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List events";
      description: "Returns a list of events with optional filtering by source type and source ID";
      tags: "Event";
    };
  }

  rpc CreateEvent(CreateEventRequest) returns (CreateEventResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/events"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create an event";
      description: "Creates a new event for the specified canvas (canvas can be referenced by ID or name)";
      tags: "Event";
    };
  }

  rpc ListConnectionGroupFieldSets(ListConnectionGroupFieldSetsRequest) returns (ListConnectionGroupFieldSetsResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/connection-groups/{id_or_name}/field-sets"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List connection group field sets";
      description: "Returns a list of field sets for the specified connection group (canvas can be referenced by ID or name)";
      tags: "ConnectionGroup";
    };
  }

  rpc UpdateStage(UpdateStageRequest) returns (UpdateStageResponse) {
    option (google.api.http) = {
      patch: "/api/v1/canvases/{canvas_id_or_name}/stages/{id_or_name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a stage";
      description: "Updates the specified stage (canvas can be referenced by ID or name)";
      tags: "Stage";
    };
  }

  rpc DeleteStage(DeleteStageRequest) returns (DeleteStageResponse) {
    option (google.api.http) = {
      delete: "/api/v1/canvases/{canvas_id_or_name}/stages/{id_or_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a stage";
      description: "Deletes the specified stage (canvas can be referenced by ID or name)";
      tags: "Stage";
    };
  }
  
  rpc UpdateEventSource(UpdateEventSourceRequest) returns (UpdateEventSourceResponse) {
    option (google.api.http) = {
      patch: "/api/v1/canvases/{canvas_id_or_name}/event-sources/{id_or_name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an event source";
      description: "Updates the specified event source (canvas can be referenced by ID or name)";
      tags: "EventSource";
    };
  }

  rpc DeleteEventSource(DeleteEventSourceRequest) returns (DeleteEventSourceResponse) {
    option (google.api.http) = {
      delete: "/api/v1/canvases/{canvas_id_or_name}/event-sources/{id_or_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete an event source";
      description: "Deletes the specified event source (canvas can be referenced by ID or name)";
      tags: "EventSource";
    };
  }

  rpc UpdateConnectionGroup(UpdateConnectionGroupRequest) returns (UpdateConnectionGroupResponse) {
    option (google.api.http) = {
      patch: "/api/v1/canvases/{canvas_id_or_name}/connection-groups/{id_or_name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a connection group";
      description: "Updates the specified connection group (canvas can be referenced by ID or name)";
      tags: "ConnectionGroup";
    };
  }

  rpc DeleteConnectionGroup(DeleteConnectionGroupRequest) returns (DeleteConnectionGroupResponse) {
    option (google.api.http) = {
      delete: "/api/v1/canvases/{canvas_id_or_name}/connection-groups/{id_or_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a connection group";
      description: "Deletes the specified connection group (canvas can be referenced by ID or name)";
      tags: "ConnectionGroup";
    };
  }

  rpc ApproveStageEvent(ApproveStageEventRequest) returns (ApproveStageEventResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/stages/{stage_id_or_name}/events/{event_id}/approve"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Approve a stage event";
      description: "Approves the specified stage event (canvas can be referenced by ID or name)";
      tags: "Stage";
    };
  }

  rpc DiscardStageEvent(DiscardStageEventRequest) returns (DiscardStageEventResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/stages/{stage_id_or_name}/events/{event_id}/discard"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Discards a stage event";
      description: "Discards the specified stage event (canvas can be referenced by ID or name)";
      tags: "Stage";
    };
  }

  rpc CancelStageExecution(CancelStageExecutionRequest) returns (CancelStageExecutionResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/stages/{stage_id_or_name}/executions/{execution_id}/cancel"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Cancel a stage execution";
      description: "Cancel the specified stage execution (canvas can be referenced by ID or name)";
      tags: "Stage";
    };
  }

  rpc ListEventRejections(ListEventRejectionsRequest) returns (ListEventRejectionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/rejections"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List event rejections";
      description: "Returns a list of events that were rejected by a particular component";
      tags: "Canvas";
    };
  }

  rpc AddUser(AddUserRequest) returns (AddUserResponse) {
    option (google.api.http) = {
      post: "/api/v1/canvases/{canvas_id_or_name}/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a user to a canvas";
      description: "Add a user to a canvas";
      tags: "Canvas";
    };
  }

  rpc RemoveUser(RemoveUserRequest) returns (RemoveUserResponse) {
    option (google.api.http) = {
      delete: "/api/v1/canvases/{canvas_id_or_name}/users/{user_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove a user from a canvas";
      description: "Remove a user from a canvas";
      tags: "Canvas";
    };
  }

  rpc ListAlerts(ListAlertsRequest) returns (ListAlertsResponse) {
    option (google.api.http) = {
      get: "/api/v1/canvases/{canvas_id_or_name}/alerts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List alerts";
      description: "Returns a list of alerts for the specified canvas (canvas can be referenced by ID or name)";
      tags: "Alert";
    };
  }

  rpc AcknowledgeAlert(AcknowledgeAlertRequest) returns (AcknowledgeAlertResponse) {
    option (google.api.http) = {
      patch: "/api/v1/canvases/{canvas_id_or_name}/alerts/{alert_id}/acknowledge"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Acknowledge an alert";
      description: "Acknowledge the specified alert (canvas can be referenced by ID or name)";
      tags: "Alert";
    };
  }
}

message ListCanvasesRequest {}

message ListCanvasesResponse {
  repeated Canvas canvases = 1;
}

message Canvas {
  message Metadata {
    string id = 1;
    string name = 2;
    string description = 3;
    string created_by = 4;
    google.protobuf.Timestamp created_at = 5;
  }

  Metadata metadata = 1;
  // No spec needed for Canvas as per the YAML example
}

message CreateCanvasRequest {
  Canvas canvas = 1;
}

message CreateCanvasResponse {
  Canvas canvas = 1;
}

message DeleteCanvasRequest {
  string id_or_name = 1;
}

message DeleteCanvasResponse {}

message DescribeCanvasRequest {
  string id = 1;
  string name = 2;
}

message DescribeCanvasResponse {
  Canvas canvas = 1;
}

message EventSource {
  message Metadata {
    string id = 1;
    string name = 2;
    string description = 3;
    string canvas_id = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
  }

  message Spec {
    string type = 1;
    Integrations.IntegrationRef integration = 2;
    Integrations.ResourceRef resource = 3;
    repeated EventType events = 4;
    Schedule schedule = 5;
  }

  message Schedule {
    enum Type {
      TYPE_UNKNOWN = 0;
      TYPE_HOURLY = 1;
      TYPE_DAILY = 2;
      TYPE_WEEKLY = 3;
    }

    enum WeekDay {
      WEEK_DAY_UNKNOWN = 0;
      WEEK_DAY_MONDAY = 1;
      WEEK_DAY_TUESDAY = 2;
      WEEK_DAY_WEDNESDAY = 3;
      WEEK_DAY_THURSDAY = 4;
      WEEK_DAY_FRIDAY = 5;
      WEEK_DAY_SATURDAY = 6;
      WEEK_DAY_SUNDAY = 7;
    }

    Type type = 1;
    HourlySchedule hourly = 2;
    DailySchedule daily = 3;
    WeeklySchedule weekly = 4;
  }

  message HourlySchedule {
    int32 minute = 1; // 0-59, minute of the hour to trigger
  }

  message DailySchedule {
    string time = 1; // Format: "HH:MM" in UTC (24-hour format)
  }

  message WeeklySchedule {
    Schedule.WeekDay week_day = 1;
    string time = 2; // Format: "HH:MM" in UTC (24-hour format)
  }


  message EventType {
    string type = 1;
    repeated Filter filters = 2;
    FilterOperator filter_operator = 3;
  }

  message Status {
    message Schedule {
      google.protobuf.Timestamp last_trigger = 1;
      google.protobuf.Timestamp next_trigger = 2;
    }

    Event last_event = 1;
    Schedule schedule = 2;
  }

  Metadata metadata = 1;
  Spec spec = 2;
  Status status = 3;
}

message DescribeStageRequest {
  string canvas_id_or_name = 1;
  string id_or_name = 2;
}

message DescribeStageResponse {
  Stage stage = 1;
}

message CreateEventSourceRequest {
  EventSource event_source = 1;
  string canvas_id_or_name = 2;
}

message CreateEventSourceResponse {
  EventSource event_source = 1;
  string key = 2;
}

message ResetEventSourceKeyRequest {
  string canvas_id_or_name = 1;
  string id_or_name = 2;
}

message ResetEventSourceKeyResponse {
  EventSource event_source = 1;
  string key = 2;
}

message DescribeEventSourceRequest {
  string canvas_id_or_name = 1;
  string id_or_name = 2;
}

message DescribeEventSourceResponse {
  EventSource event_source = 1;
}

message CreateConnectionGroupRequest {
  ConnectionGroup connection_group = 1;
  string canvas_id_or_name = 2;
}

message CreateConnectionGroupResponse {
  ConnectionGroup connection_group = 1;
}

message UpdateConnectionGroupRequest {
  ConnectionGroup connection_group = 1;
  string canvas_id_or_name = 2;
  string id_or_name = 3;
}

message UpdateConnectionGroupResponse {
  ConnectionGroup connection_group = 1;
}

message DescribeConnectionGroupRequest {
  string id_or_name = 1;
  string canvas_id_or_name = 2;
}

message DescribeConnectionGroupResponse {
  ConnectionGroup connection_group = 1;
}

message ListConnectionGroupsRequest {
  string canvas_id_or_name = 1;
}

message ListConnectionGroupsResponse {
  repeated ConnectionGroup connection_groups = 1;
}

message ConnectionGroup {
  message Metadata {
    string id = 1;
    string name = 2;
    string description = 3;
    string canvas_id = 4;
    google.protobuf.Timestamp created_at = 5;
    string created_by = 6;
    google.protobuf.Timestamp updated_at = 7;
    string updated_by = 8;
  }

  message Spec {
    message GroupBy {
      message Field {
        string name = 1;
        string expression = 2;
      }

      repeated Field fields = 1;
    }

    enum TimeoutBehavior {
      TIMEOUT_BEHAVIOR_NONE = 0;
      TIMEOUT_BEHAVIOR_DROP = 1;
      TIMEOUT_BEHAVIOR_EMIT = 2;
    }

    repeated Connection connections = 1;
    GroupBy group_by = 2;
    uint32 timeout = 3;
    TimeoutBehavior timeout_behavior = 4;
  }

  Metadata metadata = 1;
  Spec spec = 2;
}

enum FilterType {
  FILTER_TYPE_UNKNOWN = 0;
  FILTER_TYPE_DATA = 1;
  FILTER_TYPE_HEADER = 2;
}

message Filter {
  FilterType type = 1;
  DataFilter data = 2;
  HeaderFilter header = 3;
}

message DataFilter {
  string expression = 1;
}

message HeaderFilter {
  string expression = 1;
}

//
// Filters can be combined in two ways:
//   - FILTER_OPERATOR_AND: all filters must be true (default)
//   - FILTER_OPERATOR_OR: at least one filter must be true
//
enum FilterOperator {
  FILTER_OPERATOR_AND = 0;
  FILTER_OPERATOR_OR = 1;
}

message Connection {
  enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_EVENT_SOURCE = 1;
    TYPE_STAGE = 2;
    TYPE_CONNECTION_GROUP = 3;
  }

  Type type = 1;
  string name = 2;
  repeated Filter filters = 3;
  FilterOperator filter_operator = 4;
}

message Stage {
  message Metadata {
    string id = 1;
    string name = 2;
    string description = 3;
    string canvas_id = 4;
    google.protobuf.Timestamp created_at = 5;
  }

  message Spec {
    repeated Connection connections = 1;
    repeated Condition conditions = 2;
    Executor executor = 3;
    repeated InputDefinition inputs = 4;
    repeated InputMapping input_mappings = 5;
    repeated OutputDefinition outputs = 6;
    repeated ValueDefinition secrets = 7;
    bool dry_run = 8;
  }

  message Status {
    message Queue {
      uint32 total = 1;
      repeated StageEvent items = 2;
    }

    Execution last_execution = 1;
    Queue queue = 2;
  }

  Metadata metadata = 1;
  Spec spec = 2;
  Status status = 3;
}

message OutputDefinition {
  string name = 1;
  string description = 2;
  bool required = 3;
}

message InputDefinition {
  string name = 1;
  string description = 2;
}

message InputMapping {
  message When {
    WhenTriggeredBy triggered_by = 1;
  }

  message WhenTriggeredBy {
    string connection = 1;
  }

  repeated ValueDefinition values = 1;
  When when = 2;
}

message ValueDefinition {
  string name = 1;
  ValueFrom value_from = 2;
  string value = 3;
}

message ValueFrom {
  ValueFromEventData event_data = 1;
  ValueFromLastExecution last_execution = 2;
  ValueFromSecret secret = 3;
}

message ValueFromEventData {
  string connection = 1;
  string expression = 2;
}

message ValueFromLastExecution {
  repeated Execution.Result results = 1;
}

message ValueFromSecret {
  Authorization.DomainType domain_type = 1;
  string name = 2;
  string key = 3;
}

message Condition {
  enum Type {
    CONDITION_TYPE_UNKNOWN = 0;
    CONDITION_TYPE_APPROVAL = 1;
    CONDITION_TYPE_TIME_WINDOW = 2;
  }

  Type type = 1;
  ConditionApproval approval = 2;
  ConditionTimeWindow time_window = 3;
}

message ConditionApproval {
  uint32 count = 1;
}

message ConditionTimeWindow {
  string start = 1;
  string end = 2;
  repeated string week_days = 3;
}

message CreateStageRequest {
  Stage stage = 1;
  string canvas_id_or_name = 2;
}

message Executor {
  string type = 1;
  Integrations.IntegrationRef integration = 2;
  Integrations.ResourceRef resource = 3;
  google.protobuf.Struct spec = 4;
  string name = 5;
}

message CreateStageResponse {
  Stage stage = 1;
}

message UpdateStageRequest {
  Stage stage = 1;
  string id_or_name = 2;
  string canvas_id_or_name = 3;
}

message UpdateStageResponse {
  Stage stage = 1;
}

message UpdateEventSourceRequest {
  EventSource event_source = 1;
  string id_or_name = 2;
  string canvas_id_or_name = 3;
}

message UpdateEventSourceResponse {
  EventSource event_source = 1;
  string key = 2;
}

message ListStagesRequest {
  string canvas_id_or_name = 1;
}

message ListStagesResponse {
  repeated Stage stages = 1;
}

message ListEventSourcesRequest {
  string canvas_id_or_name = 1;
}

message ListEventSourcesResponse {
  repeated EventSource event_sources = 1;
}

message ListConnectionGroupFieldSetsRequest {
  string canvas_id_or_name = 1;
  string id_or_name = 2;
}

message ListConnectionGroupFieldSetsResponse {
  repeated ConnectionGroupFieldSet field_sets = 1;
}

message ConnectionGroupFieldSet {
  enum State {
    STATE_UNKNOWN = 0;
    STATE_PENDING = 1;
    STATE_PROCESSED = 2;
    STATE_DISCARDED = 3;
  }

  enum StateReason {
    STATE_REASON_NONE = 0;
    STATE_REASON_OK = 1;
    STATE_REASON_TIMEOUT = 2;
  }

  string id = 1;
  repeated KeyValuePair fields = 2;
  string hash = 3;
  State state = 4;
  StateReason state_reason = 5;
  repeated ConnectionGroupEvent events = 6;
  google.protobuf.Timestamp created_at = 7;
}

message ConnectionGroupEvent {
  string id = 1;
  string source_id = 2;
  Connection.Type source_type = 3;
  string source_name = 4;
  google.protobuf.Timestamp received_at = 5;
}

message ListStageEventsRequest {
  string stage_id_or_name = 1;
  string canvas_id_or_name = 2;
  repeated StageEvent.State states = 3;
  repeated StageEvent.StateReason state_reasons = 4;
  uint32 limit = 5;
  google.protobuf.Timestamp before = 6;
}

message ListStageEventsResponse {
  repeated StageEvent events = 1;
  uint32 total_count = 2;
  bool has_next_page = 3;
  google.protobuf.Timestamp last_timestamp = 4;
}

message StageEvent {
  enum State {
    STATE_UNKNOWN = 0;
    STATE_PENDING = 1;
    STATE_WAITING = 2;
    STATE_PROCESSED = 3;
    STATE_DISCARDED = 4;
  }

  enum StateReason {
    STATE_REASON_UNKNOWN = 0;
    STATE_REASON_APPROVAL = 1;
    STATE_REASON_TIME_WINDOW = 2;
  }

  string id = 1;
  State state = 2;
  StateReason state_reason = 3;
  google.protobuf.Timestamp created_at = 4;
  repeated StageEventApproval approvals = 5;
  repeated KeyValuePair inputs = 6;
  string name = 7;
  Event trigger_event = 8;
  string discarded_by = 9;
  google.protobuf.Timestamp discarded_at = 10;
}

message KeyValuePair {
  string name = 1;
  string value = 2;
}

message OutputValue {
  string name = 1;
  string value = 2;
}

message ListStageExecutionsRequest {
  string stage_id_or_name = 1;
  string canvas_id_or_name = 2;
  repeated Execution.State states = 3;
  repeated Execution.Result results = 4;
  uint32 limit = 5;
  google.protobuf.Timestamp before = 6;
}

message ListStageExecutionsResponse {
  repeated Execution executions = 1;
  uint32 total_count = 2;
  bool has_next_page = 3;
  google.protobuf.Timestamp last_timestamp = 4;
}

message Execution {
  enum State {
    STATE_UNKNOWN = 0;
    STATE_PENDING = 1;
    STATE_STARTED = 2;
    STATE_FINISHED = 3;
  }

  enum Result {
    RESULT_UNKNOWN = 0;
    RESULT_PASSED = 1;
    RESULT_FAILED = 2;
    RESULT_CANCELLED = 3;
  }

  enum ResultReason {
    RESULT_REASON_OK = 0;
    RESULT_REASON_ERROR = 1;
    RESULT_REASON_MISSING_OUTPUTS = 2;
    RESULT_REASON_TIMEOUT = 3;
    RESULT_REASON_USER = 4;
  }

  string id = 1;
  State state = 2;
  Result result = 3;
  ResultReason result_reason = 4;
  string result_message = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp started_at = 7;
  google.protobuf.Timestamp cancelled_at = 8;
  google.protobuf.Timestamp finished_at = 9;
  repeated OutputValue outputs = 10;
  repeated ExecutionResource resources = 11;
  StageEvent stage_event = 12;
}

message ExecutionResource {
  string id = 1;
  string type = 2;
  string state = 3;
  string result = 4;
}

message StageEventApproval {
  string approved_by = 1;
  google.protobuf.Timestamp approved_at = 2;
}

message ApproveStageEventRequest {
  string stage_id_or_name = 1;
  string canvas_id_or_name = 2;
  string event_id = 3;
}

message ApproveStageEventResponse {
  StageEvent event = 1;
}

message DiscardStageEventRequest {
  string stage_id_or_name = 1;
  string canvas_id_or_name = 2;
  string event_id = 3;
}

message DiscardStageEventResponse {
  StageEvent event = 1;
}

message CancelStageExecutionRequest {
  string stage_id_or_name = 1;
  string canvas_id_or_name = 2;
  string execution_id = 3;
}

message CancelStageExecutionResponse {
  Execution execution = 1;
}

message AddUserRequest {
  string canvas_id_or_name = 1;
  string user_id = 2;
}

message AddUserResponse {}

message RemoveUserRequest {
  string canvas_id_or_name = 1;
  string user_id = 2;
}

message RemoveUserResponse {}

message DeleteEventSourceRequest {
  string canvas_id_or_name = 1;
  string id_or_name = 2;
}

message DeleteEventSourceResponse {}

message DeleteStageRequest {
  string canvas_id_or_name = 1;
  string id_or_name = 2;
}

message DeleteStageResponse {}

message DeleteConnectionGroupRequest {
  string canvas_id_or_name = 1;
  string id_or_name = 2;
}

message DeleteConnectionGroupResponse {}

enum EventSourceType {
  EVENT_SOURCE_TYPE_UNKNOWN = 0;
  EVENT_SOURCE_TYPE_EVENT_SOURCE = 1;
  EVENT_SOURCE_TYPE_STAGE = 2;
  EVENT_SOURCE_TYPE_CONNECTION_GROUP = 3;
}

message ListEventsRequest {
  string canvas_id_or_name = 1;
  EventSourceType source_type = 2;
  string source_id = 3;
  uint32 limit = 4;
  google.protobuf.Timestamp before = 5;
  repeated Event.State states = 6;
}

message ListEventsResponse {
  repeated Event events = 1;
  uint32 total_count = 2;
  bool has_next_page = 3;
  google.protobuf.Timestamp last_timestamp = 4;
}

message CreateEventRequest {
  string canvas_id_or_name = 1;
  EventSourceType source_type = 2;
  string source_id = 3;
  string type = 4;
  google.protobuf.Struct raw = 5;
}

message CreateEventResponse {
  Event event = 1;
}

message Event {
  enum State {
    STATE_UNKNOWN = 0;
    STATE_PENDING = 1;
    STATE_REJECTED = 2;
    STATE_PROCESSED = 3;
  }

  enum StateReason {
    STATE_REASON_UNKNOWN = 0;
    STATE_REASON_FILTERED = 1;
    STATE_REASON_ERROR = 2;
    STATE_REASON_OK = 3;
  }

  string id = 1;
  string source_id = 2;
  string source_name = 3;
  EventSourceType source_type = 4;
  string type = 5;
  State state = 6;
  StateReason state_reason = 7;
  string state_message = 8;
  google.protobuf.Timestamp received_at = 9;
  google.protobuf.Struct raw = 10;
  google.protobuf.Struct headers = 11;
}

message EventRejection {
  enum RejectionReason {
    REJECTION_REASON_UNKNOWN = 0;
    REJECTION_REASON_FILTERED = 1;
    REJECTION_REASON_ERROR = 2;
  }

  string id = 1;
  Event event = 2;
  Connection.Type target_type = 3;
  string target_id = 4;
  string target_name = 5;
  RejectionReason reason = 6;
  string message = 7;
  google.protobuf.Timestamp rejected_at = 8;
}

message ListEventRejectionsRequest {
  string canvas_id_or_name = 1;
  Connection.Type target_type = 2;
  string target_id = 3;
  uint32 limit = 4;
  google.protobuf.Timestamp before = 5;
}

message ListEventRejectionsResponse {
  repeated EventRejection rejections = 1;
  uint32 total_count = 2;
  bool has_next_page = 3;
  google.protobuf.Timestamp last_timestamp = 4;
}

message ListAlertsRequest {
  string canvas_id_or_name = 1;
  bool include_acked = 2;
  google.protobuf.Timestamp before = 3;
  uint32 limit = 4;
}

message ListAlertsResponse {
  repeated Alert alerts = 1;
}

message AcknowledgeAlertRequest {
  string canvas_id_or_name = 1;
  string alert_id = 2;
}

message AcknowledgeAlertResponse {
  Alert alert = 1;
}

message Alert {
  enum AlertType {
    ALERT_TYPE_UNKNOWN = 0;
    ALERT_TYPE_ERROR = 1;
    ALERT_TYPE_WARNING = 2;
    ALERT_TYPE_INFO = 3;
  }

  string id = 1;
  AlertType type = 2;
  string message = 3;
  string source_id = 4;
  EventSourceType source_type = 5;
  bool acknowledged = 6;
  google.protobuf.Timestamp acknowledged_at = 7;
  google.protobuf.Timestamp created_at = 8;
}

message StageCreated {
  string canvas_id = 1;
  string stage_id = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message ConnectionGroupCreated {
  string canvas_id = 1;
  string connection_group_id = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message StageUpdated {
  string canvas_id = 1;
  string stage_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  string old_resource_id = 4;
  string new_resource_id = 5;
}

message EventSourceCreated {
  string canvas_id = 1;
  string source_id = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message EventSourceUpdated {
  string canvas_id = 1;
  string source_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  string old_resource_id = 4;
  string new_resource_id = 5;
}

message StageEventCreated {
  string canvas_id = 1;
  string stage_id = 2;
  string event_id = 3;
  string source_id = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message EventCreated {
  string canvas_id = 1;
  string source_id = 2;
  string event_id = 3;
  EventSourceType source_type = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message StageEventApproved {
  string canvas_id = 1;
  string stage_id = 2;
  string event_id = 3;
  string source_id = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message StageEventDiscarded {
  string canvas_id = 1;
  string stage_id = 2;
  string event_id = 3;
  string source_id = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message StageExecutionCreated {
  string canvas_id = 1;
  string execution_id = 2;
  string stage_id = 3;
  string event_id = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message StageExecutionStarted {
  string canvas_id = 1;
  string execution_id = 2;
  string stage_id = 3;
  string event_id = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message StageExecutionFinished {
  string canvas_id = 1;
  string execution_id = 2;
  string stage_id = 3;
  string event_id = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message StageExecutionCancelled {
  string canvas_id = 1;
  string execution_id = 2;
  string stage_id = 3;
  string event_id = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message EventRejectionCreated {
  string rejection_id = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message AlertCreated {
  string canvas_id = 1;
  string alert_id = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message AlertAcknowledged {
  string canvas_id = 1;
  string alert_id = 2;
  google.protobuf.Timestamp timestamp = 3;
}
