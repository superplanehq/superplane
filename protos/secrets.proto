syntax = "proto3";

package Superplane.Secrets;

import "authorization.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/superplanehq/superplane/pkg/protos/secrets";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Superplane Secrets API";
    version: "1.0";
    description: "API for Superplane Secrets";
    contact: {
      name: "API Support";
      email: "support@superplane.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Secrets {
  rpc CreateSecret(CreateSecretRequest) returns (CreateSecretResponse) {
    option (google.api.http) = {
      post: "/api/v1/secrets"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new secret";
      description: "Creates a new secret";
      tags: "Secret";
    };
  }

  rpc DescribeSecret(DescribeSecretRequest) returns (DescribeSecretResponse) {
    option (google.api.http) = {
      get: "/api/v1/secrets/{id_or_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get secret details";
      description: "Returns the details of a specific secret";
      tags: "Secret";
    };
  }

  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {
    option (google.api.http) = {
      get: "/api/v1/secrets"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List secrets";
      description: "Returns the list of secrets";
      tags: "Secret";
    };
  }

  rpc UpdateSecret(UpdateSecretRequest) returns (UpdateSecretResponse) {
    option (google.api.http) = {
      patch: "/api/v1/secrets/{id_or_name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Updates a secret";
      description: "Updates the specified secret";
      tags: "Secret";
    };
  }

  rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse) {
    option (google.api.http) = {
      delete: "/api/v1/secrets/{id_or_name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Deletes a secret";
      description: "Deletes the specified secret";
      tags: "Secret";
    };
  }
}

message Secret {
  enum Provider {
    PROVIDER_UNKNOWN = 0;
    PROVIDER_LOCAL = 1;
  }

  //
  // Local secrets are stored and managed by SuperPlane itself.
  //
  message Local {
    map<string, string> data = 1;
  }

  message Metadata {
    string id = 1;
    string name = 2;
    Authorization.DomainType domain_type = 3;
    string domain_id = 4;
    google.protobuf.Timestamp created_at = 5;
  }

  message Spec {
    Provider provider = 1;
    Local local = 2;
  }

  Metadata metadata = 1;
  Spec spec = 2;
}

message CreateSecretRequest {
  Secret secret = 1;
  Authorization.DomainType domain_type = 2;
  string domain_id = 3;
}

message CreateSecretResponse {
  Secret secret = 1;
}

message UpdateSecretRequest {
  Secret secret = 1;
  string id_or_name = 2;
  Authorization.DomainType domain_type = 3;
  string domain_id = 4;
}

message UpdateSecretResponse {
  Secret secret = 1;
}

message DescribeSecretRequest {
  Authorization.DomainType domain_type = 1;
  string domain_id = 2;
  string id_or_name = 3;
}

message DescribeSecretResponse {
  Secret secret = 1;
}

message ListSecretsRequest {
  Authorization.DomainType domain_type = 1;
  string domain_id = 2;
}

message ListSecretsResponse {
  repeated Secret secrets = 1;
}

message DeleteSecretRequest {
  Authorization.DomainType domain_type = 1;
  string domain_id = 2;
  string id_or_name = 3;
}

message DeleteSecretResponse {}
