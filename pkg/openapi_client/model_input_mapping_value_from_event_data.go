/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the InputMappingValueFromEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputMappingValueFromEventData{}

// InputMappingValueFromEventData struct for InputMappingValueFromEventData
type InputMappingValueFromEventData struct {
	Connection *string `json:"connection,omitempty"`
	Expression *string `json:"expression,omitempty"`
}

// NewInputMappingValueFromEventData instantiates a new InputMappingValueFromEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputMappingValueFromEventData() *InputMappingValueFromEventData {
	this := InputMappingValueFromEventData{}
	return &this
}

// NewInputMappingValueFromEventDataWithDefaults instantiates a new InputMappingValueFromEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputMappingValueFromEventDataWithDefaults() *InputMappingValueFromEventData {
	this := InputMappingValueFromEventData{}
	return &this
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *InputMappingValueFromEventData) GetConnection() string {
	if o == nil || IsNil(o.Connection) {
		var ret string
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputMappingValueFromEventData) GetConnectionOk() (*string, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *InputMappingValueFromEventData) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given string and assigns it to the Connection field.
func (o *InputMappingValueFromEventData) SetConnection(v string) {
	o.Connection = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *InputMappingValueFromEventData) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputMappingValueFromEventData) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *InputMappingValueFromEventData) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *InputMappingValueFromEventData) SetExpression(v string) {
	o.Expression = &v
}

func (o InputMappingValueFromEventData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputMappingValueFromEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	return toSerialize, nil
}

type NullableInputMappingValueFromEventData struct {
	value *InputMappingValueFromEventData
	isSet bool
}

func (v NullableInputMappingValueFromEventData) Get() *InputMappingValueFromEventData {
	return v.value
}

func (v *NullableInputMappingValueFromEventData) Set(val *InputMappingValueFromEventData) {
	v.value = val
	v.isSet = true
}

func (v NullableInputMappingValueFromEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableInputMappingValueFromEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputMappingValueFromEventData(val *InputMappingValueFromEventData) *NullableInputMappingValueFromEventData {
	return &NullableInputMappingValueFromEventData{value: val, isSet: true}
}

func (v NullableInputMappingValueFromEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputMappingValueFromEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


