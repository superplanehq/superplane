/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SecretsSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretsSecret{}

// SecretsSecret struct for SecretsSecret
type SecretsSecret struct {
	Metadata *SecretsSecretMetadata `json:"metadata,omitempty"`
	Spec *SecretsSecretSpec `json:"spec,omitempty"`
}

// NewSecretsSecret instantiates a new SecretsSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretsSecret() *SecretsSecret {
	this := SecretsSecret{}
	return &this
}

// NewSecretsSecretWithDefaults instantiates a new SecretsSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretsSecretWithDefaults() *SecretsSecret {
	this := SecretsSecret{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SecretsSecret) GetMetadata() SecretsSecretMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret SecretsSecretMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretsSecret) GetMetadataOk() (*SecretsSecretMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SecretsSecret) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given SecretsSecretMetadata and assigns it to the Metadata field.
func (o *SecretsSecret) SetMetadata(v SecretsSecretMetadata) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *SecretsSecret) GetSpec() SecretsSecretSpec {
	if o == nil || IsNil(o.Spec) {
		var ret SecretsSecretSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretsSecret) GetSpecOk() (*SecretsSecretSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *SecretsSecret) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given SecretsSecretSpec and assigns it to the Spec field.
func (o *SecretsSecret) SetSpec(v SecretsSecretSpec) {
	o.Spec = &v
}

func (o SecretsSecret) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretsSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

type NullableSecretsSecret struct {
	value *SecretsSecret
	isSet bool
}

func (v NullableSecretsSecret) Get() *SecretsSecret {
	return v.value
}

func (v *NullableSecretsSecret) Set(val *SecretsSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretsSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretsSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretsSecret(val *SecretsSecret) *NullableSecretsSecret {
	return &NullableSecretsSecret{value: val, isSet: true}
}

func (v NullableSecretsSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretsSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


