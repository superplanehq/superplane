/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneExecutorSpecType the model 'SuperplaneExecutorSpecType'
type SuperplaneExecutorSpecType string

// List of SuperplaneExecutorSpecType
const (
	SUPERPLANEEXECUTORSPECTYPE_TYPE_UNKNOWN SuperplaneExecutorSpecType = "TYPE_UNKNOWN"
	SUPERPLANEEXECUTORSPECTYPE_TYPE_SEMAPHORE SuperplaneExecutorSpecType = "TYPE_SEMAPHORE"
	SUPERPLANEEXECUTORSPECTYPE_TYPE_HTTP SuperplaneExecutorSpecType = "TYPE_HTTP"
)

// All allowed values of SuperplaneExecutorSpecType enum
var AllowedSuperplaneExecutorSpecTypeEnumValues = []SuperplaneExecutorSpecType{
	"TYPE_UNKNOWN",
	"TYPE_SEMAPHORE",
	"TYPE_HTTP",
}

func (v *SuperplaneExecutorSpecType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneExecutorSpecType(value)
	for _, existing := range AllowedSuperplaneExecutorSpecTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneExecutorSpecType", value)
}

// NewSuperplaneExecutorSpecTypeFromValue returns a pointer to a valid SuperplaneExecutorSpecType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneExecutorSpecTypeFromValue(v string) (*SuperplaneExecutorSpecType, error) {
	ev := SuperplaneExecutorSpecType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneExecutorSpecType: valid values are %v", v, AllowedSuperplaneExecutorSpecTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneExecutorSpecType) IsValid() bool {
	for _, existing := range AllowedSuperplaneExecutorSpecTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneExecutorSpecType value
func (v SuperplaneExecutorSpecType) Ptr() *SuperplaneExecutorSpecType {
	return &v
}

type NullableSuperplaneExecutorSpecType struct {
	value *SuperplaneExecutorSpecType
	isSet bool
}

func (v NullableSuperplaneExecutorSpecType) Get() *SuperplaneExecutorSpecType {
	return v.value
}

func (v *NullableSuperplaneExecutorSpecType) Set(val *SuperplaneExecutorSpecType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneExecutorSpecType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneExecutorSpecType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneExecutorSpecType(val *SuperplaneExecutorSpecType) *NullableSuperplaneExecutorSpecType {
	return &NullableSuperplaneExecutorSpecType{value: val, isSet: true}
}

func (v NullableSuperplaneExecutorSpecType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneExecutorSpecType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

