/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the SuperplaneAlert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneAlert{}

// SuperplaneAlert struct for SuperplaneAlert
type SuperplaneAlert struct {
	Id *string `json:"id,omitempty"`
	Type *AlertAlertType `json:"type,omitempty"`
	Message *string `json:"message,omitempty"`
	SourceId *string `json:"sourceId,omitempty"`
	SourceType *SuperplaneEventSourceType `json:"sourceType,omitempty"`
	Acknowledged *bool `json:"acknowledged,omitempty"`
	AcknowledgedAt *time.Time `json:"acknowledgedAt,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
}

// NewSuperplaneAlert instantiates a new SuperplaneAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneAlert() *SuperplaneAlert {
	this := SuperplaneAlert{}
	var type_ AlertAlertType = ALERTALERTTYPE_ALERT_TYPE_UNKNOWN
	this.Type = &type_
	var sourceType SuperplaneEventSourceType = SUPERPLANEEVENTSOURCETYPE_EVENT_SOURCE_TYPE_UNKNOWN
	this.SourceType = &sourceType
	return &this
}

// NewSuperplaneAlertWithDefaults instantiates a new SuperplaneAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneAlertWithDefaults() *SuperplaneAlert {
	this := SuperplaneAlert{}
	var type_ AlertAlertType = ALERTALERTTYPE_ALERT_TYPE_UNKNOWN
	this.Type = &type_
	var sourceType SuperplaneEventSourceType = SUPERPLANEEVENTSOURCETYPE_EVENT_SOURCE_TYPE_UNKNOWN
	this.SourceType = &sourceType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperplaneAlert) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneAlert) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperplaneAlert) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperplaneAlert) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SuperplaneAlert) GetType() AlertAlertType {
	if o == nil || IsNil(o.Type) {
		var ret AlertAlertType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneAlert) GetTypeOk() (*AlertAlertType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SuperplaneAlert) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AlertAlertType and assigns it to the Type field.
func (o *SuperplaneAlert) SetType(v AlertAlertType) {
	o.Type = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SuperplaneAlert) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneAlert) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SuperplaneAlert) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SuperplaneAlert) SetMessage(v string) {
	o.Message = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *SuperplaneAlert) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneAlert) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *SuperplaneAlert) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *SuperplaneAlert) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *SuperplaneAlert) GetSourceType() SuperplaneEventSourceType {
	if o == nil || IsNil(o.SourceType) {
		var ret SuperplaneEventSourceType
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneAlert) GetSourceTypeOk() (*SuperplaneEventSourceType, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *SuperplaneAlert) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given SuperplaneEventSourceType and assigns it to the SourceType field.
func (o *SuperplaneAlert) SetSourceType(v SuperplaneEventSourceType) {
	o.SourceType = &v
}

// GetAcknowledged returns the Acknowledged field value if set, zero value otherwise.
func (o *SuperplaneAlert) GetAcknowledged() bool {
	if o == nil || IsNil(o.Acknowledged) {
		var ret bool
		return ret
	}
	return *o.Acknowledged
}

// GetAcknowledgedOk returns a tuple with the Acknowledged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneAlert) GetAcknowledgedOk() (*bool, bool) {
	if o == nil || IsNil(o.Acknowledged) {
		return nil, false
	}
	return o.Acknowledged, true
}

// HasAcknowledged returns a boolean if a field has been set.
func (o *SuperplaneAlert) HasAcknowledged() bool {
	if o != nil && !IsNil(o.Acknowledged) {
		return true
	}

	return false
}

// SetAcknowledged gets a reference to the given bool and assigns it to the Acknowledged field.
func (o *SuperplaneAlert) SetAcknowledged(v bool) {
	o.Acknowledged = &v
}

// GetAcknowledgedAt returns the AcknowledgedAt field value if set, zero value otherwise.
func (o *SuperplaneAlert) GetAcknowledgedAt() time.Time {
	if o == nil || IsNil(o.AcknowledgedAt) {
		var ret time.Time
		return ret
	}
	return *o.AcknowledgedAt
}

// GetAcknowledgedAtOk returns a tuple with the AcknowledgedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneAlert) GetAcknowledgedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AcknowledgedAt) {
		return nil, false
	}
	return o.AcknowledgedAt, true
}

// HasAcknowledgedAt returns a boolean if a field has been set.
func (o *SuperplaneAlert) HasAcknowledgedAt() bool {
	if o != nil && !IsNil(o.AcknowledgedAt) {
		return true
	}

	return false
}

// SetAcknowledgedAt gets a reference to the given time.Time and assigns it to the AcknowledgedAt field.
func (o *SuperplaneAlert) SetAcknowledgedAt(v time.Time) {
	o.AcknowledgedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SuperplaneAlert) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneAlert) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SuperplaneAlert) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SuperplaneAlert) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o SuperplaneAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.SourceType) {
		toSerialize["sourceType"] = o.SourceType
	}
	if !IsNil(o.Acknowledged) {
		toSerialize["acknowledged"] = o.Acknowledged
	}
	if !IsNil(o.AcknowledgedAt) {
		toSerialize["acknowledgedAt"] = o.AcknowledgedAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableSuperplaneAlert struct {
	value *SuperplaneAlert
	isSet bool
}

func (v NullableSuperplaneAlert) Get() *SuperplaneAlert {
	return v.value
}

func (v *NullableSuperplaneAlert) Set(val *SuperplaneAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneAlert(val *SuperplaneAlert) *NullableSuperplaneAlert {
	return &NullableSuperplaneAlert{value: val, isSet: true}
}

func (v NullableSuperplaneAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


