/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the BlueprintsBlueprintNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintsBlueprintNode{}

// BlueprintsBlueprintNode struct for BlueprintsBlueprintNode
type BlueprintsBlueprintNode struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	RefType *BlueprintsBlueprintNodeRefType `json:"refType,omitempty"`
	Component *BlueprintsBlueprintNodeComponentRef `json:"component,omitempty"`
	Configuration map[string]interface{} `json:"configuration,omitempty"`
}

// NewBlueprintsBlueprintNode instantiates a new BlueprintsBlueprintNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintsBlueprintNode() *BlueprintsBlueprintNode {
	this := BlueprintsBlueprintNode{}
	var refType BlueprintsBlueprintNodeRefType = BLUEPRINTSBLUEPRINTNODEREFTYPE_REF_TYPE_COMPONENT
	this.RefType = &refType
	return &this
}

// NewBlueprintsBlueprintNodeWithDefaults instantiates a new BlueprintsBlueprintNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintsBlueprintNodeWithDefaults() *BlueprintsBlueprintNode {
	this := BlueprintsBlueprintNode{}
	var refType BlueprintsBlueprintNodeRefType = BLUEPRINTSBLUEPRINTNODEREFTYPE_REF_TYPE_COMPONENT
	this.RefType = &refType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BlueprintsBlueprintNode) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintsBlueprintNode) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BlueprintsBlueprintNode) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BlueprintsBlueprintNode) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BlueprintsBlueprintNode) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintsBlueprintNode) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BlueprintsBlueprintNode) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BlueprintsBlueprintNode) SetName(v string) {
	o.Name = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *BlueprintsBlueprintNode) GetRefType() BlueprintsBlueprintNodeRefType {
	if o == nil || IsNil(o.RefType) {
		var ret BlueprintsBlueprintNodeRefType
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintsBlueprintNode) GetRefTypeOk() (*BlueprintsBlueprintNodeRefType, bool) {
	if o == nil || IsNil(o.RefType) {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *BlueprintsBlueprintNode) HasRefType() bool {
	if o != nil && !IsNil(o.RefType) {
		return true
	}

	return false
}

// SetRefType gets a reference to the given BlueprintsBlueprintNodeRefType and assigns it to the RefType field.
func (o *BlueprintsBlueprintNode) SetRefType(v BlueprintsBlueprintNodeRefType) {
	o.RefType = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *BlueprintsBlueprintNode) GetComponent() BlueprintsBlueprintNodeComponentRef {
	if o == nil || IsNil(o.Component) {
		var ret BlueprintsBlueprintNodeComponentRef
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintsBlueprintNode) GetComponentOk() (*BlueprintsBlueprintNodeComponentRef, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *BlueprintsBlueprintNode) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given BlueprintsBlueprintNodeComponentRef and assigns it to the Component field.
func (o *BlueprintsBlueprintNode) SetComponent(v BlueprintsBlueprintNodeComponentRef) {
	o.Component = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *BlueprintsBlueprintNode) GetConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintsBlueprintNode) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *BlueprintsBlueprintNode) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *BlueprintsBlueprintNode) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

func (o BlueprintsBlueprintNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintsBlueprintNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RefType) {
		toSerialize["refType"] = o.RefType
	}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullableBlueprintsBlueprintNode struct {
	value *BlueprintsBlueprintNode
	isSet bool
}

func (v NullableBlueprintsBlueprintNode) Get() *BlueprintsBlueprintNode {
	return v.value
}

func (v *NullableBlueprintsBlueprintNode) Set(val *BlueprintsBlueprintNode) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintsBlueprintNode) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintsBlueprintNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintsBlueprintNode(val *BlueprintsBlueprintNode) *NullableBlueprintsBlueprintNode {
	return &NullableBlueprintsBlueprintNode{value: val, isSet: true}
}

func (v NullableBlueprintsBlueprintNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintsBlueprintNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


