/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// AuthorizationDomainType the model 'AuthorizationDomainType'
type AuthorizationDomainType string

// List of AuthorizationDomainType
const (
	AUTHORIZATIONDOMAINTYPE_DOMAIN_TYPE_UNSPECIFIED AuthorizationDomainType = "DOMAIN_TYPE_UNSPECIFIED"
	AUTHORIZATIONDOMAINTYPE_DOMAIN_TYPE_ORGANIZATION AuthorizationDomainType = "DOMAIN_TYPE_ORGANIZATION"
	AUTHORIZATIONDOMAINTYPE_DOMAIN_TYPE_CANVAS AuthorizationDomainType = "DOMAIN_TYPE_CANVAS"
)

// All allowed values of AuthorizationDomainType enum
var AllowedAuthorizationDomainTypeEnumValues = []AuthorizationDomainType{
	"DOMAIN_TYPE_UNSPECIFIED",
	"DOMAIN_TYPE_ORGANIZATION",
	"DOMAIN_TYPE_CANVAS",
}

func (v *AuthorizationDomainType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthorizationDomainType(value)
	for _, existing := range AllowedAuthorizationDomainTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthorizationDomainType", value)
}

// NewAuthorizationDomainTypeFromValue returns a pointer to a valid AuthorizationDomainType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthorizationDomainTypeFromValue(v string) (*AuthorizationDomainType, error) {
	ev := AuthorizationDomainType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthorizationDomainType: valid values are %v", v, AllowedAuthorizationDomainTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthorizationDomainType) IsValid() bool {
	for _, existing := range AllowedAuthorizationDomainTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthorizationDomainType value
func (v AuthorizationDomainType) Ptr() *AuthorizationDomainType {
	return &v
}

type NullableAuthorizationDomainType struct {
	value *AuthorizationDomainType
	isSet bool
}

func (v NullableAuthorizationDomainType) Get() *AuthorizationDomainType {
	return v.value
}

func (v *NullableAuthorizationDomainType) Set(val *AuthorizationDomainType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationDomainType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationDomainType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationDomainType(val *AuthorizationDomainType) *NullableAuthorizationDomainType {
	return &NullableAuthorizationDomainType{value: val, isSet: true}
}

func (v NullableAuthorizationDomainType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationDomainType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

