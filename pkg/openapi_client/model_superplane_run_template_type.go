/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneRunTemplateType the model 'SuperplaneRunTemplateType'
type SuperplaneRunTemplateType string

// List of SuperplaneRunTemplateType
const (
	SUPERPLANERUNTEMPLATETYPE_TYPE_UNKNOWN SuperplaneRunTemplateType = "TYPE_UNKNOWN"
	SUPERPLANERUNTEMPLATETYPE_TYPE_SEMAPHORE SuperplaneRunTemplateType = "TYPE_SEMAPHORE"
)

// All allowed values of SuperplaneRunTemplateType enum
var AllowedSuperplaneRunTemplateTypeEnumValues = []SuperplaneRunTemplateType{
	"TYPE_UNKNOWN",
	"TYPE_SEMAPHORE",
}

func (v *SuperplaneRunTemplateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneRunTemplateType(value)
	for _, existing := range AllowedSuperplaneRunTemplateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneRunTemplateType", value)
}

// NewSuperplaneRunTemplateTypeFromValue returns a pointer to a valid SuperplaneRunTemplateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneRunTemplateTypeFromValue(v string) (*SuperplaneRunTemplateType, error) {
	ev := SuperplaneRunTemplateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneRunTemplateType: valid values are %v", v, AllowedSuperplaneRunTemplateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneRunTemplateType) IsValid() bool {
	for _, existing := range AllowedSuperplaneRunTemplateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneRunTemplateType value
func (v SuperplaneRunTemplateType) Ptr() *SuperplaneRunTemplateType {
	return &v
}

type NullableSuperplaneRunTemplateType struct {
	value *SuperplaneRunTemplateType
	isSet bool
}

func (v NullableSuperplaneRunTemplateType) Get() *SuperplaneRunTemplateType {
	return v.value
}

func (v *NullableSuperplaneRunTemplateType) Set(val *SuperplaneRunTemplateType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneRunTemplateType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneRunTemplateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneRunTemplateType(val *SuperplaneRunTemplateType) *NullableSuperplaneRunTemplateType {
	return &NullableSuperplaneRunTemplateType{value: val, isSet: true}
}

func (v NullableSuperplaneRunTemplateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneRunTemplateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

