/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the SuperplaneExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneExecution{}

// SuperplaneExecution struct for SuperplaneExecution
type SuperplaneExecution struct {
	Id *string `json:"id,omitempty"`
	ReferenceId *string `json:"referenceId,omitempty"`
	State *SuperplaneExecutionState `json:"state,omitempty"`
	Result *SuperplaneExecutionResult `json:"result,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	StartedAt *time.Time `json:"startedAt,omitempty"`
	FinishedAt *time.Time `json:"finishedAt,omitempty"`
	Outputs []SuperplaneOutputValue `json:"outputs,omitempty"`
}

// NewSuperplaneExecution instantiates a new SuperplaneExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneExecution() *SuperplaneExecution {
	this := SuperplaneExecution{}
	var state SuperplaneExecutionState = SUPERPLANEEXECUTIONSTATE_STATE_UNKNOWN
	this.State = &state
	var result SuperplaneExecutionResult = SUPERPLANEEXECUTIONRESULT_RESULT_UNKNOWN
	this.Result = &result
	return &this
}

// NewSuperplaneExecutionWithDefaults instantiates a new SuperplaneExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneExecutionWithDefaults() *SuperplaneExecution {
	this := SuperplaneExecution{}
	var state SuperplaneExecutionState = SUPERPLANEEXECUTIONSTATE_STATE_UNKNOWN
	this.State = &state
	var result SuperplaneExecutionResult = SUPERPLANEEXECUTIONRESULT_RESULT_UNKNOWN
	this.Result = &result
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperplaneExecution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperplaneExecution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperplaneExecution) SetId(v string) {
	o.Id = &v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *SuperplaneExecution) GetReferenceId() string {
	if o == nil || IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecution) GetReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *SuperplaneExecution) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *SuperplaneExecution) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SuperplaneExecution) GetState() SuperplaneExecutionState {
	if o == nil || IsNil(o.State) {
		var ret SuperplaneExecutionState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecution) GetStateOk() (*SuperplaneExecutionState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SuperplaneExecution) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given SuperplaneExecutionState and assigns it to the State field.
func (o *SuperplaneExecution) SetState(v SuperplaneExecutionState) {
	o.State = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *SuperplaneExecution) GetResult() SuperplaneExecutionResult {
	if o == nil || IsNil(o.Result) {
		var ret SuperplaneExecutionResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecution) GetResultOk() (*SuperplaneExecutionResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *SuperplaneExecution) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given SuperplaneExecutionResult and assigns it to the Result field.
func (o *SuperplaneExecution) SetResult(v SuperplaneExecutionResult) {
	o.Result = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SuperplaneExecution) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecution) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SuperplaneExecution) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SuperplaneExecution) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *SuperplaneExecution) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecution) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *SuperplaneExecution) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *SuperplaneExecution) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *SuperplaneExecution) GetFinishedAt() time.Time {
	if o == nil || IsNil(o.FinishedAt) {
		var ret time.Time
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecution) GetFinishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FinishedAt) {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *SuperplaneExecution) HasFinishedAt() bool {
	if o != nil && !IsNil(o.FinishedAt) {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given time.Time and assigns it to the FinishedAt field.
func (o *SuperplaneExecution) SetFinishedAt(v time.Time) {
	o.FinishedAt = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *SuperplaneExecution) GetOutputs() []SuperplaneOutputValue {
	if o == nil || IsNil(o.Outputs) {
		var ret []SuperplaneOutputValue
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecution) GetOutputsOk() ([]SuperplaneOutputValue, bool) {
	if o == nil || IsNil(o.Outputs) {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *SuperplaneExecution) HasOutputs() bool {
	if o != nil && !IsNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []SuperplaneOutputValue and assigns it to the Outputs field.
func (o *SuperplaneExecution) SetOutputs(v []SuperplaneOutputValue) {
	o.Outputs = v
}

func (o SuperplaneExecution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReferenceId) {
		toSerialize["referenceId"] = o.ReferenceId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.StartedAt) {
		toSerialize["startedAt"] = o.StartedAt
	}
	if !IsNil(o.FinishedAt) {
		toSerialize["finishedAt"] = o.FinishedAt
	}
	if !IsNil(o.Outputs) {
		toSerialize["outputs"] = o.Outputs
	}
	return toSerialize, nil
}

type NullableSuperplaneExecution struct {
	value *SuperplaneExecution
	isSet bool
}

func (v NullableSuperplaneExecution) Get() *SuperplaneExecution {
	return v.value
}

func (v *NullableSuperplaneExecution) Set(val *SuperplaneExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneExecution(val *SuperplaneExecution) *NullableSuperplaneExecution {
	return &NullableSuperplaneExecution{value: val, isSet: true}
}

func (v NullableSuperplaneExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


