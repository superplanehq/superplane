/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneWorkflowNodeExecutionState the model 'SuperplaneWorkflowNodeExecutionState'
type SuperplaneWorkflowNodeExecutionState string

// List of SuperplaneWorkflowNodeExecutionState
const (
	SUPERPLANEWORKFLOWNODEEXECUTIONSTATE_STATE_UNKNOWN SuperplaneWorkflowNodeExecutionState = "STATE_UNKNOWN"
	SUPERPLANEWORKFLOWNODEEXECUTIONSTATE_STATE_PENDING SuperplaneWorkflowNodeExecutionState = "STATE_PENDING"
	SUPERPLANEWORKFLOWNODEEXECUTIONSTATE_STATE_WAITING SuperplaneWorkflowNodeExecutionState = "STATE_WAITING"
	SUPERPLANEWORKFLOWNODEEXECUTIONSTATE_STATE_STARTED SuperplaneWorkflowNodeExecutionState = "STATE_STARTED"
	SUPERPLANEWORKFLOWNODEEXECUTIONSTATE_STATE_FINISHED SuperplaneWorkflowNodeExecutionState = "STATE_FINISHED"
)

// All allowed values of SuperplaneWorkflowNodeExecutionState enum
var AllowedSuperplaneWorkflowNodeExecutionStateEnumValues = []SuperplaneWorkflowNodeExecutionState{
	"STATE_UNKNOWN",
	"STATE_PENDING",
	"STATE_WAITING",
	"STATE_STARTED",
	"STATE_FINISHED",
}

func (v *SuperplaneWorkflowNodeExecutionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneWorkflowNodeExecutionState(value)
	for _, existing := range AllowedSuperplaneWorkflowNodeExecutionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneWorkflowNodeExecutionState", value)
}

// NewSuperplaneWorkflowNodeExecutionStateFromValue returns a pointer to a valid SuperplaneWorkflowNodeExecutionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneWorkflowNodeExecutionStateFromValue(v string) (*SuperplaneWorkflowNodeExecutionState, error) {
	ev := SuperplaneWorkflowNodeExecutionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneWorkflowNodeExecutionState: valid values are %v", v, AllowedSuperplaneWorkflowNodeExecutionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneWorkflowNodeExecutionState) IsValid() bool {
	for _, existing := range AllowedSuperplaneWorkflowNodeExecutionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneWorkflowNodeExecutionState value
func (v SuperplaneWorkflowNodeExecutionState) Ptr() *SuperplaneWorkflowNodeExecutionState {
	return &v
}

type NullableSuperplaneWorkflowNodeExecutionState struct {
	value *SuperplaneWorkflowNodeExecutionState
	isSet bool
}

func (v NullableSuperplaneWorkflowNodeExecutionState) Get() *SuperplaneWorkflowNodeExecutionState {
	return v.value
}

func (v *NullableSuperplaneWorkflowNodeExecutionState) Set(val *SuperplaneWorkflowNodeExecutionState) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneWorkflowNodeExecutionState) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneWorkflowNodeExecutionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneWorkflowNodeExecutionState(val *SuperplaneWorkflowNodeExecutionState) *NullableSuperplaneWorkflowNodeExecutionState {
	return &NullableSuperplaneWorkflowNodeExecutionState{value: val, isSet: true}
}

func (v NullableSuperplaneWorkflowNodeExecutionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneWorkflowNodeExecutionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

