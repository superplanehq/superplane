/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the EventSourceSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSourceSchedule{}

// EventSourceSchedule struct for EventSourceSchedule
type EventSourceSchedule struct {
	Type *EventSourceScheduleType `json:"type,omitempty"`
	Daily *EventSourceDailySchedule `json:"daily,omitempty"`
	Weekly *EventSourceWeeklySchedule `json:"weekly,omitempty"`
}

// NewEventSourceSchedule instantiates a new EventSourceSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSourceSchedule() *EventSourceSchedule {
	this := EventSourceSchedule{}
	var type_ EventSourceScheduleType = EVENTSOURCESCHEDULETYPE_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewEventSourceScheduleWithDefaults instantiates a new EventSourceSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSourceScheduleWithDefaults() *EventSourceSchedule {
	this := EventSourceSchedule{}
	var type_ EventSourceScheduleType = EVENTSOURCESCHEDULETYPE_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventSourceSchedule) GetType() EventSourceScheduleType {
	if o == nil || IsNil(o.Type) {
		var ret EventSourceScheduleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSourceSchedule) GetTypeOk() (*EventSourceScheduleType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventSourceSchedule) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EventSourceScheduleType and assigns it to the Type field.
func (o *EventSourceSchedule) SetType(v EventSourceScheduleType) {
	o.Type = &v
}

// GetDaily returns the Daily field value if set, zero value otherwise.
func (o *EventSourceSchedule) GetDaily() EventSourceDailySchedule {
	if o == nil || IsNil(o.Daily) {
		var ret EventSourceDailySchedule
		return ret
	}
	return *o.Daily
}

// GetDailyOk returns a tuple with the Daily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSourceSchedule) GetDailyOk() (*EventSourceDailySchedule, bool) {
	if o == nil || IsNil(o.Daily) {
		return nil, false
	}
	return o.Daily, true
}

// HasDaily returns a boolean if a field has been set.
func (o *EventSourceSchedule) HasDaily() bool {
	if o != nil && !IsNil(o.Daily) {
		return true
	}

	return false
}

// SetDaily gets a reference to the given EventSourceDailySchedule and assigns it to the Daily field.
func (o *EventSourceSchedule) SetDaily(v EventSourceDailySchedule) {
	o.Daily = &v
}

// GetWeekly returns the Weekly field value if set, zero value otherwise.
func (o *EventSourceSchedule) GetWeekly() EventSourceWeeklySchedule {
	if o == nil || IsNil(o.Weekly) {
		var ret EventSourceWeeklySchedule
		return ret
	}
	return *o.Weekly
}

// GetWeeklyOk returns a tuple with the Weekly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSourceSchedule) GetWeeklyOk() (*EventSourceWeeklySchedule, bool) {
	if o == nil || IsNil(o.Weekly) {
		return nil, false
	}
	return o.Weekly, true
}

// HasWeekly returns a boolean if a field has been set.
func (o *EventSourceSchedule) HasWeekly() bool {
	if o != nil && !IsNil(o.Weekly) {
		return true
	}

	return false
}

// SetWeekly gets a reference to the given EventSourceWeeklySchedule and assigns it to the Weekly field.
func (o *EventSourceSchedule) SetWeekly(v EventSourceWeeklySchedule) {
	o.Weekly = &v
}

func (o EventSourceSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSourceSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Daily) {
		toSerialize["daily"] = o.Daily
	}
	if !IsNil(o.Weekly) {
		toSerialize["weekly"] = o.Weekly
	}
	return toSerialize, nil
}

type NullableEventSourceSchedule struct {
	value *EventSourceSchedule
	isSet bool
}

func (v NullableEventSourceSchedule) Get() *EventSourceSchedule {
	return v.value
}

func (v *NullableEventSourceSchedule) Set(val *EventSourceSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSourceSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSourceSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSourceSchedule(val *EventSourceSchedule) *NullableEventSourceSchedule {
	return &NullableEventSourceSchedule{value: val, isSet: true}
}

func (v NullableEventSourceSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSourceSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


