/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// WorkflowsWorkflowNodeExecutionResult the model 'WorkflowsWorkflowNodeExecutionResult'
type WorkflowsWorkflowNodeExecutionResult string

// List of WorkflowsWorkflowNodeExecutionResult
const (
	WORKFLOWSWORKFLOWNODEEXECUTIONRESULT_RESULT_UNKNOWN WorkflowsWorkflowNodeExecutionResult = "RESULT_UNKNOWN"
	WORKFLOWSWORKFLOWNODEEXECUTIONRESULT_RESULT_PASSED WorkflowsWorkflowNodeExecutionResult = "RESULT_PASSED"
	WORKFLOWSWORKFLOWNODEEXECUTIONRESULT_RESULT_FAILED WorkflowsWorkflowNodeExecutionResult = "RESULT_FAILED"
	WORKFLOWSWORKFLOWNODEEXECUTIONRESULT_RESULT_CANCELLED WorkflowsWorkflowNodeExecutionResult = "RESULT_CANCELLED"
)

// All allowed values of WorkflowsWorkflowNodeExecutionResult enum
var AllowedWorkflowsWorkflowNodeExecutionResultEnumValues = []WorkflowsWorkflowNodeExecutionResult{
	"RESULT_UNKNOWN",
	"RESULT_PASSED",
	"RESULT_FAILED",
	"RESULT_CANCELLED",
}

func (v *WorkflowsWorkflowNodeExecutionResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkflowsWorkflowNodeExecutionResult(value)
	for _, existing := range AllowedWorkflowsWorkflowNodeExecutionResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkflowsWorkflowNodeExecutionResult", value)
}

// NewWorkflowsWorkflowNodeExecutionResultFromValue returns a pointer to a valid WorkflowsWorkflowNodeExecutionResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkflowsWorkflowNodeExecutionResultFromValue(v string) (*WorkflowsWorkflowNodeExecutionResult, error) {
	ev := WorkflowsWorkflowNodeExecutionResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkflowsWorkflowNodeExecutionResult: valid values are %v", v, AllowedWorkflowsWorkflowNodeExecutionResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkflowsWorkflowNodeExecutionResult) IsValid() bool {
	for _, existing := range AllowedWorkflowsWorkflowNodeExecutionResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkflowsWorkflowNodeExecutionResult value
func (v WorkflowsWorkflowNodeExecutionResult) Ptr() *WorkflowsWorkflowNodeExecutionResult {
	return &v
}

type NullableWorkflowsWorkflowNodeExecutionResult struct {
	value *WorkflowsWorkflowNodeExecutionResult
	isSet bool
}

func (v NullableWorkflowsWorkflowNodeExecutionResult) Get() *WorkflowsWorkflowNodeExecutionResult {
	return v.value
}

func (v *NullableWorkflowsWorkflowNodeExecutionResult) Set(val *WorkflowsWorkflowNodeExecutionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowsWorkflowNodeExecutionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowsWorkflowNodeExecutionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowsWorkflowNodeExecutionResult(val *WorkflowsWorkflowNodeExecutionResult) *NullableWorkflowsWorkflowNodeExecutionResult {
	return &NullableWorkflowsWorkflowNodeExecutionResult{value: val, isSet: true}
}

func (v NullableWorkflowsWorkflowNodeExecutionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowsWorkflowNodeExecutionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

