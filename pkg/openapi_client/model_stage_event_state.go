/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// StageEventState the model 'StageEventState'
type StageEventState string

// List of StageEventState
const (
	STAGEEVENTSTATE_STATE_UNKNOWN StageEventState = "STATE_UNKNOWN"
	STAGEEVENTSTATE_STATE_PENDING StageEventState = "STATE_PENDING"
	STAGEEVENTSTATE_STATE_WAITING StageEventState = "STATE_WAITING"
	STAGEEVENTSTATE_STATE_PROCESSED StageEventState = "STATE_PROCESSED"
)

// All allowed values of StageEventState enum
var AllowedStageEventStateEnumValues = []StageEventState{
	"STATE_UNKNOWN",
	"STATE_PENDING",
	"STATE_WAITING",
	"STATE_PROCESSED",
}

func (v *StageEventState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StageEventState(value)
	for _, existing := range AllowedStageEventStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StageEventState", value)
}

// NewStageEventStateFromValue returns a pointer to a valid StageEventState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStageEventStateFromValue(v string) (*StageEventState, error) {
	ev := StageEventState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StageEventState: valid values are %v", v, AllowedStageEventStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StageEventState) IsValid() bool {
	for _, existing := range AllowedStageEventStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StageEventState value
func (v StageEventState) Ptr() *StageEventState {
	return &v
}

type NullableStageEventState struct {
	value *StageEventState
	isSet bool
}

func (v NullableStageEventState) Get() *StageEventState {
	return v.value
}

func (v *NullableStageEventState) Set(val *StageEventState) {
	v.value = val
	v.isSet = true
}

func (v NullableStageEventState) IsSet() bool {
	return v.isSet
}

func (v *NullableStageEventState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStageEventState(val *StageEventState) *NullableStageEventState {
	return &NullableStageEventState{value: val, isSet: true}
}

func (v NullableStageEventState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStageEventState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

