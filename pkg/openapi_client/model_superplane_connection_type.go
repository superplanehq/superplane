/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneConnectionType the model 'SuperplaneConnectionType'
type SuperplaneConnectionType string

// List of SuperplaneConnectionType
const (
	SUPERPLANECONNECTIONTYPE_TYPE_UNKNOWN SuperplaneConnectionType = "TYPE_UNKNOWN"
	SUPERPLANECONNECTIONTYPE_TYPE_EVENT_SOURCE SuperplaneConnectionType = "TYPE_EVENT_SOURCE"
	SUPERPLANECONNECTIONTYPE_TYPE_STAGE SuperplaneConnectionType = "TYPE_STAGE"
	SUPERPLANECONNECTIONTYPE_TYPE_CONNECTION_GROUP SuperplaneConnectionType = "TYPE_CONNECTION_GROUP"
)

// All allowed values of SuperplaneConnectionType enum
var AllowedSuperplaneConnectionTypeEnumValues = []SuperplaneConnectionType{
	"TYPE_UNKNOWN",
	"TYPE_EVENT_SOURCE",
	"TYPE_STAGE",
	"TYPE_CONNECTION_GROUP",
}

func (v *SuperplaneConnectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneConnectionType(value)
	for _, existing := range AllowedSuperplaneConnectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneConnectionType", value)
}

// NewSuperplaneConnectionTypeFromValue returns a pointer to a valid SuperplaneConnectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneConnectionTypeFromValue(v string) (*SuperplaneConnectionType, error) {
	ev := SuperplaneConnectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneConnectionType: valid values are %v", v, AllowedSuperplaneConnectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneConnectionType) IsValid() bool {
	for _, existing := range AllowedSuperplaneConnectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneConnectionType value
func (v SuperplaneConnectionType) Ptr() *SuperplaneConnectionType {
	return &v
}

type NullableSuperplaneConnectionType struct {
	value *SuperplaneConnectionType
	isSet bool
}

func (v NullableSuperplaneConnectionType) Get() *SuperplaneConnectionType {
	return v.value
}

func (v *NullableSuperplaneConnectionType) Set(val *SuperplaneConnectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneConnectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneConnectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneConnectionType(val *SuperplaneConnectionType) *NullableSuperplaneConnectionType {
	return &NullableSuperplaneConnectionType{value: val, isSet: true}
}

func (v NullableSuperplaneConnectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneConnectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

