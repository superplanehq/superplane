/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the SuperplaneMeUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneMeUser{}

// SuperplaneMeUser struct for SuperplaneMeUser
type SuperplaneMeUser struct {
	Id *string `json:"id,omitempty"`
	Email *string `json:"email,omitempty"`
	OrganizationId *string `json:"organizationId,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	HasToken *bool `json:"hasToken,omitempty"`
}

// NewSuperplaneMeUser instantiates a new SuperplaneMeUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneMeUser() *SuperplaneMeUser {
	this := SuperplaneMeUser{}
	return &this
}

// NewSuperplaneMeUserWithDefaults instantiates a new SuperplaneMeUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneMeUserWithDefaults() *SuperplaneMeUser {
	this := SuperplaneMeUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperplaneMeUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneMeUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperplaneMeUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperplaneMeUser) SetId(v string) {
	o.Id = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SuperplaneMeUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneMeUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SuperplaneMeUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SuperplaneMeUser) SetEmail(v string) {
	o.Email = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *SuperplaneMeUser) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneMeUser) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *SuperplaneMeUser) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *SuperplaneMeUser) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SuperplaneMeUser) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneMeUser) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SuperplaneMeUser) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SuperplaneMeUser) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetHasToken returns the HasToken field value if set, zero value otherwise.
func (o *SuperplaneMeUser) GetHasToken() bool {
	if o == nil || IsNil(o.HasToken) {
		var ret bool
		return ret
	}
	return *o.HasToken
}

// GetHasTokenOk returns a tuple with the HasToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneMeUser) GetHasTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.HasToken) {
		return nil, false
	}
	return o.HasToken, true
}

// HasHasToken returns a boolean if a field has been set.
func (o *SuperplaneMeUser) HasHasToken() bool {
	if o != nil && !IsNil(o.HasToken) {
		return true
	}

	return false
}

// SetHasToken gets a reference to the given bool and assigns it to the HasToken field.
func (o *SuperplaneMeUser) SetHasToken(v bool) {
	o.HasToken = &v
}

func (o SuperplaneMeUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneMeUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.HasToken) {
		toSerialize["hasToken"] = o.HasToken
	}
	return toSerialize, nil
}

type NullableSuperplaneMeUser struct {
	value *SuperplaneMeUser
	isSet bool
}

func (v NullableSuperplaneMeUser) Get() *SuperplaneMeUser {
	return v.value
}

func (v *NullableSuperplaneMeUser) Set(val *SuperplaneMeUser) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneMeUser) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneMeUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneMeUser(val *SuperplaneMeUser) *NullableSuperplaneMeUser {
	return &NullableSuperplaneMeUser{value: val, isSet: true}
}

func (v NullableSuperplaneMeUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneMeUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


