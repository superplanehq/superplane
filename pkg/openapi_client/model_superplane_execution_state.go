/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneExecutionState the model 'SuperplaneExecutionState'
type SuperplaneExecutionState string

// List of SuperplaneExecutionState
const (
	SUPERPLANEEXECUTIONSTATE_STATE_UNKNOWN SuperplaneExecutionState = "STATE_UNKNOWN"
	SUPERPLANEEXECUTIONSTATE_STATE_PENDING SuperplaneExecutionState = "STATE_PENDING"
	SUPERPLANEEXECUTIONSTATE_STATE_STARTED SuperplaneExecutionState = "STATE_STARTED"
	SUPERPLANEEXECUTIONSTATE_STATE_FINISHED SuperplaneExecutionState = "STATE_FINISHED"
)

// All allowed values of SuperplaneExecutionState enum
var AllowedSuperplaneExecutionStateEnumValues = []SuperplaneExecutionState{
	"STATE_UNKNOWN",
	"STATE_PENDING",
	"STATE_STARTED",
	"STATE_FINISHED",
}

func (v *SuperplaneExecutionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneExecutionState(value)
	for _, existing := range AllowedSuperplaneExecutionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneExecutionState", value)
}

// NewSuperplaneExecutionStateFromValue returns a pointer to a valid SuperplaneExecutionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneExecutionStateFromValue(v string) (*SuperplaneExecutionState, error) {
	ev := SuperplaneExecutionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneExecutionState: valid values are %v", v, AllowedSuperplaneExecutionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneExecutionState) IsValid() bool {
	for _, existing := range AllowedSuperplaneExecutionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneExecutionState value
func (v SuperplaneExecutionState) Ptr() *SuperplaneExecutionState {
	return &v
}

type NullableSuperplaneExecutionState struct {
	value *SuperplaneExecutionState
	isSet bool
}

func (v NullableSuperplaneExecutionState) Get() *SuperplaneExecutionState {
	return v.value
}

func (v *NullableSuperplaneExecutionState) Set(val *SuperplaneExecutionState) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneExecutionState) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneExecutionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneExecutionState(val *SuperplaneExecutionState) *NullableSuperplaneExecutionState {
	return &NullableSuperplaneExecutionState{value: val, isSet: true}
}

func (v NullableSuperplaneExecutionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneExecutionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

