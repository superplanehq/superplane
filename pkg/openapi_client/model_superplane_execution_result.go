/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneExecutionResult the model 'SuperplaneExecutionResult'
type SuperplaneExecutionResult string

// List of SuperplaneExecutionResult
const (
	SUPERPLANEEXECUTIONRESULT_RESULT_UNKNOWN SuperplaneExecutionResult = "RESULT_UNKNOWN"
	SUPERPLANEEXECUTIONRESULT_RESULT_PASSED SuperplaneExecutionResult = "RESULT_PASSED"
	SUPERPLANEEXECUTIONRESULT_RESULT_FAILED SuperplaneExecutionResult = "RESULT_FAILED"
	SUPERPLANEEXECUTIONRESULT_RESULT_CANCELLED SuperplaneExecutionResult = "RESULT_CANCELLED"
)

// All allowed values of SuperplaneExecutionResult enum
var AllowedSuperplaneExecutionResultEnumValues = []SuperplaneExecutionResult{
	"RESULT_UNKNOWN",
	"RESULT_PASSED",
	"RESULT_FAILED",
	"RESULT_CANCELLED",
}

func (v *SuperplaneExecutionResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneExecutionResult(value)
	for _, existing := range AllowedSuperplaneExecutionResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneExecutionResult", value)
}

// NewSuperplaneExecutionResultFromValue returns a pointer to a valid SuperplaneExecutionResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneExecutionResultFromValue(v string) (*SuperplaneExecutionResult, error) {
	ev := SuperplaneExecutionResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneExecutionResult: valid values are %v", v, AllowedSuperplaneExecutionResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneExecutionResult) IsValid() bool {
	for _, existing := range AllowedSuperplaneExecutionResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneExecutionResult value
func (v SuperplaneExecutionResult) Ptr() *SuperplaneExecutionResult {
	return &v
}

type NullableSuperplaneExecutionResult struct {
	value *SuperplaneExecutionResult
	isSet bool
}

func (v NullableSuperplaneExecutionResult) Get() *SuperplaneExecutionResult {
	return v.value
}

func (v *NullableSuperplaneExecutionResult) Set(val *SuperplaneExecutionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneExecutionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneExecutionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneExecutionResult(val *SuperplaneExecutionResult) *NullableSuperplaneExecutionResult {
	return &NullableSuperplaneExecutionResult{value: val, isSet: true}
}

func (v NullableSuperplaneExecutionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneExecutionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

