/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneFilterType the model 'SuperplaneFilterType'
type SuperplaneFilterType string

// List of SuperplaneFilterType
const (
	SUPERPLANEFILTERTYPE_FILTER_TYPE_UNKNOWN SuperplaneFilterType = "FILTER_TYPE_UNKNOWN"
	SUPERPLANEFILTERTYPE_FILTER_TYPE_DATA SuperplaneFilterType = "FILTER_TYPE_DATA"
	SUPERPLANEFILTERTYPE_FILTER_TYPE_HEADER SuperplaneFilterType = "FILTER_TYPE_HEADER"
)

// All allowed values of SuperplaneFilterType enum
var AllowedSuperplaneFilterTypeEnumValues = []SuperplaneFilterType{
	"FILTER_TYPE_UNKNOWN",
	"FILTER_TYPE_DATA",
	"FILTER_TYPE_HEADER",
}

func (v *SuperplaneFilterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneFilterType(value)
	for _, existing := range AllowedSuperplaneFilterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneFilterType", value)
}

// NewSuperplaneFilterTypeFromValue returns a pointer to a valid SuperplaneFilterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneFilterTypeFromValue(v string) (*SuperplaneFilterType, error) {
	ev := SuperplaneFilterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneFilterType: valid values are %v", v, AllowedSuperplaneFilterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneFilterType) IsValid() bool {
	for _, existing := range AllowedSuperplaneFilterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneFilterType value
func (v SuperplaneFilterType) Ptr() *SuperplaneFilterType {
	return &v
}

type NullableSuperplaneFilterType struct {
	value *SuperplaneFilterType
	isSet bool
}

func (v NullableSuperplaneFilterType) Get() *SuperplaneFilterType {
	return v.value
}

func (v *NullableSuperplaneFilterType) Set(val *SuperplaneFilterType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneFilterType(val *SuperplaneFilterType) *NullableSuperplaneFilterType {
	return &NullableSuperplaneFilterType{value: val, isSet: true}
}

func (v NullableSuperplaneFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

