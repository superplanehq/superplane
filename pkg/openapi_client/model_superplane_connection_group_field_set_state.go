/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneConnectionGroupFieldSetState the model 'SuperplaneConnectionGroupFieldSetState'
type SuperplaneConnectionGroupFieldSetState string

// List of SuperplaneConnectionGroupFieldSetState
const (
	SUPERPLANECONNECTIONGROUPFIELDSETSTATE_STATE_UNKNOWN SuperplaneConnectionGroupFieldSetState = "STATE_UNKNOWN"
	SUPERPLANECONNECTIONGROUPFIELDSETSTATE_STATE_PENDING SuperplaneConnectionGroupFieldSetState = "STATE_PENDING"
	SUPERPLANECONNECTIONGROUPFIELDSETSTATE_STATE_PROCESSED SuperplaneConnectionGroupFieldSetState = "STATE_PROCESSED"
	SUPERPLANECONNECTIONGROUPFIELDSETSTATE_STATE_DISCARDED SuperplaneConnectionGroupFieldSetState = "STATE_DISCARDED"
)

// All allowed values of SuperplaneConnectionGroupFieldSetState enum
var AllowedSuperplaneConnectionGroupFieldSetStateEnumValues = []SuperplaneConnectionGroupFieldSetState{
	"STATE_UNKNOWN",
	"STATE_PENDING",
	"STATE_PROCESSED",
	"STATE_DISCARDED",
}

func (v *SuperplaneConnectionGroupFieldSetState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneConnectionGroupFieldSetState(value)
	for _, existing := range AllowedSuperplaneConnectionGroupFieldSetStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneConnectionGroupFieldSetState", value)
}

// NewSuperplaneConnectionGroupFieldSetStateFromValue returns a pointer to a valid SuperplaneConnectionGroupFieldSetState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneConnectionGroupFieldSetStateFromValue(v string) (*SuperplaneConnectionGroupFieldSetState, error) {
	ev := SuperplaneConnectionGroupFieldSetState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneConnectionGroupFieldSetState: valid values are %v", v, AllowedSuperplaneConnectionGroupFieldSetStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneConnectionGroupFieldSetState) IsValid() bool {
	for _, existing := range AllowedSuperplaneConnectionGroupFieldSetStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneConnectionGroupFieldSetState value
func (v SuperplaneConnectionGroupFieldSetState) Ptr() *SuperplaneConnectionGroupFieldSetState {
	return &v
}

type NullableSuperplaneConnectionGroupFieldSetState struct {
	value *SuperplaneConnectionGroupFieldSetState
	isSet bool
}

func (v NullableSuperplaneConnectionGroupFieldSetState) Get() *SuperplaneConnectionGroupFieldSetState {
	return v.value
}

func (v *NullableSuperplaneConnectionGroupFieldSetState) Set(val *SuperplaneConnectionGroupFieldSetState) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneConnectionGroupFieldSetState) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneConnectionGroupFieldSetState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneConnectionGroupFieldSetState(val *SuperplaneConnectionGroupFieldSetState) *NullableSuperplaneConnectionGroupFieldSetState {
	return &NullableSuperplaneConnectionGroupFieldSetState{value: val, isSet: true}
}

func (v NullableSuperplaneConnectionGroupFieldSetState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneConnectionGroupFieldSetState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

