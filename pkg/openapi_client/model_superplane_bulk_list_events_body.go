/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the SuperplaneBulkListEventsBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneBulkListEventsBody{}

// SuperplaneBulkListEventsBody struct for SuperplaneBulkListEventsBody
type SuperplaneBulkListEventsBody struct {
	Sources []SuperplaneEventSourceItemRequest `json:"sources,omitempty"`
	LimitPerSource *int32 `json:"limitPerSource,omitempty"`
	Before *time.Time `json:"before,omitempty"`
}

// NewSuperplaneBulkListEventsBody instantiates a new SuperplaneBulkListEventsBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneBulkListEventsBody() *SuperplaneBulkListEventsBody {
	this := SuperplaneBulkListEventsBody{}
	return &this
}

// NewSuperplaneBulkListEventsBodyWithDefaults instantiates a new SuperplaneBulkListEventsBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneBulkListEventsBodyWithDefaults() *SuperplaneBulkListEventsBody {
	this := SuperplaneBulkListEventsBody{}
	return &this
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *SuperplaneBulkListEventsBody) GetSources() []SuperplaneEventSourceItemRequest {
	if o == nil || IsNil(o.Sources) {
		var ret []SuperplaneEventSourceItemRequest
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneBulkListEventsBody) GetSourcesOk() ([]SuperplaneEventSourceItemRequest, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *SuperplaneBulkListEventsBody) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []SuperplaneEventSourceItemRequest and assigns it to the Sources field.
func (o *SuperplaneBulkListEventsBody) SetSources(v []SuperplaneEventSourceItemRequest) {
	o.Sources = v
}

// GetLimitPerSource returns the LimitPerSource field value if set, zero value otherwise.
func (o *SuperplaneBulkListEventsBody) GetLimitPerSource() int32 {
	if o == nil || IsNil(o.LimitPerSource) {
		var ret int32
		return ret
	}
	return *o.LimitPerSource
}

// GetLimitPerSourceOk returns a tuple with the LimitPerSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneBulkListEventsBody) GetLimitPerSourceOk() (*int32, bool) {
	if o == nil || IsNil(o.LimitPerSource) {
		return nil, false
	}
	return o.LimitPerSource, true
}

// HasLimitPerSource returns a boolean if a field has been set.
func (o *SuperplaneBulkListEventsBody) HasLimitPerSource() bool {
	if o != nil && !IsNil(o.LimitPerSource) {
		return true
	}

	return false
}

// SetLimitPerSource gets a reference to the given int32 and assigns it to the LimitPerSource field.
func (o *SuperplaneBulkListEventsBody) SetLimitPerSource(v int32) {
	o.LimitPerSource = &v
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *SuperplaneBulkListEventsBody) GetBefore() time.Time {
	if o == nil || IsNil(o.Before) {
		var ret time.Time
		return ret
	}
	return *o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneBulkListEventsBody) GetBeforeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Before) {
		return nil, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *SuperplaneBulkListEventsBody) HasBefore() bool {
	if o != nil && !IsNil(o.Before) {
		return true
	}

	return false
}

// SetBefore gets a reference to the given time.Time and assigns it to the Before field.
func (o *SuperplaneBulkListEventsBody) SetBefore(v time.Time) {
	o.Before = &v
}

func (o SuperplaneBulkListEventsBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneBulkListEventsBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	if !IsNil(o.LimitPerSource) {
		toSerialize["limitPerSource"] = o.LimitPerSource
	}
	if !IsNil(o.Before) {
		toSerialize["before"] = o.Before
	}
	return toSerialize, nil
}

type NullableSuperplaneBulkListEventsBody struct {
	value *SuperplaneBulkListEventsBody
	isSet bool
}

func (v NullableSuperplaneBulkListEventsBody) Get() *SuperplaneBulkListEventsBody {
	return v.value
}

func (v *NullableSuperplaneBulkListEventsBody) Set(val *SuperplaneBulkListEventsBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneBulkListEventsBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneBulkListEventsBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneBulkListEventsBody(val *SuperplaneBulkListEventsBody) *NullableSuperplaneBulkListEventsBody {
	return &NullableSuperplaneBulkListEventsBody{value: val, isSet: true}
}

func (v NullableSuperplaneBulkListEventsBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneBulkListEventsBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


