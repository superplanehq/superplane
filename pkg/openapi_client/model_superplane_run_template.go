/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneRunTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneRunTemplate{}

// SuperplaneRunTemplate struct for SuperplaneRunTemplate
type SuperplaneRunTemplate struct {
	Type *SuperplaneRunTemplateType `json:"type,omitempty"`
	Semaphore *SuperplaneSemaphoreRunTemplate `json:"semaphore,omitempty"`
}

// NewSuperplaneRunTemplate instantiates a new SuperplaneRunTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneRunTemplate() *SuperplaneRunTemplate {
	this := SuperplaneRunTemplate{}
	var type_ SuperplaneRunTemplateType = SUPERPLANERUNTEMPLATETYPE_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewSuperplaneRunTemplateWithDefaults instantiates a new SuperplaneRunTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneRunTemplateWithDefaults() *SuperplaneRunTemplate {
	this := SuperplaneRunTemplate{}
	var type_ SuperplaneRunTemplateType = SUPERPLANERUNTEMPLATETYPE_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SuperplaneRunTemplate) GetType() SuperplaneRunTemplateType {
	if o == nil || IsNil(o.Type) {
		var ret SuperplaneRunTemplateType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneRunTemplate) GetTypeOk() (*SuperplaneRunTemplateType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SuperplaneRunTemplate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SuperplaneRunTemplateType and assigns it to the Type field.
func (o *SuperplaneRunTemplate) SetType(v SuperplaneRunTemplateType) {
	o.Type = &v
}

// GetSemaphore returns the Semaphore field value if set, zero value otherwise.
func (o *SuperplaneRunTemplate) GetSemaphore() SuperplaneSemaphoreRunTemplate {
	if o == nil || IsNil(o.Semaphore) {
		var ret SuperplaneSemaphoreRunTemplate
		return ret
	}
	return *o.Semaphore
}

// GetSemaphoreOk returns a tuple with the Semaphore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneRunTemplate) GetSemaphoreOk() (*SuperplaneSemaphoreRunTemplate, bool) {
	if o == nil || IsNil(o.Semaphore) {
		return nil, false
	}
	return o.Semaphore, true
}

// HasSemaphore returns a boolean if a field has been set.
func (o *SuperplaneRunTemplate) HasSemaphore() bool {
	if o != nil && !IsNil(o.Semaphore) {
		return true
	}

	return false
}

// SetSemaphore gets a reference to the given SuperplaneSemaphoreRunTemplate and assigns it to the Semaphore field.
func (o *SuperplaneRunTemplate) SetSemaphore(v SuperplaneSemaphoreRunTemplate) {
	o.Semaphore = &v
}

func (o SuperplaneRunTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneRunTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Semaphore) {
		toSerialize["semaphore"] = o.Semaphore
	}
	return toSerialize, nil
}

type NullableSuperplaneRunTemplate struct {
	value *SuperplaneRunTemplate
	isSet bool
}

func (v NullableSuperplaneRunTemplate) Get() *SuperplaneRunTemplate {
	return v.value
}

func (v *NullableSuperplaneRunTemplate) Set(val *SuperplaneRunTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneRunTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneRunTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneRunTemplate(val *SuperplaneRunTemplate) *NullableSuperplaneRunTemplate {
	return &NullableSuperplaneRunTemplate{value: val, isSet: true}
}

func (v NullableSuperplaneRunTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneRunTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


