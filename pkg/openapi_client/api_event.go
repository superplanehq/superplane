/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// EventAPIService EventAPI service
type EventAPIService service

type ApiSuperplaneBulkListEventsRequest struct {
	ctx context.Context
	ApiService *EventAPIService
	canvasIdOrName string
	body *SuperplaneBulkListEventsBody
}

func (r ApiSuperplaneBulkListEventsRequest) Body(body SuperplaneBulkListEventsBody) ApiSuperplaneBulkListEventsRequest {
	r.body = &body
	return r
}

func (r ApiSuperplaneBulkListEventsRequest) Execute() (*SuperplaneBulkListEventsResponse, *http.Response, error) {
	return r.ApiService.SuperplaneBulkListEventsExecute(r)
}

/*
SuperplaneBulkListEvents Bulk list events

Returns events for multiple sources in a single request to optimize loading performance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param canvasIdOrName
 @return ApiSuperplaneBulkListEventsRequest
*/
func (a *EventAPIService) SuperplaneBulkListEvents(ctx context.Context, canvasIdOrName string) ApiSuperplaneBulkListEventsRequest {
	return ApiSuperplaneBulkListEventsRequest{
		ApiService: a,
		ctx: ctx,
		canvasIdOrName: canvasIdOrName,
	}
}

// Execute executes the request
//  @return SuperplaneBulkListEventsResponse
func (a *EventAPIService) SuperplaneBulkListEventsExecute(r ApiSuperplaneBulkListEventsRequest) (*SuperplaneBulkListEventsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuperplaneBulkListEventsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventAPIService.SuperplaneBulkListEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/canvases/{canvasIdOrName}/events/bulk"
	localVarPath = strings.Replace(localVarPath, "{"+"canvasIdOrName"+"}", url.PathEscape(parameterValueToString(r.canvasIdOrName, "canvasIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSuperplaneListEventsRequest struct {
	ctx context.Context
	ApiService *EventAPIService
	canvasIdOrName string
	sourceType *string
	sourceId *string
	limit *int32
	after *time.Time
}

func (r ApiSuperplaneListEventsRequest) SourceType(sourceType string) ApiSuperplaneListEventsRequest {
	r.sourceType = &sourceType
	return r
}

func (r ApiSuperplaneListEventsRequest) SourceId(sourceId string) ApiSuperplaneListEventsRequest {
	r.sourceId = &sourceId
	return r
}

func (r ApiSuperplaneListEventsRequest) Limit(limit int32) ApiSuperplaneListEventsRequest {
	r.limit = &limit
	return r
}

func (r ApiSuperplaneListEventsRequest) After(after time.Time) ApiSuperplaneListEventsRequest {
	r.after = &after
	return r
}

func (r ApiSuperplaneListEventsRequest) Execute() (*SuperplaneListEventsResponse, *http.Response, error) {
	return r.ApiService.SuperplaneListEventsExecute(r)
}

/*
SuperplaneListEvents List events

Returns a list of events with optional filtering by source type and source ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param canvasIdOrName
 @return ApiSuperplaneListEventsRequest
*/
func (a *EventAPIService) SuperplaneListEvents(ctx context.Context, canvasIdOrName string) ApiSuperplaneListEventsRequest {
	return ApiSuperplaneListEventsRequest{
		ApiService: a,
		ctx: ctx,
		canvasIdOrName: canvasIdOrName,
	}
}

// Execute executes the request
//  @return SuperplaneListEventsResponse
func (a *EventAPIService) SuperplaneListEventsExecute(r ApiSuperplaneListEventsRequest) (*SuperplaneListEventsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuperplaneListEventsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventAPIService.SuperplaneListEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/canvases/{canvasIdOrName}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"canvasIdOrName"+"}", url.PathEscape(parameterValueToString(r.canvasIdOrName, "canvasIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sourceType", r.sourceType, "", "")
	} else {
		var defaultValue string = "EVENT_SOURCE_TYPE_UNKNOWN"
		r.sourceType = &defaultValue
	}
	if r.sourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sourceId", r.sourceId, "", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "", "")
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
