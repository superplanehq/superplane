/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneFilter{}

// SuperplaneFilter struct for SuperplaneFilter
type SuperplaneFilter struct {
	Type *SuperplaneFilterType `json:"type,omitempty"`
	Data *SuperplaneDataFilter `json:"data,omitempty"`
	Header *SuperplaneHeaderFilter `json:"header,omitempty"`
}

// NewSuperplaneFilter instantiates a new SuperplaneFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneFilter() *SuperplaneFilter {
	this := SuperplaneFilter{}
	var type_ SuperplaneFilterType = SUPERPLANEFILTERTYPE_FILTER_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewSuperplaneFilterWithDefaults instantiates a new SuperplaneFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneFilterWithDefaults() *SuperplaneFilter {
	this := SuperplaneFilter{}
	var type_ SuperplaneFilterType = SUPERPLANEFILTERTYPE_FILTER_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SuperplaneFilter) GetType() SuperplaneFilterType {
	if o == nil || IsNil(o.Type) {
		var ret SuperplaneFilterType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneFilter) GetTypeOk() (*SuperplaneFilterType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SuperplaneFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SuperplaneFilterType and assigns it to the Type field.
func (o *SuperplaneFilter) SetType(v SuperplaneFilterType) {
	o.Type = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SuperplaneFilter) GetData() SuperplaneDataFilter {
	if o == nil || IsNil(o.Data) {
		var ret SuperplaneDataFilter
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneFilter) GetDataOk() (*SuperplaneDataFilter, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SuperplaneFilter) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given SuperplaneDataFilter and assigns it to the Data field.
func (o *SuperplaneFilter) SetData(v SuperplaneDataFilter) {
	o.Data = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *SuperplaneFilter) GetHeader() SuperplaneHeaderFilter {
	if o == nil || IsNil(o.Header) {
		var ret SuperplaneHeaderFilter
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneFilter) GetHeaderOk() (*SuperplaneHeaderFilter, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *SuperplaneFilter) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given SuperplaneHeaderFilter and assigns it to the Header field.
func (o *SuperplaneFilter) SetHeader(v SuperplaneHeaderFilter) {
	o.Header = &v
}

func (o SuperplaneFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	return toSerialize, nil
}

type NullableSuperplaneFilter struct {
	value *SuperplaneFilter
	isSet bool
}

func (v NullableSuperplaneFilter) Get() *SuperplaneFilter {
	return v.value
}

func (v *NullableSuperplaneFilter) Set(val *SuperplaneFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneFilter(val *SuperplaneFilter) *NullableSuperplaneFilter {
	return &NullableSuperplaneFilter{value: val, isSet: true}
}

func (v NullableSuperplaneFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


