/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneIntegrationType the model 'SuperplaneIntegrationType'
type SuperplaneIntegrationType string

// List of SuperplaneIntegrationType
const (
	SUPERPLANEINTEGRATIONTYPE_TYPE_NONE SuperplaneIntegrationType = "TYPE_NONE"
	SUPERPLANEINTEGRATIONTYPE_TYPE_SEMAPHORE SuperplaneIntegrationType = "TYPE_SEMAPHORE"
	SUPERPLANEINTEGRATIONTYPE_TYPE_GITHUB SuperplaneIntegrationType = "TYPE_GITHUB"
)

// All allowed values of SuperplaneIntegrationType enum
var AllowedSuperplaneIntegrationTypeEnumValues = []SuperplaneIntegrationType{
	"TYPE_NONE",
	"TYPE_SEMAPHORE",
	"TYPE_GITHUB",
}

func (v *SuperplaneIntegrationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneIntegrationType(value)
	for _, existing := range AllowedSuperplaneIntegrationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneIntegrationType", value)
}

// NewSuperplaneIntegrationTypeFromValue returns a pointer to a valid SuperplaneIntegrationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneIntegrationTypeFromValue(v string) (*SuperplaneIntegrationType, error) {
	ev := SuperplaneIntegrationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneIntegrationType: valid values are %v", v, AllowedSuperplaneIntegrationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneIntegrationType) IsValid() bool {
	for _, existing := range AllowedSuperplaneIntegrationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneIntegrationType value
func (v SuperplaneIntegrationType) Ptr() *SuperplaneIntegrationType {
	return &v
}

type NullableSuperplaneIntegrationType struct {
	value *SuperplaneIntegrationType
	isSet bool
}

func (v NullableSuperplaneIntegrationType) Get() *SuperplaneIntegrationType {
	return v.value
}

func (v *NullableSuperplaneIntegrationType) Set(val *SuperplaneIntegrationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneIntegrationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneIntegrationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneIntegrationType(val *SuperplaneIntegrationType) *NullableSuperplaneIntegrationType {
	return &NullableSuperplaneIntegrationType{value: val, isSet: true}
}

func (v NullableSuperplaneIntegrationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneIntegrationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

