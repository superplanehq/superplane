/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneWorkflowNodeRefType the model 'SuperplaneWorkflowNodeRefType'
type SuperplaneWorkflowNodeRefType string

// List of SuperplaneWorkflowNodeRefType
const (
	SUPERPLANEWORKFLOWNODEREFTYPE_REF_TYPE_PRIMITIVE SuperplaneWorkflowNodeRefType = "REF_TYPE_PRIMITIVE"
	SUPERPLANEWORKFLOWNODEREFTYPE_REF_TYPE_BLUEPRINT SuperplaneWorkflowNodeRefType = "REF_TYPE_BLUEPRINT"
)

// All allowed values of SuperplaneWorkflowNodeRefType enum
var AllowedSuperplaneWorkflowNodeRefTypeEnumValues = []SuperplaneWorkflowNodeRefType{
	"REF_TYPE_PRIMITIVE",
	"REF_TYPE_BLUEPRINT",
}

func (v *SuperplaneWorkflowNodeRefType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneWorkflowNodeRefType(value)
	for _, existing := range AllowedSuperplaneWorkflowNodeRefTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneWorkflowNodeRefType", value)
}

// NewSuperplaneWorkflowNodeRefTypeFromValue returns a pointer to a valid SuperplaneWorkflowNodeRefType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneWorkflowNodeRefTypeFromValue(v string) (*SuperplaneWorkflowNodeRefType, error) {
	ev := SuperplaneWorkflowNodeRefType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneWorkflowNodeRefType: valid values are %v", v, AllowedSuperplaneWorkflowNodeRefTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneWorkflowNodeRefType) IsValid() bool {
	for _, existing := range AllowedSuperplaneWorkflowNodeRefTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneWorkflowNodeRefType value
func (v SuperplaneWorkflowNodeRefType) Ptr() *SuperplaneWorkflowNodeRefType {
	return &v
}

type NullableSuperplaneWorkflowNodeRefType struct {
	value *SuperplaneWorkflowNodeRefType
	isSet bool
}

func (v NullableSuperplaneWorkflowNodeRefType) Get() *SuperplaneWorkflowNodeRefType {
	return v.value
}

func (v *NullableSuperplaneWorkflowNodeRefType) Set(val *SuperplaneWorkflowNodeRefType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneWorkflowNodeRefType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneWorkflowNodeRefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneWorkflowNodeRefType(val *SuperplaneWorkflowNodeRefType) *NullableSuperplaneWorkflowNodeRefType {
	return &NullableSuperplaneWorkflowNodeRefType{value: val, isSet: true}
}

func (v NullableSuperplaneWorkflowNodeRefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneWorkflowNodeRefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

