/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneValueFrom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneValueFrom{}

// SuperplaneValueFrom struct for SuperplaneValueFrom
type SuperplaneValueFrom struct {
	EventData *SuperplaneValueFromEventData `json:"eventData,omitempty"`
	LastExecution *SuperplaneValueFromLastExecution `json:"lastExecution,omitempty"`
	Secret *SuperplaneValueFromSecret `json:"secret,omitempty"`
}

// NewSuperplaneValueFrom instantiates a new SuperplaneValueFrom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneValueFrom() *SuperplaneValueFrom {
	this := SuperplaneValueFrom{}
	return &this
}

// NewSuperplaneValueFromWithDefaults instantiates a new SuperplaneValueFrom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneValueFromWithDefaults() *SuperplaneValueFrom {
	this := SuperplaneValueFrom{}
	return &this
}

// GetEventData returns the EventData field value if set, zero value otherwise.
func (o *SuperplaneValueFrom) GetEventData() SuperplaneValueFromEventData {
	if o == nil || IsNil(o.EventData) {
		var ret SuperplaneValueFromEventData
		return ret
	}
	return *o.EventData
}

// GetEventDataOk returns a tuple with the EventData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneValueFrom) GetEventDataOk() (*SuperplaneValueFromEventData, bool) {
	if o == nil || IsNil(o.EventData) {
		return nil, false
	}
	return o.EventData, true
}

// HasEventData returns a boolean if a field has been set.
func (o *SuperplaneValueFrom) HasEventData() bool {
	if o != nil && !IsNil(o.EventData) {
		return true
	}

	return false
}

// SetEventData gets a reference to the given SuperplaneValueFromEventData and assigns it to the EventData field.
func (o *SuperplaneValueFrom) SetEventData(v SuperplaneValueFromEventData) {
	o.EventData = &v
}

// GetLastExecution returns the LastExecution field value if set, zero value otherwise.
func (o *SuperplaneValueFrom) GetLastExecution() SuperplaneValueFromLastExecution {
	if o == nil || IsNil(o.LastExecution) {
		var ret SuperplaneValueFromLastExecution
		return ret
	}
	return *o.LastExecution
}

// GetLastExecutionOk returns a tuple with the LastExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneValueFrom) GetLastExecutionOk() (*SuperplaneValueFromLastExecution, bool) {
	if o == nil || IsNil(o.LastExecution) {
		return nil, false
	}
	return o.LastExecution, true
}

// HasLastExecution returns a boolean if a field has been set.
func (o *SuperplaneValueFrom) HasLastExecution() bool {
	if o != nil && !IsNil(o.LastExecution) {
		return true
	}

	return false
}

// SetLastExecution gets a reference to the given SuperplaneValueFromLastExecution and assigns it to the LastExecution field.
func (o *SuperplaneValueFrom) SetLastExecution(v SuperplaneValueFromLastExecution) {
	o.LastExecution = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *SuperplaneValueFrom) GetSecret() SuperplaneValueFromSecret {
	if o == nil || IsNil(o.Secret) {
		var ret SuperplaneValueFromSecret
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneValueFrom) GetSecretOk() (*SuperplaneValueFromSecret, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *SuperplaneValueFrom) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given SuperplaneValueFromSecret and assigns it to the Secret field.
func (o *SuperplaneValueFrom) SetSecret(v SuperplaneValueFromSecret) {
	o.Secret = &v
}

func (o SuperplaneValueFrom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneValueFrom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventData) {
		toSerialize["eventData"] = o.EventData
	}
	if !IsNil(o.LastExecution) {
		toSerialize["lastExecution"] = o.LastExecution
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableSuperplaneValueFrom struct {
	value *SuperplaneValueFrom
	isSet bool
}

func (v NullableSuperplaneValueFrom) Get() *SuperplaneValueFrom {
	return v.value
}

func (v *NullableSuperplaneValueFrom) Set(val *SuperplaneValueFrom) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneValueFrom) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneValueFrom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneValueFrom(val *SuperplaneValueFrom) *NullableSuperplaneValueFrom {
	return &NullableSuperplaneValueFrom{value: val, isSet: true}
}

func (v NullableSuperplaneValueFrom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneValueFrom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


