/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneEventSourceType the model 'SuperplaneEventSourceType'
type SuperplaneEventSourceType string

// List of SuperplaneEventSourceType
const (
	SUPERPLANEEVENTSOURCETYPE_EVENT_SOURCE_TYPE_UNKNOWN SuperplaneEventSourceType = "EVENT_SOURCE_TYPE_UNKNOWN"
	SUPERPLANEEVENTSOURCETYPE_EVENT_SOURCE_TYPE_EVENT_SOURCE SuperplaneEventSourceType = "EVENT_SOURCE_TYPE_EVENT_SOURCE"
	SUPERPLANEEVENTSOURCETYPE_EVENT_SOURCE_TYPE_STAGE SuperplaneEventSourceType = "EVENT_SOURCE_TYPE_STAGE"
	SUPERPLANEEVENTSOURCETYPE_EVENT_SOURCE_TYPE_CONNECTION_GROUP SuperplaneEventSourceType = "EVENT_SOURCE_TYPE_CONNECTION_GROUP"
)

// All allowed values of SuperplaneEventSourceType enum
var AllowedSuperplaneEventSourceTypeEnumValues = []SuperplaneEventSourceType{
	"EVENT_SOURCE_TYPE_UNKNOWN",
	"EVENT_SOURCE_TYPE_EVENT_SOURCE",
	"EVENT_SOURCE_TYPE_STAGE",
	"EVENT_SOURCE_TYPE_CONNECTION_GROUP",
}

func (v *SuperplaneEventSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneEventSourceType(value)
	for _, existing := range AllowedSuperplaneEventSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneEventSourceType", value)
}

// NewSuperplaneEventSourceTypeFromValue returns a pointer to a valid SuperplaneEventSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneEventSourceTypeFromValue(v string) (*SuperplaneEventSourceType, error) {
	ev := SuperplaneEventSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneEventSourceType: valid values are %v", v, AllowedSuperplaneEventSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneEventSourceType) IsValid() bool {
	for _, existing := range AllowedSuperplaneEventSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneEventSourceType value
func (v SuperplaneEventSourceType) Ptr() *SuperplaneEventSourceType {
	return &v
}

type NullableSuperplaneEventSourceType struct {
	value *SuperplaneEventSourceType
	isSet bool
}

func (v NullableSuperplaneEventSourceType) Get() *SuperplaneEventSourceType {
	return v.value
}

func (v *NullableSuperplaneEventSourceType) Set(val *SuperplaneEventSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEventSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEventSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEventSourceType(val *SuperplaneEventSourceType) *NullableSuperplaneEventSourceType {
	return &NullableSuperplaneEventSourceType{value: val, isSet: true}
}

func (v NullableSuperplaneEventSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEventSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

