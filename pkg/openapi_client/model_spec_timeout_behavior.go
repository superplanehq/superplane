/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SpecTimeoutBehavior the model 'SpecTimeoutBehavior'
type SpecTimeoutBehavior string

// List of SpecTimeoutBehavior
const (
	SPECTIMEOUTBEHAVIOR_TIMEOUT_BEHAVIOR_NONE SpecTimeoutBehavior = "TIMEOUT_BEHAVIOR_NONE"
	SPECTIMEOUTBEHAVIOR_TIMEOUT_BEHAVIOR_DROP SpecTimeoutBehavior = "TIMEOUT_BEHAVIOR_DROP"
	SPECTIMEOUTBEHAVIOR_TIMEOUT_BEHAVIOR_EMIT SpecTimeoutBehavior = "TIMEOUT_BEHAVIOR_EMIT"
)

// All allowed values of SpecTimeoutBehavior enum
var AllowedSpecTimeoutBehaviorEnumValues = []SpecTimeoutBehavior{
	"TIMEOUT_BEHAVIOR_NONE",
	"TIMEOUT_BEHAVIOR_DROP",
	"TIMEOUT_BEHAVIOR_EMIT",
}

func (v *SpecTimeoutBehavior) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpecTimeoutBehavior(value)
	for _, existing := range AllowedSpecTimeoutBehaviorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpecTimeoutBehavior", value)
}

// NewSpecTimeoutBehaviorFromValue returns a pointer to a valid SpecTimeoutBehavior
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpecTimeoutBehaviorFromValue(v string) (*SpecTimeoutBehavior, error) {
	ev := SpecTimeoutBehavior(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpecTimeoutBehavior: valid values are %v", v, AllowedSpecTimeoutBehaviorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpecTimeoutBehavior) IsValid() bool {
	for _, existing := range AllowedSpecTimeoutBehaviorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpecTimeoutBehavior value
func (v SpecTimeoutBehavior) Ptr() *SpecTimeoutBehavior {
	return &v
}

type NullableSpecTimeoutBehavior struct {
	value *SpecTimeoutBehavior
	isSet bool
}

func (v NullableSpecTimeoutBehavior) Get() *SpecTimeoutBehavior {
	return v.value
}

func (v *NullableSpecTimeoutBehavior) Set(val *SpecTimeoutBehavior) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecTimeoutBehavior) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecTimeoutBehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecTimeoutBehavior(val *SpecTimeoutBehavior) *NullableSpecTimeoutBehavior {
	return &NullableSpecTimeoutBehavior{value: val, isSet: true}
}

func (v NullableSpecTimeoutBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecTimeoutBehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

