/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// BlueprintsBlueprintNodeRefType the model 'BlueprintsBlueprintNodeRefType'
type BlueprintsBlueprintNodeRefType string

// List of BlueprintsBlueprintNodeRefType
const (
	BLUEPRINTSBLUEPRINTNODEREFTYPE_REF_TYPE_COMPONENT BlueprintsBlueprintNodeRefType = "REF_TYPE_COMPONENT"
)

// All allowed values of BlueprintsBlueprintNodeRefType enum
var AllowedBlueprintsBlueprintNodeRefTypeEnumValues = []BlueprintsBlueprintNodeRefType{
	"REF_TYPE_COMPONENT",
}

func (v *BlueprintsBlueprintNodeRefType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlueprintsBlueprintNodeRefType(value)
	for _, existing := range AllowedBlueprintsBlueprintNodeRefTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlueprintsBlueprintNodeRefType", value)
}

// NewBlueprintsBlueprintNodeRefTypeFromValue returns a pointer to a valid BlueprintsBlueprintNodeRefType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlueprintsBlueprintNodeRefTypeFromValue(v string) (*BlueprintsBlueprintNodeRefType, error) {
	ev := BlueprintsBlueprintNodeRefType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlueprintsBlueprintNodeRefType: valid values are %v", v, AllowedBlueprintsBlueprintNodeRefTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlueprintsBlueprintNodeRefType) IsValid() bool {
	for _, existing := range AllowedBlueprintsBlueprintNodeRefTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BlueprintsBlueprintNodeRefType value
func (v BlueprintsBlueprintNodeRefType) Ptr() *BlueprintsBlueprintNodeRefType {
	return &v
}

type NullableBlueprintsBlueprintNodeRefType struct {
	value *BlueprintsBlueprintNodeRefType
	isSet bool
}

func (v NullableBlueprintsBlueprintNodeRefType) Get() *BlueprintsBlueprintNodeRefType {
	return v.value
}

func (v *NullableBlueprintsBlueprintNodeRefType) Set(val *BlueprintsBlueprintNodeRefType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintsBlueprintNodeRefType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintsBlueprintNodeRefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintsBlueprintNodeRefType(val *BlueprintsBlueprintNodeRefType) *NullableBlueprintsBlueprintNodeRefType {
	return &NullableBlueprintsBlueprintNodeRefType{value: val, isSet: true}
}

func (v NullableBlueprintsBlueprintNodeRefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintsBlueprintNodeRefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

