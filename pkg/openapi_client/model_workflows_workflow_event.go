/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the WorkflowsWorkflowEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowsWorkflowEvent{}

// WorkflowsWorkflowEvent struct for WorkflowsWorkflowEvent
type WorkflowsWorkflowEvent struct {
	Id *string `json:"id,omitempty"`
	WorkflowId *string `json:"workflowId,omitempty"`
	ParentEventId *string `json:"parentEventId,omitempty"`
	BlueprintName *string `json:"blueprintName,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
	State *string `json:"state,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewWorkflowsWorkflowEvent instantiates a new WorkflowsWorkflowEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowsWorkflowEvent() *WorkflowsWorkflowEvent {
	this := WorkflowsWorkflowEvent{}
	return &this
}

// NewWorkflowsWorkflowEventWithDefaults instantiates a new WorkflowsWorkflowEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowsWorkflowEventWithDefaults() *WorkflowsWorkflowEvent {
	this := WorkflowsWorkflowEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowsWorkflowEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowsWorkflowEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowsWorkflowEvent) SetId(v string) {
	o.Id = &v
}

// GetWorkflowId returns the WorkflowId field value if set, zero value otherwise.
func (o *WorkflowsWorkflowEvent) GetWorkflowId() string {
	if o == nil || IsNil(o.WorkflowId) {
		var ret string
		return ret
	}
	return *o.WorkflowId
}

// GetWorkflowIdOk returns a tuple with the WorkflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowEvent) GetWorkflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkflowId) {
		return nil, false
	}
	return o.WorkflowId, true
}

// HasWorkflowId returns a boolean if a field has been set.
func (o *WorkflowsWorkflowEvent) HasWorkflowId() bool {
	if o != nil && !IsNil(o.WorkflowId) {
		return true
	}

	return false
}

// SetWorkflowId gets a reference to the given string and assigns it to the WorkflowId field.
func (o *WorkflowsWorkflowEvent) SetWorkflowId(v string) {
	o.WorkflowId = &v
}

// GetParentEventId returns the ParentEventId field value if set, zero value otherwise.
func (o *WorkflowsWorkflowEvent) GetParentEventId() string {
	if o == nil || IsNil(o.ParentEventId) {
		var ret string
		return ret
	}
	return *o.ParentEventId
}

// GetParentEventIdOk returns a tuple with the ParentEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowEvent) GetParentEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentEventId) {
		return nil, false
	}
	return o.ParentEventId, true
}

// HasParentEventId returns a boolean if a field has been set.
func (o *WorkflowsWorkflowEvent) HasParentEventId() bool {
	if o != nil && !IsNil(o.ParentEventId) {
		return true
	}

	return false
}

// SetParentEventId gets a reference to the given string and assigns it to the ParentEventId field.
func (o *WorkflowsWorkflowEvent) SetParentEventId(v string) {
	o.ParentEventId = &v
}

// GetBlueprintName returns the BlueprintName field value if set, zero value otherwise.
func (o *WorkflowsWorkflowEvent) GetBlueprintName() string {
	if o == nil || IsNil(o.BlueprintName) {
		var ret string
		return ret
	}
	return *o.BlueprintName
}

// GetBlueprintNameOk returns a tuple with the BlueprintName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowEvent) GetBlueprintNameOk() (*string, bool) {
	if o == nil || IsNil(o.BlueprintName) {
		return nil, false
	}
	return o.BlueprintName, true
}

// HasBlueprintName returns a boolean if a field has been set.
func (o *WorkflowsWorkflowEvent) HasBlueprintName() bool {
	if o != nil && !IsNil(o.BlueprintName) {
		return true
	}

	return false
}

// SetBlueprintName gets a reference to the given string and assigns it to the BlueprintName field.
func (o *WorkflowsWorkflowEvent) SetBlueprintName(v string) {
	o.BlueprintName = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *WorkflowsWorkflowEvent) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowEvent) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *WorkflowsWorkflowEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *WorkflowsWorkflowEvent) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *WorkflowsWorkflowEvent) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowEvent) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *WorkflowsWorkflowEvent) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *WorkflowsWorkflowEvent) SetState(v string) {
	o.State = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WorkflowsWorkflowEvent) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowEvent) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WorkflowsWorkflowEvent) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *WorkflowsWorkflowEvent) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *WorkflowsWorkflowEvent) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowEvent) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *WorkflowsWorkflowEvent) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *WorkflowsWorkflowEvent) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o WorkflowsWorkflowEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowsWorkflowEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.WorkflowId) {
		toSerialize["workflowId"] = o.WorkflowId
	}
	if !IsNil(o.ParentEventId) {
		toSerialize["parentEventId"] = o.ParentEventId
	}
	if !IsNil(o.BlueprintName) {
		toSerialize["blueprintName"] = o.BlueprintName
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableWorkflowsWorkflowEvent struct {
	value *WorkflowsWorkflowEvent
	isSet bool
}

func (v NullableWorkflowsWorkflowEvent) Get() *WorkflowsWorkflowEvent {
	return v.value
}

func (v *NullableWorkflowsWorkflowEvent) Set(val *WorkflowsWorkflowEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowsWorkflowEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowsWorkflowEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowsWorkflowEvent(val *WorkflowsWorkflowEvent) *NullableWorkflowsWorkflowEvent {
	return &NullableWorkflowsWorkflowEvent{value: val, isSet: true}
}

func (v NullableWorkflowsWorkflowEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowsWorkflowEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


