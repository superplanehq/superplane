/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the SuperplaneEventRejection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneEventRejection{}

// SuperplaneEventRejection struct for SuperplaneEventRejection
type SuperplaneEventRejection struct {
	Id *string `json:"id,omitempty"`
	EventId *string `json:"eventId,omitempty"`
	ComponentType *string `json:"componentType,omitempty"`
	ComponentId *string `json:"componentId,omitempty"`
	ComponentName *string `json:"componentName,omitempty"`
	Reason *EventRejectionRejectionReason `json:"reason,omitempty"`
	Message *string `json:"message,omitempty"`
	RejectedAt *time.Time `json:"rejectedAt,omitempty"`
}

// NewSuperplaneEventRejection instantiates a new SuperplaneEventRejection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneEventRejection() *SuperplaneEventRejection {
	this := SuperplaneEventRejection{}
	var reason EventRejectionRejectionReason = EVENTREJECTIONREJECTIONREASON_REJECTION_REASON_UNKNOWN
	this.Reason = &reason
	return &this
}

// NewSuperplaneEventRejectionWithDefaults instantiates a new SuperplaneEventRejection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneEventRejectionWithDefaults() *SuperplaneEventRejection {
	this := SuperplaneEventRejection{}
	var reason EventRejectionRejectionReason = EVENTREJECTIONREJECTIONREASON_REJECTION_REASON_UNKNOWN
	this.Reason = &reason
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperplaneEventRejection) SetId(v string) {
	o.Id = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *SuperplaneEventRejection) SetEventId(v string) {
	o.EventId = &v
}

// GetComponentType returns the ComponentType field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetComponentType() string {
	if o == nil || IsNil(o.ComponentType) {
		var ret string
		return ret
	}
	return *o.ComponentType
}

// GetComponentTypeOk returns a tuple with the ComponentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetComponentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentType) {
		return nil, false
	}
	return o.ComponentType, true
}

// HasComponentType returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasComponentType() bool {
	if o != nil && !IsNil(o.ComponentType) {
		return true
	}

	return false
}

// SetComponentType gets a reference to the given string and assigns it to the ComponentType field.
func (o *SuperplaneEventRejection) SetComponentType(v string) {
	o.ComponentType = &v
}

// GetComponentId returns the ComponentId field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetComponentId() string {
	if o == nil || IsNil(o.ComponentId) {
		var ret string
		return ret
	}
	return *o.ComponentId
}

// GetComponentIdOk returns a tuple with the ComponentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetComponentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentId) {
		return nil, false
	}
	return o.ComponentId, true
}

// HasComponentId returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasComponentId() bool {
	if o != nil && !IsNil(o.ComponentId) {
		return true
	}

	return false
}

// SetComponentId gets a reference to the given string and assigns it to the ComponentId field.
func (o *SuperplaneEventRejection) SetComponentId(v string) {
	o.ComponentId = &v
}

// GetComponentName returns the ComponentName field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetComponentName() string {
	if o == nil || IsNil(o.ComponentName) {
		var ret string
		return ret
	}
	return *o.ComponentName
}

// GetComponentNameOk returns a tuple with the ComponentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetComponentNameOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentName) {
		return nil, false
	}
	return o.ComponentName, true
}

// HasComponentName returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasComponentName() bool {
	if o != nil && !IsNil(o.ComponentName) {
		return true
	}

	return false
}

// SetComponentName gets a reference to the given string and assigns it to the ComponentName field.
func (o *SuperplaneEventRejection) SetComponentName(v string) {
	o.ComponentName = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetReason() EventRejectionRejectionReason {
	if o == nil || IsNil(o.Reason) {
		var ret EventRejectionRejectionReason
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetReasonOk() (*EventRejectionRejectionReason, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given EventRejectionRejectionReason and assigns it to the Reason field.
func (o *SuperplaneEventRejection) SetReason(v EventRejectionRejectionReason) {
	o.Reason = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SuperplaneEventRejection) SetMessage(v string) {
	o.Message = &v
}

// GetRejectedAt returns the RejectedAt field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetRejectedAt() time.Time {
	if o == nil || IsNil(o.RejectedAt) {
		var ret time.Time
		return ret
	}
	return *o.RejectedAt
}

// GetRejectedAtOk returns a tuple with the RejectedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetRejectedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RejectedAt) {
		return nil, false
	}
	return o.RejectedAt, true
}

// HasRejectedAt returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasRejectedAt() bool {
	if o != nil && !IsNil(o.RejectedAt) {
		return true
	}

	return false
}

// SetRejectedAt gets a reference to the given time.Time and assigns it to the RejectedAt field.
func (o *SuperplaneEventRejection) SetRejectedAt(v time.Time) {
	o.RejectedAt = &v
}

func (o SuperplaneEventRejection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneEventRejection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.ComponentType) {
		toSerialize["componentType"] = o.ComponentType
	}
	if !IsNil(o.ComponentId) {
		toSerialize["componentId"] = o.ComponentId
	}
	if !IsNil(o.ComponentName) {
		toSerialize["componentName"] = o.ComponentName
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.RejectedAt) {
		toSerialize["rejectedAt"] = o.RejectedAt
	}
	return toSerialize, nil
}

type NullableSuperplaneEventRejection struct {
	value *SuperplaneEventRejection
	isSet bool
}

func (v NullableSuperplaneEventRejection) Get() *SuperplaneEventRejection {
	return v.value
}

func (v *NullableSuperplaneEventRejection) Set(val *SuperplaneEventRejection) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEventRejection) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEventRejection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEventRejection(val *SuperplaneEventRejection) *NullableSuperplaneEventRejection {
	return &NullableSuperplaneEventRejection{value: val, isSet: true}
}

func (v NullableSuperplaneEventRejection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEventRejection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


