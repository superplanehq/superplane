/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the SuperplaneEventRejection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneEventRejection{}

// SuperplaneEventRejection struct for SuperplaneEventRejection
type SuperplaneEventRejection struct {
	Id *string `json:"id,omitempty"`
	Event *SuperplaneEvent `json:"event,omitempty"`
	TargetType *SuperplaneConnectionType `json:"targetType,omitempty"`
	TargetId *string `json:"targetId,omitempty"`
	TargetName *string `json:"targetName,omitempty"`
	Reason *EventRejectionRejectionReason `json:"reason,omitempty"`
	Message *string `json:"message,omitempty"`
	RejectedAt *time.Time `json:"rejectedAt,omitempty"`
}

// NewSuperplaneEventRejection instantiates a new SuperplaneEventRejection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneEventRejection() *SuperplaneEventRejection {
	this := SuperplaneEventRejection{}
	var targetType SuperplaneConnectionType = SUPERPLANECONNECTIONTYPE_TYPE_UNKNOWN
	this.TargetType = &targetType
	var reason EventRejectionRejectionReason = EVENTREJECTIONREJECTIONREASON_REJECTION_REASON_UNKNOWN
	this.Reason = &reason
	return &this
}

// NewSuperplaneEventRejectionWithDefaults instantiates a new SuperplaneEventRejection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneEventRejectionWithDefaults() *SuperplaneEventRejection {
	this := SuperplaneEventRejection{}
	var targetType SuperplaneConnectionType = SUPERPLANECONNECTIONTYPE_TYPE_UNKNOWN
	this.TargetType = &targetType
	var reason EventRejectionRejectionReason = EVENTREJECTIONREJECTIONREASON_REJECTION_REASON_UNKNOWN
	this.Reason = &reason
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperplaneEventRejection) SetId(v string) {
	o.Id = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetEvent() SuperplaneEvent {
	if o == nil || IsNil(o.Event) {
		var ret SuperplaneEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetEventOk() (*SuperplaneEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given SuperplaneEvent and assigns it to the Event field.
func (o *SuperplaneEventRejection) SetEvent(v SuperplaneEvent) {
	o.Event = &v
}

// GetTargetType returns the TargetType field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetTargetType() SuperplaneConnectionType {
	if o == nil || IsNil(o.TargetType) {
		var ret SuperplaneConnectionType
		return ret
	}
	return *o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetTargetTypeOk() (*SuperplaneConnectionType, bool) {
	if o == nil || IsNil(o.TargetType) {
		return nil, false
	}
	return o.TargetType, true
}

// HasTargetType returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasTargetType() bool {
	if o != nil && !IsNil(o.TargetType) {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given SuperplaneConnectionType and assigns it to the TargetType field.
func (o *SuperplaneEventRejection) SetTargetType(v SuperplaneConnectionType) {
	o.TargetType = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetTargetId() string {
	if o == nil || IsNil(o.TargetId) {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetTargetIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasTargetId() bool {
	if o != nil && !IsNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *SuperplaneEventRejection) SetTargetId(v string) {
	o.TargetId = &v
}

// GetTargetName returns the TargetName field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetTargetName() string {
	if o == nil || IsNil(o.TargetName) {
		var ret string
		return ret
	}
	return *o.TargetName
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetTargetNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetName) {
		return nil, false
	}
	return o.TargetName, true
}

// HasTargetName returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasTargetName() bool {
	if o != nil && !IsNil(o.TargetName) {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given string and assigns it to the TargetName field.
func (o *SuperplaneEventRejection) SetTargetName(v string) {
	o.TargetName = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetReason() EventRejectionRejectionReason {
	if o == nil || IsNil(o.Reason) {
		var ret EventRejectionRejectionReason
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetReasonOk() (*EventRejectionRejectionReason, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given EventRejectionRejectionReason and assigns it to the Reason field.
func (o *SuperplaneEventRejection) SetReason(v EventRejectionRejectionReason) {
	o.Reason = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SuperplaneEventRejection) SetMessage(v string) {
	o.Message = &v
}

// GetRejectedAt returns the RejectedAt field value if set, zero value otherwise.
func (o *SuperplaneEventRejection) GetRejectedAt() time.Time {
	if o == nil || IsNil(o.RejectedAt) {
		var ret time.Time
		return ret
	}
	return *o.RejectedAt
}

// GetRejectedAtOk returns a tuple with the RejectedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventRejection) GetRejectedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RejectedAt) {
		return nil, false
	}
	return o.RejectedAt, true
}

// HasRejectedAt returns a boolean if a field has been set.
func (o *SuperplaneEventRejection) HasRejectedAt() bool {
	if o != nil && !IsNil(o.RejectedAt) {
		return true
	}

	return false
}

// SetRejectedAt gets a reference to the given time.Time and assigns it to the RejectedAt field.
func (o *SuperplaneEventRejection) SetRejectedAt(v time.Time) {
	o.RejectedAt = &v
}

func (o SuperplaneEventRejection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneEventRejection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.TargetType) {
		toSerialize["targetType"] = o.TargetType
	}
	if !IsNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	if !IsNil(o.TargetName) {
		toSerialize["targetName"] = o.TargetName
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.RejectedAt) {
		toSerialize["rejectedAt"] = o.RejectedAt
	}
	return toSerialize, nil
}

type NullableSuperplaneEventRejection struct {
	value *SuperplaneEventRejection
	isSet bool
}

func (v NullableSuperplaneEventRejection) Get() *SuperplaneEventRejection {
	return v.value
}

func (v *NullableSuperplaneEventRejection) Set(val *SuperplaneEventRejection) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEventRejection) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEventRejection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEventRejection(val *SuperplaneEventRejection) *NullableSuperplaneEventRejection {
	return &NullableSuperplaneEventRejection{value: val, isSet: true}
}

func (v NullableSuperplaneEventRejection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEventRejection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


