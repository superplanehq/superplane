/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneUsersUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneUsersUser{}

// SuperplaneUsersUser struct for SuperplaneUsersUser
type SuperplaneUsersUser struct {
	Metadata *UsersUserMetadata `json:"metadata,omitempty"`
	Spec *UsersUserSpec `json:"spec,omitempty"`
	Status *UsersUserStatus `json:"status,omitempty"`
}

// NewSuperplaneUsersUser instantiates a new SuperplaneUsersUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneUsersUser() *SuperplaneUsersUser {
	this := SuperplaneUsersUser{}
	return &this
}

// NewSuperplaneUsersUserWithDefaults instantiates a new SuperplaneUsersUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneUsersUserWithDefaults() *SuperplaneUsersUser {
	this := SuperplaneUsersUser{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SuperplaneUsersUser) GetMetadata() UsersUserMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret UsersUserMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneUsersUser) GetMetadataOk() (*UsersUserMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SuperplaneUsersUser) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given UsersUserMetadata and assigns it to the Metadata field.
func (o *SuperplaneUsersUser) SetMetadata(v UsersUserMetadata) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *SuperplaneUsersUser) GetSpec() UsersUserSpec {
	if o == nil || IsNil(o.Spec) {
		var ret UsersUserSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneUsersUser) GetSpecOk() (*UsersUserSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *SuperplaneUsersUser) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given UsersUserSpec and assigns it to the Spec field.
func (o *SuperplaneUsersUser) SetSpec(v UsersUserSpec) {
	o.Spec = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SuperplaneUsersUser) GetStatus() UsersUserStatus {
	if o == nil || IsNil(o.Status) {
		var ret UsersUserStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneUsersUser) GetStatusOk() (*UsersUserStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SuperplaneUsersUser) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given UsersUserStatus and assigns it to the Status field.
func (o *SuperplaneUsersUser) SetStatus(v UsersUserStatus) {
	o.Status = &v
}

func (o SuperplaneUsersUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneUsersUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableSuperplaneUsersUser struct {
	value *SuperplaneUsersUser
	isSet bool
}

func (v NullableSuperplaneUsersUser) Get() *SuperplaneUsersUser {
	return v.value
}

func (v *NullableSuperplaneUsersUser) Set(val *SuperplaneUsersUser) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneUsersUser) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneUsersUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneUsersUser(val *SuperplaneUsersUser) *NullableSuperplaneUsersUser {
	return &NullableSuperplaneUsersUser{value: val, isSet: true}
}

func (v NullableSuperplaneUsersUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneUsersUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


