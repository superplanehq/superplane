/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneWorkflowNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneWorkflowNode{}

// SuperplaneWorkflowNode struct for SuperplaneWorkflowNode
type SuperplaneWorkflowNode struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	RefType *SuperplaneWorkflowNodeRefType `json:"refType,omitempty"`
	Primitive *SuperplaneWorkflowNodePrimitiveRef `json:"primitive,omitempty"`
	Blueprint *WorkflowNodeBlueprintRef `json:"blueprint,omitempty"`
}

// NewSuperplaneWorkflowNode instantiates a new SuperplaneWorkflowNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneWorkflowNode() *SuperplaneWorkflowNode {
	this := SuperplaneWorkflowNode{}
	var refType SuperplaneWorkflowNodeRefType = SUPERPLANEWORKFLOWNODEREFTYPE_REF_TYPE_PRIMITIVE
	this.RefType = &refType
	return &this
}

// NewSuperplaneWorkflowNodeWithDefaults instantiates a new SuperplaneWorkflowNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneWorkflowNodeWithDefaults() *SuperplaneWorkflowNode {
	this := SuperplaneWorkflowNode{}
	var refType SuperplaneWorkflowNodeRefType = SUPERPLANEWORKFLOWNODEREFTYPE_REF_TYPE_PRIMITIVE
	this.RefType = &refType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNode) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNode) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNode) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperplaneWorkflowNode) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNode) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNode) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNode) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SuperplaneWorkflowNode) SetName(v string) {
	o.Name = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNode) GetRefType() SuperplaneWorkflowNodeRefType {
	if o == nil || IsNil(o.RefType) {
		var ret SuperplaneWorkflowNodeRefType
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNode) GetRefTypeOk() (*SuperplaneWorkflowNodeRefType, bool) {
	if o == nil || IsNil(o.RefType) {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNode) HasRefType() bool {
	if o != nil && !IsNil(o.RefType) {
		return true
	}

	return false
}

// SetRefType gets a reference to the given SuperplaneWorkflowNodeRefType and assigns it to the RefType field.
func (o *SuperplaneWorkflowNode) SetRefType(v SuperplaneWorkflowNodeRefType) {
	o.RefType = &v
}

// GetPrimitive returns the Primitive field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNode) GetPrimitive() SuperplaneWorkflowNodePrimitiveRef {
	if o == nil || IsNil(o.Primitive) {
		var ret SuperplaneWorkflowNodePrimitiveRef
		return ret
	}
	return *o.Primitive
}

// GetPrimitiveOk returns a tuple with the Primitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNode) GetPrimitiveOk() (*SuperplaneWorkflowNodePrimitiveRef, bool) {
	if o == nil || IsNil(o.Primitive) {
		return nil, false
	}
	return o.Primitive, true
}

// HasPrimitive returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNode) HasPrimitive() bool {
	if o != nil && !IsNil(o.Primitive) {
		return true
	}

	return false
}

// SetPrimitive gets a reference to the given SuperplaneWorkflowNodePrimitiveRef and assigns it to the Primitive field.
func (o *SuperplaneWorkflowNode) SetPrimitive(v SuperplaneWorkflowNodePrimitiveRef) {
	o.Primitive = &v
}

// GetBlueprint returns the Blueprint field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNode) GetBlueprint() WorkflowNodeBlueprintRef {
	if o == nil || IsNil(o.Blueprint) {
		var ret WorkflowNodeBlueprintRef
		return ret
	}
	return *o.Blueprint
}

// GetBlueprintOk returns a tuple with the Blueprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNode) GetBlueprintOk() (*WorkflowNodeBlueprintRef, bool) {
	if o == nil || IsNil(o.Blueprint) {
		return nil, false
	}
	return o.Blueprint, true
}

// HasBlueprint returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNode) HasBlueprint() bool {
	if o != nil && !IsNil(o.Blueprint) {
		return true
	}

	return false
}

// SetBlueprint gets a reference to the given WorkflowNodeBlueprintRef and assigns it to the Blueprint field.
func (o *SuperplaneWorkflowNode) SetBlueprint(v WorkflowNodeBlueprintRef) {
	o.Blueprint = &v
}

func (o SuperplaneWorkflowNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneWorkflowNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RefType) {
		toSerialize["refType"] = o.RefType
	}
	if !IsNil(o.Primitive) {
		toSerialize["primitive"] = o.Primitive
	}
	if !IsNil(o.Blueprint) {
		toSerialize["blueprint"] = o.Blueprint
	}
	return toSerialize, nil
}

type NullableSuperplaneWorkflowNode struct {
	value *SuperplaneWorkflowNode
	isSet bool
}

func (v NullableSuperplaneWorkflowNode) Get() *SuperplaneWorkflowNode {
	return v.value
}

func (v *NullableSuperplaneWorkflowNode) Set(val *SuperplaneWorkflowNode) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneWorkflowNode) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneWorkflowNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneWorkflowNode(val *SuperplaneWorkflowNode) *NullableSuperplaneWorkflowNode {
	return &NullableSuperplaneWorkflowNode{value: val, isSet: true}
}

func (v NullableSuperplaneWorkflowNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneWorkflowNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


