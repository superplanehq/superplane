/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SecretProvider the model 'SecretProvider'
type SecretProvider string

// List of SecretProvider
const (
	SECRETPROVIDER_PROVIDER_UNKNOWN SecretProvider = "PROVIDER_UNKNOWN"
	SECRETPROVIDER_PROVIDER_LOCAL SecretProvider = "PROVIDER_LOCAL"
)

// All allowed values of SecretProvider enum
var AllowedSecretProviderEnumValues = []SecretProvider{
	"PROVIDER_UNKNOWN",
	"PROVIDER_LOCAL",
}

func (v *SecretProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecretProvider(value)
	for _, existing := range AllowedSecretProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecretProvider", value)
}

// NewSecretProviderFromValue returns a pointer to a valid SecretProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecretProviderFromValue(v string) (*SecretProvider, error) {
	ev := SecretProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecretProvider: valid values are %v", v, AllowedSecretProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecretProvider) IsValid() bool {
	for _, existing := range AllowedSecretProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecretProvider value
func (v SecretProvider) Ptr() *SecretProvider {
	return &v
}

type NullableSecretProvider struct {
	value *SecretProvider
	isSet bool
}

func (v NullableSecretProvider) Get() *SecretProvider {
	return v.value
}

func (v *NullableSecretProvider) Set(val *SecretProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretProvider(val *SecretProvider) *NullableSecretProvider {
	return &NullableSecretProvider{value: val, isSet: true}
}

func (v NullableSecretProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

