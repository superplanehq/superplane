/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneInputMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneInputMapping{}

// SuperplaneInputMapping struct for SuperplaneInputMapping
type SuperplaneInputMapping struct {
	Values []InputMappingValueDefinition `json:"values,omitempty"`
	When *InputMappingWhen `json:"when,omitempty"`
}

// NewSuperplaneInputMapping instantiates a new SuperplaneInputMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneInputMapping() *SuperplaneInputMapping {
	this := SuperplaneInputMapping{}
	return &this
}

// NewSuperplaneInputMappingWithDefaults instantiates a new SuperplaneInputMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneInputMappingWithDefaults() *SuperplaneInputMapping {
	this := SuperplaneInputMapping{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *SuperplaneInputMapping) GetValues() []InputMappingValueDefinition {
	if o == nil || IsNil(o.Values) {
		var ret []InputMappingValueDefinition
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneInputMapping) GetValuesOk() ([]InputMappingValueDefinition, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *SuperplaneInputMapping) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []InputMappingValueDefinition and assigns it to the Values field.
func (o *SuperplaneInputMapping) SetValues(v []InputMappingValueDefinition) {
	o.Values = v
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *SuperplaneInputMapping) GetWhen() InputMappingWhen {
	if o == nil || IsNil(o.When) {
		var ret InputMappingWhen
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneInputMapping) GetWhenOk() (*InputMappingWhen, bool) {
	if o == nil || IsNil(o.When) {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *SuperplaneInputMapping) HasWhen() bool {
	if o != nil && !IsNil(o.When) {
		return true
	}

	return false
}

// SetWhen gets a reference to the given InputMappingWhen and assigns it to the When field.
func (o *SuperplaneInputMapping) SetWhen(v InputMappingWhen) {
	o.When = &v
}

func (o SuperplaneInputMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneInputMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.When) {
		toSerialize["when"] = o.When
	}
	return toSerialize, nil
}

type NullableSuperplaneInputMapping struct {
	value *SuperplaneInputMapping
	isSet bool
}

func (v NullableSuperplaneInputMapping) Get() *SuperplaneInputMapping {
	return v.value
}

func (v *NullableSuperplaneInputMapping) Set(val *SuperplaneInputMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneInputMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneInputMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneInputMapping(val *SuperplaneInputMapping) *NullableSuperplaneInputMapping {
	return &NullableSuperplaneInputMapping{value: val, isSet: true}
}

func (v NullableSuperplaneInputMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneInputMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


