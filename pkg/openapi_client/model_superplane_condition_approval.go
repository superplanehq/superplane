/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneConditionApproval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneConditionApproval{}

// SuperplaneConditionApproval struct for SuperplaneConditionApproval
type SuperplaneConditionApproval struct {
	Count *int64 `json:"count,omitempty"`
	RequiredFrom []SuperplaneApprovalRequirement `json:"requiredFrom,omitempty"`
}

// NewSuperplaneConditionApproval instantiates a new SuperplaneConditionApproval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneConditionApproval() *SuperplaneConditionApproval {
	this := SuperplaneConditionApproval{}
	return &this
}

// NewSuperplaneConditionApprovalWithDefaults instantiates a new SuperplaneConditionApproval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneConditionApprovalWithDefaults() *SuperplaneConditionApproval {
	this := SuperplaneConditionApproval{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SuperplaneConditionApproval) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneConditionApproval) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SuperplaneConditionApproval) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *SuperplaneConditionApproval) SetCount(v int64) {
	o.Count = &v
}

// GetRequiredFrom returns the RequiredFrom field value if set, zero value otherwise.
func (o *SuperplaneConditionApproval) GetRequiredFrom() []SuperplaneApprovalRequirement {
	if o == nil || IsNil(o.RequiredFrom) {
		var ret []SuperplaneApprovalRequirement
		return ret
	}
	return o.RequiredFrom
}

// GetRequiredFromOk returns a tuple with the RequiredFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneConditionApproval) GetRequiredFromOk() ([]SuperplaneApprovalRequirement, bool) {
	if o == nil || IsNil(o.RequiredFrom) {
		return nil, false
	}
	return o.RequiredFrom, true
}

// HasRequiredFrom returns a boolean if a field has been set.
func (o *SuperplaneConditionApproval) HasRequiredFrom() bool {
	if o != nil && !IsNil(o.RequiredFrom) {
		return true
	}

	return false
}

// SetRequiredFrom gets a reference to the given []SuperplaneApprovalRequirement and assigns it to the RequiredFrom field.
func (o *SuperplaneConditionApproval) SetRequiredFrom(v []SuperplaneApprovalRequirement) {
	o.RequiredFrom = v
}

func (o SuperplaneConditionApproval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneConditionApproval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.RequiredFrom) {
		toSerialize["requiredFrom"] = o.RequiredFrom
	}
	return toSerialize, nil
}

type NullableSuperplaneConditionApproval struct {
	value *SuperplaneConditionApproval
	isSet bool
}

func (v NullableSuperplaneConditionApproval) Get() *SuperplaneConditionApproval {
	return v.value
}

func (v *NullableSuperplaneConditionApproval) Set(val *SuperplaneConditionApproval) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneConditionApproval) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneConditionApproval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneConditionApproval(val *SuperplaneConditionApproval) *NullableSuperplaneConditionApproval {
	return &NullableSuperplaneConditionApproval{value: val, isSet: true}
}

func (v NullableSuperplaneConditionApproval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneConditionApproval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


