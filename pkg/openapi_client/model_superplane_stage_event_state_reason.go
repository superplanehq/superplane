/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneStageEventStateReason the model 'SuperplaneStageEventStateReason'
type SuperplaneStageEventStateReason string

// List of SuperplaneStageEventStateReason
const (
	SUPERPLANESTAGEEVENTSTATEREASON_STATE_REASON_UNKNOWN SuperplaneStageEventStateReason = "STATE_REASON_UNKNOWN"
	SUPERPLANESTAGEEVENTSTATEREASON_STATE_REASON_APPROVAL SuperplaneStageEventStateReason = "STATE_REASON_APPROVAL"
	SUPERPLANESTAGEEVENTSTATEREASON_STATE_REASON_TIME_WINDOW SuperplaneStageEventStateReason = "STATE_REASON_TIME_WINDOW"
	SUPERPLANESTAGEEVENTSTATEREASON_STATE_REASON_EXECUTION SuperplaneStageEventStateReason = "STATE_REASON_EXECUTION"
	SUPERPLANESTAGEEVENTSTATEREASON_STATE_REASON_CONNECTION SuperplaneStageEventStateReason = "STATE_REASON_CONNECTION"
	SUPERPLANESTAGEEVENTSTATEREASON_STATE_REASON_CANCELLED SuperplaneStageEventStateReason = "STATE_REASON_CANCELLED"
	SUPERPLANESTAGEEVENTSTATEREASON_STATE_REASON_UNHEALTHY SuperplaneStageEventStateReason = "STATE_REASON_UNHEALTHY"
)

// All allowed values of SuperplaneStageEventStateReason enum
var AllowedSuperplaneStageEventStateReasonEnumValues = []SuperplaneStageEventStateReason{
	"STATE_REASON_UNKNOWN",
	"STATE_REASON_APPROVAL",
	"STATE_REASON_TIME_WINDOW",
	"STATE_REASON_EXECUTION",
	"STATE_REASON_CONNECTION",
	"STATE_REASON_CANCELLED",
	"STATE_REASON_UNHEALTHY",
}

func (v *SuperplaneStageEventStateReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneStageEventStateReason(value)
	for _, existing := range AllowedSuperplaneStageEventStateReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneStageEventStateReason", value)
}

// NewSuperplaneStageEventStateReasonFromValue returns a pointer to a valid SuperplaneStageEventStateReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneStageEventStateReasonFromValue(v string) (*SuperplaneStageEventStateReason, error) {
	ev := SuperplaneStageEventStateReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneStageEventStateReason: valid values are %v", v, AllowedSuperplaneStageEventStateReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneStageEventStateReason) IsValid() bool {
	for _, existing := range AllowedSuperplaneStageEventStateReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneStageEventStateReason value
func (v SuperplaneStageEventStateReason) Ptr() *SuperplaneStageEventStateReason {
	return &v
}

type NullableSuperplaneStageEventStateReason struct {
	value *SuperplaneStageEventStateReason
	isSet bool
}

func (v NullableSuperplaneStageEventStateReason) Get() *SuperplaneStageEventStateReason {
	return v.value
}

func (v *NullableSuperplaneStageEventStateReason) Set(val *SuperplaneStageEventStateReason) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneStageEventStateReason) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneStageEventStateReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneStageEventStateReason(val *SuperplaneStageEventStateReason) *NullableSuperplaneStageEventStateReason {
	return &NullableSuperplaneStageEventStateReason{value: val, isSet: true}
}

func (v NullableSuperplaneStageEventStateReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneStageEventStateReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

