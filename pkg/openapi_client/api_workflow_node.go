/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
	"reflect"
)


// WorkflowNodeAPIService WorkflowNodeAPI service
type WorkflowNodeAPIService service

type ApiWorkflowsListNodeExecutionsRequest struct {
	ctx context.Context
	ApiService *WorkflowNodeAPIService
	workflowId string
	nodeId string
	states *[]string
	results *[]string
	limit *int64
	before *time.Time
}

func (r ApiWorkflowsListNodeExecutionsRequest) States(states []string) ApiWorkflowsListNodeExecutionsRequest {
	r.states = &states
	return r
}

func (r ApiWorkflowsListNodeExecutionsRequest) Results(results []string) ApiWorkflowsListNodeExecutionsRequest {
	r.results = &results
	return r
}

func (r ApiWorkflowsListNodeExecutionsRequest) Limit(limit int64) ApiWorkflowsListNodeExecutionsRequest {
	r.limit = &limit
	return r
}

func (r ApiWorkflowsListNodeExecutionsRequest) Before(before time.Time) ApiWorkflowsListNodeExecutionsRequest {
	r.before = &before
	return r
}

func (r ApiWorkflowsListNodeExecutionsRequest) Execute() (*SuperplaneListNodeExecutionsResponse, *http.Response, error) {
	return r.ApiService.WorkflowsListNodeExecutionsExecute(r)
}

/*
WorkflowsListNodeExecutions List node executions

Returns a list of executions for a specific workflow node

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowId
 @param nodeId
 @return ApiWorkflowsListNodeExecutionsRequest
*/
func (a *WorkflowNodeAPIService) WorkflowsListNodeExecutions(ctx context.Context, workflowId string, nodeId string) ApiWorkflowsListNodeExecutionsRequest {
	return ApiWorkflowsListNodeExecutionsRequest{
		ApiService: a,
		ctx: ctx,
		workflowId: workflowId,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return SuperplaneListNodeExecutionsResponse
func (a *WorkflowNodeAPIService) WorkflowsListNodeExecutionsExecute(r ApiWorkflowsListNodeExecutionsRequest) (*SuperplaneListNodeExecutionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuperplaneListNodeExecutionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNodeAPIService.WorkflowsListNodeExecutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/workflows/{workflowId}/nodes/{nodeId}/executions"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowId"+"}", url.PathEscape(parameterValueToString(r.workflowId, "workflowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.states != nil {
		t := *r.states
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "states", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "states", t, "form", "multi")
		}
	}
	if r.results != nil {
		t := *r.results
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "results", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "results", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "", "")
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowsListNodeQueueItemsRequest struct {
	ctx context.Context
	ApiService *WorkflowNodeAPIService
	workflowId string
	nodeId string
	limit *int64
	before *time.Time
}

func (r ApiWorkflowsListNodeQueueItemsRequest) Limit(limit int64) ApiWorkflowsListNodeQueueItemsRequest {
	r.limit = &limit
	return r
}

func (r ApiWorkflowsListNodeQueueItemsRequest) Before(before time.Time) ApiWorkflowsListNodeQueueItemsRequest {
	r.before = &before
	return r
}

func (r ApiWorkflowsListNodeQueueItemsRequest) Execute() (*SuperplaneListNodeQueueItemsResponse, *http.Response, error) {
	return r.ApiService.WorkflowsListNodeQueueItemsExecute(r)
}

/*
WorkflowsListNodeQueueItems List node queue items

Returns a list of queued events for a specific workflow node

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowId
 @param nodeId
 @return ApiWorkflowsListNodeQueueItemsRequest
*/
func (a *WorkflowNodeAPIService) WorkflowsListNodeQueueItems(ctx context.Context, workflowId string, nodeId string) ApiWorkflowsListNodeQueueItemsRequest {
	return ApiWorkflowsListNodeQueueItemsRequest{
		ApiService: a,
		ctx: ctx,
		workflowId: workflowId,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return SuperplaneListNodeQueueItemsResponse
func (a *WorkflowNodeAPIService) WorkflowsListNodeQueueItemsExecute(r ApiWorkflowsListNodeQueueItemsRequest) (*SuperplaneListNodeQueueItemsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuperplaneListNodeQueueItemsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNodeAPIService.WorkflowsListNodeQueueItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/workflows/{workflowId}/nodes/{nodeId}/queue"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowId"+"}", url.PathEscape(parameterValueToString(r.workflowId, "workflowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "", "")
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
