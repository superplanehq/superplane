/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneTagDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneTagDefinition{}

// SuperplaneTagDefinition struct for SuperplaneTagDefinition
type SuperplaneTagDefinition struct {
	Name *string `json:"name,omitempty"`
	ValueFrom *string `json:"valueFrom,omitempty"`
}

// NewSuperplaneTagDefinition instantiates a new SuperplaneTagDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneTagDefinition() *SuperplaneTagDefinition {
	this := SuperplaneTagDefinition{}
	return &this
}

// NewSuperplaneTagDefinitionWithDefaults instantiates a new SuperplaneTagDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneTagDefinitionWithDefaults() *SuperplaneTagDefinition {
	this := SuperplaneTagDefinition{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SuperplaneTagDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneTagDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SuperplaneTagDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SuperplaneTagDefinition) SetName(v string) {
	o.Name = &v
}

// GetValueFrom returns the ValueFrom field value if set, zero value otherwise.
func (o *SuperplaneTagDefinition) GetValueFrom() string {
	if o == nil || IsNil(o.ValueFrom) {
		var ret string
		return ret
	}
	return *o.ValueFrom
}

// GetValueFromOk returns a tuple with the ValueFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneTagDefinition) GetValueFromOk() (*string, bool) {
	if o == nil || IsNil(o.ValueFrom) {
		return nil, false
	}
	return o.ValueFrom, true
}

// HasValueFrom returns a boolean if a field has been set.
func (o *SuperplaneTagDefinition) HasValueFrom() bool {
	if o != nil && !IsNil(o.ValueFrom) {
		return true
	}

	return false
}

// SetValueFrom gets a reference to the given string and assigns it to the ValueFrom field.
func (o *SuperplaneTagDefinition) SetValueFrom(v string) {
	o.ValueFrom = &v
}

func (o SuperplaneTagDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneTagDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ValueFrom) {
		toSerialize["valueFrom"] = o.ValueFrom
	}
	return toSerialize, nil
}

type NullableSuperplaneTagDefinition struct {
	value *SuperplaneTagDefinition
	isSet bool
}

func (v NullableSuperplaneTagDefinition) Get() *SuperplaneTagDefinition {
	return v.value
}

func (v *NullableSuperplaneTagDefinition) Set(val *SuperplaneTagDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneTagDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneTagDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneTagDefinition(val *SuperplaneTagDefinition) *NullableSuperplaneTagDefinition {
	return &NullableSuperplaneTagDefinition{value: val, isSet: true}
}

func (v NullableSuperplaneTagDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneTagDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


