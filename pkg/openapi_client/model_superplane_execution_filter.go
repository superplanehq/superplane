/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneExecutionFilter the model 'SuperplaneExecutionFilter'
type SuperplaneExecutionFilter string

// List of SuperplaneExecutionFilter
const (
	SUPERPLANEEXECUTIONFILTER_EXECUTION_FILTER_UNKNOWN SuperplaneExecutionFilter = "EXECUTION_FILTER_UNKNOWN"
	SUPERPLANEEXECUTIONFILTER_EXECUTION_FILTER_WITH_EXECUTION SuperplaneExecutionFilter = "EXECUTION_FILTER_WITH_EXECUTION"
	SUPERPLANEEXECUTIONFILTER_EXECUTION_FILTER_WITHOUT_EXECUTION SuperplaneExecutionFilter = "EXECUTION_FILTER_WITHOUT_EXECUTION"
)

// All allowed values of SuperplaneExecutionFilter enum
var AllowedSuperplaneExecutionFilterEnumValues = []SuperplaneExecutionFilter{
	"EXECUTION_FILTER_UNKNOWN",
	"EXECUTION_FILTER_WITH_EXECUTION",
	"EXECUTION_FILTER_WITHOUT_EXECUTION",
}

func (v *SuperplaneExecutionFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneExecutionFilter(value)
	for _, existing := range AllowedSuperplaneExecutionFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneExecutionFilter", value)
}

// NewSuperplaneExecutionFilterFromValue returns a pointer to a valid SuperplaneExecutionFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneExecutionFilterFromValue(v string) (*SuperplaneExecutionFilter, error) {
	ev := SuperplaneExecutionFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneExecutionFilter: valid values are %v", v, AllowedSuperplaneExecutionFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneExecutionFilter) IsValid() bool {
	for _, existing := range AllowedSuperplaneExecutionFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneExecutionFilter value
func (v SuperplaneExecutionFilter) Ptr() *SuperplaneExecutionFilter {
	return &v
}

type NullableSuperplaneExecutionFilter struct {
	value *SuperplaneExecutionFilter
	isSet bool
}

func (v NullableSuperplaneExecutionFilter) Get() *SuperplaneExecutionFilter {
	return v.value
}

func (v *NullableSuperplaneExecutionFilter) Set(val *SuperplaneExecutionFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneExecutionFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneExecutionFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneExecutionFilter(val *SuperplaneExecutionFilter) *NullableSuperplaneExecutionFilter {
	return &NullableSuperplaneExecutionFilter{value: val, isSet: true}
}

func (v NullableSuperplaneExecutionFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneExecutionFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

