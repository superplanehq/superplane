/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneExecutorSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneExecutorSpec{}

// SuperplaneExecutorSpec struct for SuperplaneExecutorSpec
type SuperplaneExecutorSpec struct {
	Type *SuperplaneExecutorSpecType `json:"type,omitempty"`
	Semaphore *ExecutorSpecSemaphore `json:"semaphore,omitempty"`
	Http *ExecutorSpecHTTP `json:"http,omitempty"`
}

// NewSuperplaneExecutorSpec instantiates a new SuperplaneExecutorSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneExecutorSpec() *SuperplaneExecutorSpec {
	this := SuperplaneExecutorSpec{}
	var type_ SuperplaneExecutorSpecType = SUPERPLANEEXECUTORSPECTYPE_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewSuperplaneExecutorSpecWithDefaults instantiates a new SuperplaneExecutorSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneExecutorSpecWithDefaults() *SuperplaneExecutorSpec {
	this := SuperplaneExecutorSpec{}
	var type_ SuperplaneExecutorSpecType = SUPERPLANEEXECUTORSPECTYPE_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SuperplaneExecutorSpec) GetType() SuperplaneExecutorSpecType {
	if o == nil || IsNil(o.Type) {
		var ret SuperplaneExecutorSpecType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutorSpec) GetTypeOk() (*SuperplaneExecutorSpecType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SuperplaneExecutorSpec) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SuperplaneExecutorSpecType and assigns it to the Type field.
func (o *SuperplaneExecutorSpec) SetType(v SuperplaneExecutorSpecType) {
	o.Type = &v
}

// GetSemaphore returns the Semaphore field value if set, zero value otherwise.
func (o *SuperplaneExecutorSpec) GetSemaphore() ExecutorSpecSemaphore {
	if o == nil || IsNil(o.Semaphore) {
		var ret ExecutorSpecSemaphore
		return ret
	}
	return *o.Semaphore
}

// GetSemaphoreOk returns a tuple with the Semaphore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutorSpec) GetSemaphoreOk() (*ExecutorSpecSemaphore, bool) {
	if o == nil || IsNil(o.Semaphore) {
		return nil, false
	}
	return o.Semaphore, true
}

// HasSemaphore returns a boolean if a field has been set.
func (o *SuperplaneExecutorSpec) HasSemaphore() bool {
	if o != nil && !IsNil(o.Semaphore) {
		return true
	}

	return false
}

// SetSemaphore gets a reference to the given ExecutorSpecSemaphore and assigns it to the Semaphore field.
func (o *SuperplaneExecutorSpec) SetSemaphore(v ExecutorSpecSemaphore) {
	o.Semaphore = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *SuperplaneExecutorSpec) GetHttp() ExecutorSpecHTTP {
	if o == nil || IsNil(o.Http) {
		var ret ExecutorSpecHTTP
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutorSpec) GetHttpOk() (*ExecutorSpecHTTP, bool) {
	if o == nil || IsNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *SuperplaneExecutorSpec) HasHttp() bool {
	if o != nil && !IsNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given ExecutorSpecHTTP and assigns it to the Http field.
func (o *SuperplaneExecutorSpec) SetHttp(v ExecutorSpecHTTP) {
	o.Http = &v
}

func (o SuperplaneExecutorSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneExecutorSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Semaphore) {
		toSerialize["semaphore"] = o.Semaphore
	}
	if !IsNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	return toSerialize, nil
}

type NullableSuperplaneExecutorSpec struct {
	value *SuperplaneExecutorSpec
	isSet bool
}

func (v NullableSuperplaneExecutorSpec) Get() *SuperplaneExecutorSpec {
	return v.value
}

func (v *NullableSuperplaneExecutorSpec) Set(val *SuperplaneExecutorSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneExecutorSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneExecutorSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneExecutorSpec(val *SuperplaneExecutorSpec) *NullableSuperplaneExecutorSpec {
	return &NullableSuperplaneExecutorSpec{value: val, isSet: true}
}

func (v NullableSuperplaneExecutorSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneExecutorSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


