/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SecretsSecretSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretsSecretSpec{}

// SecretsSecretSpec struct for SecretsSecretSpec
type SecretsSecretSpec struct {
	Provider *SecretProvider `json:"provider,omitempty"`
	Local *SecretLocal `json:"local,omitempty"`
}

// NewSecretsSecretSpec instantiates a new SecretsSecretSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretsSecretSpec() *SecretsSecretSpec {
	this := SecretsSecretSpec{}
	var provider SecretProvider = SECRETPROVIDER_PROVIDER_UNKNOWN
	this.Provider = &provider
	return &this
}

// NewSecretsSecretSpecWithDefaults instantiates a new SecretsSecretSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretsSecretSpecWithDefaults() *SecretsSecretSpec {
	this := SecretsSecretSpec{}
	var provider SecretProvider = SECRETPROVIDER_PROVIDER_UNKNOWN
	this.Provider = &provider
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *SecretsSecretSpec) GetProvider() SecretProvider {
	if o == nil || IsNil(o.Provider) {
		var ret SecretProvider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretsSecretSpec) GetProviderOk() (*SecretProvider, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *SecretsSecretSpec) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given SecretProvider and assigns it to the Provider field.
func (o *SecretsSecretSpec) SetProvider(v SecretProvider) {
	o.Provider = &v
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *SecretsSecretSpec) GetLocal() SecretLocal {
	if o == nil || IsNil(o.Local) {
		var ret SecretLocal
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretsSecretSpec) GetLocalOk() (*SecretLocal, bool) {
	if o == nil || IsNil(o.Local) {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *SecretsSecretSpec) HasLocal() bool {
	if o != nil && !IsNil(o.Local) {
		return true
	}

	return false
}

// SetLocal gets a reference to the given SecretLocal and assigns it to the Local field.
func (o *SecretsSecretSpec) SetLocal(v SecretLocal) {
	o.Local = &v
}

func (o SecretsSecretSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretsSecretSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Local) {
		toSerialize["local"] = o.Local
	}
	return toSerialize, nil
}

type NullableSecretsSecretSpec struct {
	value *SecretsSecretSpec
	isSet bool
}

func (v NullableSecretsSecretSpec) Get() *SecretsSecretSpec {
	return v.value
}

func (v *NullableSecretsSecretSpec) Set(val *SecretsSecretSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretsSecretSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretsSecretSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretsSecretSpec(val *SecretsSecretSpec) *NullableSecretsSecretSpec {
	return &NullableSecretsSecretSpec{value: val, isSet: true}
}

func (v NullableSecretsSecretSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretsSecretSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


