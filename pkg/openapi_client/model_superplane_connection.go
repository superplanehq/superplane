/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneConnection{}

// SuperplaneConnection struct for SuperplaneConnection
type SuperplaneConnection struct {
	Type *SuperplaneConnectionType `json:"type,omitempty"`
	Name *string `json:"name,omitempty"`
	Filters []SuperplaneFilter `json:"filters,omitempty"`
	FilterOperator *SuperplaneFilterOperator `json:"filterOperator,omitempty"`
}

// NewSuperplaneConnection instantiates a new SuperplaneConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneConnection() *SuperplaneConnection {
	this := SuperplaneConnection{}
	var type_ SuperplaneConnectionType = SUPERPLANECONNECTIONTYPE_TYPE_UNKNOWN
	this.Type = &type_
	var filterOperator SuperplaneFilterOperator = SUPERPLANEFILTEROPERATOR_FILTER_OPERATOR_AND
	this.FilterOperator = &filterOperator
	return &this
}

// NewSuperplaneConnectionWithDefaults instantiates a new SuperplaneConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneConnectionWithDefaults() *SuperplaneConnection {
	this := SuperplaneConnection{}
	var type_ SuperplaneConnectionType = SUPERPLANECONNECTIONTYPE_TYPE_UNKNOWN
	this.Type = &type_
	var filterOperator SuperplaneFilterOperator = SUPERPLANEFILTEROPERATOR_FILTER_OPERATOR_AND
	this.FilterOperator = &filterOperator
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SuperplaneConnection) GetType() SuperplaneConnectionType {
	if o == nil || IsNil(o.Type) {
		var ret SuperplaneConnectionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneConnection) GetTypeOk() (*SuperplaneConnectionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SuperplaneConnection) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SuperplaneConnectionType and assigns it to the Type field.
func (o *SuperplaneConnection) SetType(v SuperplaneConnectionType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SuperplaneConnection) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneConnection) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SuperplaneConnection) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SuperplaneConnection) SetName(v string) {
	o.Name = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *SuperplaneConnection) GetFilters() []SuperplaneFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []SuperplaneFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneConnection) GetFiltersOk() ([]SuperplaneFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *SuperplaneConnection) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []SuperplaneFilter and assigns it to the Filters field.
func (o *SuperplaneConnection) SetFilters(v []SuperplaneFilter) {
	o.Filters = v
}

// GetFilterOperator returns the FilterOperator field value if set, zero value otherwise.
func (o *SuperplaneConnection) GetFilterOperator() SuperplaneFilterOperator {
	if o == nil || IsNil(o.FilterOperator) {
		var ret SuperplaneFilterOperator
		return ret
	}
	return *o.FilterOperator
}

// GetFilterOperatorOk returns a tuple with the FilterOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneConnection) GetFilterOperatorOk() (*SuperplaneFilterOperator, bool) {
	if o == nil || IsNil(o.FilterOperator) {
		return nil, false
	}
	return o.FilterOperator, true
}

// HasFilterOperator returns a boolean if a field has been set.
func (o *SuperplaneConnection) HasFilterOperator() bool {
	if o != nil && !IsNil(o.FilterOperator) {
		return true
	}

	return false
}

// SetFilterOperator gets a reference to the given SuperplaneFilterOperator and assigns it to the FilterOperator field.
func (o *SuperplaneConnection) SetFilterOperator(v SuperplaneFilterOperator) {
	o.FilterOperator = &v
}

func (o SuperplaneConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.FilterOperator) {
		toSerialize["filterOperator"] = o.FilterOperator
	}
	return toSerialize, nil
}

type NullableSuperplaneConnection struct {
	value *SuperplaneConnection
	isSet bool
}

func (v NullableSuperplaneConnection) Get() *SuperplaneConnection {
	return v.value
}

func (v *NullableSuperplaneConnection) Set(val *SuperplaneConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneConnection(val *SuperplaneConnection) *NullableSuperplaneConnection {
	return &NullableSuperplaneConnection{value: val, isSet: true}
}

func (v NullableSuperplaneConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


