/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SpecTimeout type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecTimeout{}

// SpecTimeout struct for SpecTimeout
type SpecTimeout struct {
	After *string `json:"after,omitempty"`
	Behavior *TimeoutBehavior `json:"behavior,omitempty"`
}

// NewSpecTimeout instantiates a new SpecTimeout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecTimeout() *SpecTimeout {
	this := SpecTimeout{}
	var behavior TimeoutBehavior = TIMEOUTBEHAVIOR_BEHAVIOR_DROP
	this.Behavior = &behavior
	return &this
}

// NewSpecTimeoutWithDefaults instantiates a new SpecTimeout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecTimeoutWithDefaults() *SpecTimeout {
	this := SpecTimeout{}
	var behavior TimeoutBehavior = TIMEOUTBEHAVIOR_BEHAVIOR_DROP
	this.Behavior = &behavior
	return &this
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *SpecTimeout) GetAfter() string {
	if o == nil || IsNil(o.After) {
		var ret string
		return ret
	}
	return *o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecTimeout) GetAfterOk() (*string, bool) {
	if o == nil || IsNil(o.After) {
		return nil, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *SpecTimeout) HasAfter() bool {
	if o != nil && !IsNil(o.After) {
		return true
	}

	return false
}

// SetAfter gets a reference to the given string and assigns it to the After field.
func (o *SpecTimeout) SetAfter(v string) {
	o.After = &v
}

// GetBehavior returns the Behavior field value if set, zero value otherwise.
func (o *SpecTimeout) GetBehavior() TimeoutBehavior {
	if o == nil || IsNil(o.Behavior) {
		var ret TimeoutBehavior
		return ret
	}
	return *o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecTimeout) GetBehaviorOk() (*TimeoutBehavior, bool) {
	if o == nil || IsNil(o.Behavior) {
		return nil, false
	}
	return o.Behavior, true
}

// HasBehavior returns a boolean if a field has been set.
func (o *SpecTimeout) HasBehavior() bool {
	if o != nil && !IsNil(o.Behavior) {
		return true
	}

	return false
}

// SetBehavior gets a reference to the given TimeoutBehavior and assigns it to the Behavior field.
func (o *SpecTimeout) SetBehavior(v TimeoutBehavior) {
	o.Behavior = &v
}

func (o SpecTimeout) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecTimeout) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.After) {
		toSerialize["after"] = o.After
	}
	if !IsNil(o.Behavior) {
		toSerialize["behavior"] = o.Behavior
	}
	return toSerialize, nil
}

type NullableSpecTimeout struct {
	value *SpecTimeout
	isSet bool
}

func (v NullableSpecTimeout) Get() *SpecTimeout {
	return v.value
}

func (v *NullableSpecTimeout) Set(val *SpecTimeout) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecTimeout) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecTimeout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecTimeout(val *SpecTimeout) *NullableSpecTimeout {
	return &NullableSpecTimeout{value: val, isSet: true}
}

func (v NullableSpecTimeout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecTimeout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


