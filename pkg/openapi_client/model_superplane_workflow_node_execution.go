/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the SuperplaneWorkflowNodeExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneWorkflowNodeExecution{}

// SuperplaneWorkflowNodeExecution struct for SuperplaneWorkflowNodeExecution
type SuperplaneWorkflowNodeExecution struct {
	Id *string `json:"id,omitempty"`
	EventId *string `json:"eventId,omitempty"`
	WorkflowId *string `json:"workflowId,omitempty"`
	NodeId *string `json:"nodeId,omitempty"`
	State *SuperplaneWorkflowNodeExecutionState `json:"state,omitempty"`
	Result *SuperplaneWorkflowNodeExecutionResult `json:"result,omitempty"`
	ResultReason *SuperplaneWorkflowNodeExecutionResultReason `json:"resultReason,omitempty"`
	ResultMessage *string `json:"resultMessage,omitempty"`
	Inputs map[string]interface{} `json:"inputs,omitempty"`
	Outputs map[string]interface{} `json:"outputs,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Event *SuperplaneWorkflowEvent `json:"event,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Configuration map[string]interface{} `json:"configuration,omitempty"`
}

// NewSuperplaneWorkflowNodeExecution instantiates a new SuperplaneWorkflowNodeExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneWorkflowNodeExecution() *SuperplaneWorkflowNodeExecution {
	this := SuperplaneWorkflowNodeExecution{}
	var state SuperplaneWorkflowNodeExecutionState = SUPERPLANEWORKFLOWNODEEXECUTIONSTATE_STATE_UNKNOWN
	this.State = &state
	var result SuperplaneWorkflowNodeExecutionResult = SUPERPLANEWORKFLOWNODEEXECUTIONRESULT_RESULT_UNKNOWN
	this.Result = &result
	var resultReason SuperplaneWorkflowNodeExecutionResultReason = SUPERPLANEWORKFLOWNODEEXECUTIONRESULTREASON_RESULT_REASON_OK
	this.ResultReason = &resultReason
	return &this
}

// NewSuperplaneWorkflowNodeExecutionWithDefaults instantiates a new SuperplaneWorkflowNodeExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneWorkflowNodeExecutionWithDefaults() *SuperplaneWorkflowNodeExecution {
	this := SuperplaneWorkflowNodeExecution{}
	var state SuperplaneWorkflowNodeExecutionState = SUPERPLANEWORKFLOWNODEEXECUTIONSTATE_STATE_UNKNOWN
	this.State = &state
	var result SuperplaneWorkflowNodeExecutionResult = SUPERPLANEWORKFLOWNODEEXECUTIONRESULT_RESULT_UNKNOWN
	this.Result = &result
	var resultReason SuperplaneWorkflowNodeExecutionResultReason = SUPERPLANEWORKFLOWNODEEXECUTIONRESULTREASON_RESULT_REASON_OK
	this.ResultReason = &resultReason
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperplaneWorkflowNodeExecution) SetId(v string) {
	o.Id = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *SuperplaneWorkflowNodeExecution) SetEventId(v string) {
	o.EventId = &v
}

// GetWorkflowId returns the WorkflowId field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetWorkflowId() string {
	if o == nil || IsNil(o.WorkflowId) {
		var ret string
		return ret
	}
	return *o.WorkflowId
}

// GetWorkflowIdOk returns a tuple with the WorkflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetWorkflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkflowId) {
		return nil, false
	}
	return o.WorkflowId, true
}

// HasWorkflowId returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasWorkflowId() bool {
	if o != nil && !IsNil(o.WorkflowId) {
		return true
	}

	return false
}

// SetWorkflowId gets a reference to the given string and assigns it to the WorkflowId field.
func (o *SuperplaneWorkflowNodeExecution) SetWorkflowId(v string) {
	o.WorkflowId = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *SuperplaneWorkflowNodeExecution) SetNodeId(v string) {
	o.NodeId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetState() SuperplaneWorkflowNodeExecutionState {
	if o == nil || IsNil(o.State) {
		var ret SuperplaneWorkflowNodeExecutionState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetStateOk() (*SuperplaneWorkflowNodeExecutionState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given SuperplaneWorkflowNodeExecutionState and assigns it to the State field.
func (o *SuperplaneWorkflowNodeExecution) SetState(v SuperplaneWorkflowNodeExecutionState) {
	o.State = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetResult() SuperplaneWorkflowNodeExecutionResult {
	if o == nil || IsNil(o.Result) {
		var ret SuperplaneWorkflowNodeExecutionResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetResultOk() (*SuperplaneWorkflowNodeExecutionResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given SuperplaneWorkflowNodeExecutionResult and assigns it to the Result field.
func (o *SuperplaneWorkflowNodeExecution) SetResult(v SuperplaneWorkflowNodeExecutionResult) {
	o.Result = &v
}

// GetResultReason returns the ResultReason field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetResultReason() SuperplaneWorkflowNodeExecutionResultReason {
	if o == nil || IsNil(o.ResultReason) {
		var ret SuperplaneWorkflowNodeExecutionResultReason
		return ret
	}
	return *o.ResultReason
}

// GetResultReasonOk returns a tuple with the ResultReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetResultReasonOk() (*SuperplaneWorkflowNodeExecutionResultReason, bool) {
	if o == nil || IsNil(o.ResultReason) {
		return nil, false
	}
	return o.ResultReason, true
}

// HasResultReason returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasResultReason() bool {
	if o != nil && !IsNil(o.ResultReason) {
		return true
	}

	return false
}

// SetResultReason gets a reference to the given SuperplaneWorkflowNodeExecutionResultReason and assigns it to the ResultReason field.
func (o *SuperplaneWorkflowNodeExecution) SetResultReason(v SuperplaneWorkflowNodeExecutionResultReason) {
	o.ResultReason = &v
}

// GetResultMessage returns the ResultMessage field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetResultMessage() string {
	if o == nil || IsNil(o.ResultMessage) {
		var ret string
		return ret
	}
	return *o.ResultMessage
}

// GetResultMessageOk returns a tuple with the ResultMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetResultMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ResultMessage) {
		return nil, false
	}
	return o.ResultMessage, true
}

// HasResultMessage returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasResultMessage() bool {
	if o != nil && !IsNil(o.ResultMessage) {
		return true
	}

	return false
}

// SetResultMessage gets a reference to the given string and assigns it to the ResultMessage field.
func (o *SuperplaneWorkflowNodeExecution) SetResultMessage(v string) {
	o.ResultMessage = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetInputs() map[string]interface{} {
	if o == nil || IsNil(o.Inputs) {
		var ret map[string]interface{}
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetInputsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Inputs) {
		return map[string]interface{}{}, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given map[string]interface{} and assigns it to the Inputs field.
func (o *SuperplaneWorkflowNodeExecution) SetInputs(v map[string]interface{}) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetOutputs() map[string]interface{} {
	if o == nil || IsNil(o.Outputs) {
		var ret map[string]interface{}
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetOutputsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Outputs) {
		return map[string]interface{}{}, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasOutputs() bool {
	if o != nil && !IsNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given map[string]interface{} and assigns it to the Outputs field.
func (o *SuperplaneWorkflowNodeExecution) SetOutputs(v map[string]interface{}) {
	o.Outputs = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SuperplaneWorkflowNodeExecution) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SuperplaneWorkflowNodeExecution) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetEvent() SuperplaneWorkflowEvent {
	if o == nil || IsNil(o.Event) {
		var ret SuperplaneWorkflowEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetEventOk() (*SuperplaneWorkflowEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given SuperplaneWorkflowEvent and assigns it to the Event field.
func (o *SuperplaneWorkflowNodeExecution) SetEvent(v SuperplaneWorkflowEvent) {
	o.Event = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *SuperplaneWorkflowNodeExecution) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *SuperplaneWorkflowNodeExecution) GetConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneWorkflowNodeExecution) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *SuperplaneWorkflowNodeExecution) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *SuperplaneWorkflowNodeExecution) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

func (o SuperplaneWorkflowNodeExecution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneWorkflowNodeExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.WorkflowId) {
		toSerialize["workflowId"] = o.WorkflowId
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.ResultReason) {
		toSerialize["resultReason"] = o.ResultReason
	}
	if !IsNil(o.ResultMessage) {
		toSerialize["resultMessage"] = o.ResultMessage
	}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	if !IsNil(o.Outputs) {
		toSerialize["outputs"] = o.Outputs
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullableSuperplaneWorkflowNodeExecution struct {
	value *SuperplaneWorkflowNodeExecution
	isSet bool
}

func (v NullableSuperplaneWorkflowNodeExecution) Get() *SuperplaneWorkflowNodeExecution {
	return v.value
}

func (v *NullableSuperplaneWorkflowNodeExecution) Set(val *SuperplaneWorkflowNodeExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneWorkflowNodeExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneWorkflowNodeExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneWorkflowNodeExecution(val *SuperplaneWorkflowNodeExecution) *NullableSuperplaneWorkflowNodeExecution {
	return &NullableSuperplaneWorkflowNodeExecution{value: val, isSet: true}
}

func (v NullableSuperplaneWorkflowNodeExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneWorkflowNodeExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


