/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the EventSourceWeeklySchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSourceWeeklySchedule{}

// EventSourceWeeklySchedule struct for EventSourceWeeklySchedule
type EventSourceWeeklySchedule struct {
	WeekDay *ScheduleWeekDay `json:"weekDay,omitempty"`
	Time *string `json:"time,omitempty"`
}

// NewEventSourceWeeklySchedule instantiates a new EventSourceWeeklySchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSourceWeeklySchedule() *EventSourceWeeklySchedule {
	this := EventSourceWeeklySchedule{}
	var weekDay ScheduleWeekDay = SCHEDULEWEEKDAY_WEEK_DAY_UNKNOWN
	this.WeekDay = &weekDay
	return &this
}

// NewEventSourceWeeklyScheduleWithDefaults instantiates a new EventSourceWeeklySchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSourceWeeklyScheduleWithDefaults() *EventSourceWeeklySchedule {
	this := EventSourceWeeklySchedule{}
	var weekDay ScheduleWeekDay = SCHEDULEWEEKDAY_WEEK_DAY_UNKNOWN
	this.WeekDay = &weekDay
	return &this
}

// GetWeekDay returns the WeekDay field value if set, zero value otherwise.
func (o *EventSourceWeeklySchedule) GetWeekDay() ScheduleWeekDay {
	if o == nil || IsNil(o.WeekDay) {
		var ret ScheduleWeekDay
		return ret
	}
	return *o.WeekDay
}

// GetWeekDayOk returns a tuple with the WeekDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSourceWeeklySchedule) GetWeekDayOk() (*ScheduleWeekDay, bool) {
	if o == nil || IsNil(o.WeekDay) {
		return nil, false
	}
	return o.WeekDay, true
}

// HasWeekDay returns a boolean if a field has been set.
func (o *EventSourceWeeklySchedule) HasWeekDay() bool {
	if o != nil && !IsNil(o.WeekDay) {
		return true
	}

	return false
}

// SetWeekDay gets a reference to the given ScheduleWeekDay and assigns it to the WeekDay field.
func (o *EventSourceWeeklySchedule) SetWeekDay(v ScheduleWeekDay) {
	o.WeekDay = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *EventSourceWeeklySchedule) GetTime() string {
	if o == nil || IsNil(o.Time) {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSourceWeeklySchedule) GetTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *EventSourceWeeklySchedule) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *EventSourceWeeklySchedule) SetTime(v string) {
	o.Time = &v
}

func (o EventSourceWeeklySchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSourceWeeklySchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WeekDay) {
		toSerialize["weekDay"] = o.WeekDay
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableEventSourceWeeklySchedule struct {
	value *EventSourceWeeklySchedule
	isSet bool
}

func (v NullableEventSourceWeeklySchedule) Get() *EventSourceWeeklySchedule {
	return v.value
}

func (v *NullableEventSourceWeeklySchedule) Set(val *EventSourceWeeklySchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSourceWeeklySchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSourceWeeklySchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSourceWeeklySchedule(val *EventSourceWeeklySchedule) *NullableEventSourceWeeklySchedule {
	return &NullableEventSourceWeeklySchedule{value: val, isSet: true}
}

func (v NullableEventSourceWeeklySchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSourceWeeklySchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


