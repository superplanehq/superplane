/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the ExecutorSpecHTTP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutorSpecHTTP{}

// ExecutorSpecHTTP struct for ExecutorSpecHTTP
type ExecutorSpecHTTP struct {
	Url *string `json:"url,omitempty"`
	Headers *map[string]string `json:"headers,omitempty"`
	Payload *map[string]string `json:"payload,omitempty"`
	ResponsePolicy *ExecutorSpecHTTPResponsePolicy `json:"responsePolicy,omitempty"`
}

// NewExecutorSpecHTTP instantiates a new ExecutorSpecHTTP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutorSpecHTTP() *ExecutorSpecHTTP {
	this := ExecutorSpecHTTP{}
	return &this
}

// NewExecutorSpecHTTPWithDefaults instantiates a new ExecutorSpecHTTP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutorSpecHTTPWithDefaults() *ExecutorSpecHTTP {
	this := ExecutorSpecHTTP{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ExecutorSpecHTTP) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutorSpecHTTP) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ExecutorSpecHTTP) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ExecutorSpecHTTP) SetUrl(v string) {
	o.Url = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *ExecutorSpecHTTP) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutorSpecHTTP) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ExecutorSpecHTTP) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *ExecutorSpecHTTP) SetHeaders(v map[string]string) {
	o.Headers = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *ExecutorSpecHTTP) GetPayload() map[string]string {
	if o == nil || IsNil(o.Payload) {
		var ret map[string]string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutorSpecHTTP) GetPayloadOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *ExecutorSpecHTTP) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given map[string]string and assigns it to the Payload field.
func (o *ExecutorSpecHTTP) SetPayload(v map[string]string) {
	o.Payload = &v
}

// GetResponsePolicy returns the ResponsePolicy field value if set, zero value otherwise.
func (o *ExecutorSpecHTTP) GetResponsePolicy() ExecutorSpecHTTPResponsePolicy {
	if o == nil || IsNil(o.ResponsePolicy) {
		var ret ExecutorSpecHTTPResponsePolicy
		return ret
	}
	return *o.ResponsePolicy
}

// GetResponsePolicyOk returns a tuple with the ResponsePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutorSpecHTTP) GetResponsePolicyOk() (*ExecutorSpecHTTPResponsePolicy, bool) {
	if o == nil || IsNil(o.ResponsePolicy) {
		return nil, false
	}
	return o.ResponsePolicy, true
}

// HasResponsePolicy returns a boolean if a field has been set.
func (o *ExecutorSpecHTTP) HasResponsePolicy() bool {
	if o != nil && !IsNil(o.ResponsePolicy) {
		return true
	}

	return false
}

// SetResponsePolicy gets a reference to the given ExecutorSpecHTTPResponsePolicy and assigns it to the ResponsePolicy field.
func (o *ExecutorSpecHTTP) SetResponsePolicy(v ExecutorSpecHTTPResponsePolicy) {
	o.ResponsePolicy = &v
}

func (o ExecutorSpecHTTP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutorSpecHTTP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.ResponsePolicy) {
		toSerialize["responsePolicy"] = o.ResponsePolicy
	}
	return toSerialize, nil
}

type NullableExecutorSpecHTTP struct {
	value *ExecutorSpecHTTP
	isSet bool
}

func (v NullableExecutorSpecHTTP) Get() *ExecutorSpecHTTP {
	return v.value
}

func (v *NullableExecutorSpecHTTP) Set(val *ExecutorSpecHTTP) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutorSpecHTTP) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutorSpecHTTP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutorSpecHTTP(val *ExecutorSpecHTTP) *NullableExecutorSpecHTTP {
	return &NullableExecutorSpecHTTP{value: val, isSet: true}
}

func (v NullableExecutorSpecHTTP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutorSpecHTTP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


