/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneCreateEventBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneCreateEventBody{}

// SuperplaneCreateEventBody struct for SuperplaneCreateEventBody
type SuperplaneCreateEventBody struct {
	SourceType *SuperplaneEventSourceType `json:"sourceType,omitempty"`
	SourceId *string `json:"sourceId,omitempty"`
	Type *string `json:"type,omitempty"`
	Raw map[string]interface{} `json:"raw,omitempty"`
}

// NewSuperplaneCreateEventBody instantiates a new SuperplaneCreateEventBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneCreateEventBody() *SuperplaneCreateEventBody {
	this := SuperplaneCreateEventBody{}
	var sourceType SuperplaneEventSourceType = SUPERPLANEEVENTSOURCETYPE_TYPE_UNKNOWN
	this.SourceType = &sourceType
	return &this
}

// NewSuperplaneCreateEventBodyWithDefaults instantiates a new SuperplaneCreateEventBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneCreateEventBodyWithDefaults() *SuperplaneCreateEventBody {
	this := SuperplaneCreateEventBody{}
	var sourceType SuperplaneEventSourceType = SUPERPLANEEVENTSOURCETYPE_TYPE_UNKNOWN
	this.SourceType = &sourceType
	return &this
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *SuperplaneCreateEventBody) GetSourceType() SuperplaneEventSourceType {
	if o == nil || IsNil(o.SourceType) {
		var ret SuperplaneEventSourceType
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneCreateEventBody) GetSourceTypeOk() (*SuperplaneEventSourceType, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *SuperplaneCreateEventBody) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given SuperplaneEventSourceType and assigns it to the SourceType field.
func (o *SuperplaneCreateEventBody) SetSourceType(v SuperplaneEventSourceType) {
	o.SourceType = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *SuperplaneCreateEventBody) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneCreateEventBody) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *SuperplaneCreateEventBody) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *SuperplaneCreateEventBody) SetSourceId(v string) {
	o.SourceId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SuperplaneCreateEventBody) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneCreateEventBody) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SuperplaneCreateEventBody) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SuperplaneCreateEventBody) SetType(v string) {
	o.Type = &v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *SuperplaneCreateEventBody) GetRaw() map[string]interface{} {
	if o == nil || IsNil(o.Raw) {
		var ret map[string]interface{}
		return ret
	}
	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneCreateEventBody) GetRawOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Raw) {
		return map[string]interface{}{}, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *SuperplaneCreateEventBody) HasRaw() bool {
	if o != nil && !IsNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given map[string]interface{} and assigns it to the Raw field.
func (o *SuperplaneCreateEventBody) SetRaw(v map[string]interface{}) {
	o.Raw = v
}

func (o SuperplaneCreateEventBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneCreateEventBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceType) {
		toSerialize["sourceType"] = o.SourceType
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	return toSerialize, nil
}

type NullableSuperplaneCreateEventBody struct {
	value *SuperplaneCreateEventBody
	isSet bool
}

func (v NullableSuperplaneCreateEventBody) Get() *SuperplaneCreateEventBody {
	return v.value
}

func (v *NullableSuperplaneCreateEventBody) Set(val *SuperplaneCreateEventBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneCreateEventBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneCreateEventBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneCreateEventBody(val *SuperplaneCreateEventBody) *NullableSuperplaneCreateEventBody {
	return &NullableSuperplaneCreateEventBody{value: val, isSet: true}
}

func (v NullableSuperplaneCreateEventBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneCreateEventBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


