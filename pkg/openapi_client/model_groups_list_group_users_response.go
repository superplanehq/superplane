/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the GroupsListGroupUsersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupsListGroupUsersResponse{}

// GroupsListGroupUsersResponse struct for GroupsListGroupUsersResponse
type GroupsListGroupUsersResponse struct {
	Users []SuperplaneUsersUser `json:"users,omitempty"`
	Group *GroupsGroup `json:"group,omitempty"`
}

// NewGroupsListGroupUsersResponse instantiates a new GroupsListGroupUsersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupsListGroupUsersResponse() *GroupsListGroupUsersResponse {
	this := GroupsListGroupUsersResponse{}
	return &this
}

// NewGroupsListGroupUsersResponseWithDefaults instantiates a new GroupsListGroupUsersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupsListGroupUsersResponseWithDefaults() *GroupsListGroupUsersResponse {
	this := GroupsListGroupUsersResponse{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *GroupsListGroupUsersResponse) GetUsers() []SuperplaneUsersUser {
	if o == nil || IsNil(o.Users) {
		var ret []SuperplaneUsersUser
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsListGroupUsersResponse) GetUsersOk() ([]SuperplaneUsersUser, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *GroupsListGroupUsersResponse) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []SuperplaneUsersUser and assigns it to the Users field.
func (o *GroupsListGroupUsersResponse) SetUsers(v []SuperplaneUsersUser) {
	o.Users = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *GroupsListGroupUsersResponse) GetGroup() GroupsGroup {
	if o == nil || IsNil(o.Group) {
		var ret GroupsGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsListGroupUsersResponse) GetGroupOk() (*GroupsGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *GroupsListGroupUsersResponse) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given GroupsGroup and assigns it to the Group field.
func (o *GroupsListGroupUsersResponse) SetGroup(v GroupsGroup) {
	o.Group = &v
}

func (o GroupsListGroupUsersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupsListGroupUsersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	return toSerialize, nil
}

type NullableGroupsListGroupUsersResponse struct {
	value *GroupsListGroupUsersResponse
	isSet bool
}

func (v NullableGroupsListGroupUsersResponse) Get() *GroupsListGroupUsersResponse {
	return v.value
}

func (v *NullableGroupsListGroupUsersResponse) Set(val *GroupsListGroupUsersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupsListGroupUsersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupsListGroupUsersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupsListGroupUsersResponse(val *GroupsListGroupUsersResponse) *NullableGroupsListGroupUsersResponse {
	return &NullableGroupsListGroupUsersResponse{value: val, isSet: true}
}

func (v NullableGroupsListGroupUsersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupsListGroupUsersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


