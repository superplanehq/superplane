/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneEventSourceItemResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneEventSourceItemResult{}

// SuperplaneEventSourceItemResult struct for SuperplaneEventSourceItemResult
type SuperplaneEventSourceItemResult struct {
	SourceId *string `json:"sourceId,omitempty"`
	SourceType *SuperplaneEventSourceType `json:"sourceType,omitempty"`
	Events []SuperplaneEvent `json:"events,omitempty"`
}

// NewSuperplaneEventSourceItemResult instantiates a new SuperplaneEventSourceItemResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneEventSourceItemResult() *SuperplaneEventSourceItemResult {
	this := SuperplaneEventSourceItemResult{}
	var sourceType SuperplaneEventSourceType = SUPERPLANEEVENTSOURCETYPE_EVENT_SOURCE_TYPE_UNKNOWN
	this.SourceType = &sourceType
	return &this
}

// NewSuperplaneEventSourceItemResultWithDefaults instantiates a new SuperplaneEventSourceItemResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneEventSourceItemResultWithDefaults() *SuperplaneEventSourceItemResult {
	this := SuperplaneEventSourceItemResult{}
	var sourceType SuperplaneEventSourceType = SUPERPLANEEVENTSOURCETYPE_EVENT_SOURCE_TYPE_UNKNOWN
	this.SourceType = &sourceType
	return &this
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *SuperplaneEventSourceItemResult) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSourceItemResult) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *SuperplaneEventSourceItemResult) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *SuperplaneEventSourceItemResult) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *SuperplaneEventSourceItemResult) GetSourceType() SuperplaneEventSourceType {
	if o == nil || IsNil(o.SourceType) {
		var ret SuperplaneEventSourceType
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSourceItemResult) GetSourceTypeOk() (*SuperplaneEventSourceType, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *SuperplaneEventSourceItemResult) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given SuperplaneEventSourceType and assigns it to the SourceType field.
func (o *SuperplaneEventSourceItemResult) SetSourceType(v SuperplaneEventSourceType) {
	o.SourceType = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *SuperplaneEventSourceItemResult) GetEvents() []SuperplaneEvent {
	if o == nil || IsNil(o.Events) {
		var ret []SuperplaneEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSourceItemResult) GetEventsOk() ([]SuperplaneEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *SuperplaneEventSourceItemResult) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []SuperplaneEvent and assigns it to the Events field.
func (o *SuperplaneEventSourceItemResult) SetEvents(v []SuperplaneEvent) {
	o.Events = v
}

func (o SuperplaneEventSourceItemResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneEventSourceItemResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.SourceType) {
		toSerialize["sourceType"] = o.SourceType
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	return toSerialize, nil
}

type NullableSuperplaneEventSourceItemResult struct {
	value *SuperplaneEventSourceItemResult
	isSet bool
}

func (v NullableSuperplaneEventSourceItemResult) Get() *SuperplaneEventSourceItemResult {
	return v.value
}

func (v *NullableSuperplaneEventSourceItemResult) Set(val *SuperplaneEventSourceItemResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEventSourceItemResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEventSourceItemResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEventSourceItemResult(val *SuperplaneEventSourceItemResult) *NullableSuperplaneEventSourceItemResult {
	return &NullableSuperplaneEventSourceItemResult{value: val, isSet: true}
}

func (v NullableSuperplaneEventSourceItemResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEventSourceItemResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


