/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the WorkflowsWorkflowInitialEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowsWorkflowInitialEvent{}

// WorkflowsWorkflowInitialEvent struct for WorkflowsWorkflowInitialEvent
type WorkflowsWorkflowInitialEvent struct {
	Id *string `json:"id,omitempty"`
	WorkflowId *string `json:"workflowId,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
}

// NewWorkflowsWorkflowInitialEvent instantiates a new WorkflowsWorkflowInitialEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowsWorkflowInitialEvent() *WorkflowsWorkflowInitialEvent {
	this := WorkflowsWorkflowInitialEvent{}
	return &this
}

// NewWorkflowsWorkflowInitialEventWithDefaults instantiates a new WorkflowsWorkflowInitialEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowsWorkflowInitialEventWithDefaults() *WorkflowsWorkflowInitialEvent {
	this := WorkflowsWorkflowInitialEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowsWorkflowInitialEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowInitialEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowsWorkflowInitialEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowsWorkflowInitialEvent) SetId(v string) {
	o.Id = &v
}

// GetWorkflowId returns the WorkflowId field value if set, zero value otherwise.
func (o *WorkflowsWorkflowInitialEvent) GetWorkflowId() string {
	if o == nil || IsNil(o.WorkflowId) {
		var ret string
		return ret
	}
	return *o.WorkflowId
}

// GetWorkflowIdOk returns a tuple with the WorkflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowInitialEvent) GetWorkflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkflowId) {
		return nil, false
	}
	return o.WorkflowId, true
}

// HasWorkflowId returns a boolean if a field has been set.
func (o *WorkflowsWorkflowInitialEvent) HasWorkflowId() bool {
	if o != nil && !IsNil(o.WorkflowId) {
		return true
	}

	return false
}

// SetWorkflowId gets a reference to the given string and assigns it to the WorkflowId field.
func (o *WorkflowsWorkflowInitialEvent) SetWorkflowId(v string) {
	o.WorkflowId = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *WorkflowsWorkflowInitialEvent) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowInitialEvent) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *WorkflowsWorkflowInitialEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *WorkflowsWorkflowInitialEvent) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WorkflowsWorkflowInitialEvent) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowsWorkflowInitialEvent) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WorkflowsWorkflowInitialEvent) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *WorkflowsWorkflowInitialEvent) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o WorkflowsWorkflowInitialEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowsWorkflowInitialEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.WorkflowId) {
		toSerialize["workflowId"] = o.WorkflowId
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableWorkflowsWorkflowInitialEvent struct {
	value *WorkflowsWorkflowInitialEvent
	isSet bool
}

func (v NullableWorkflowsWorkflowInitialEvent) Get() *WorkflowsWorkflowInitialEvent {
	return v.value
}

func (v *NullableWorkflowsWorkflowInitialEvent) Set(val *WorkflowsWorkflowInitialEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowsWorkflowInitialEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowsWorkflowInitialEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowsWorkflowInitialEvent(val *WorkflowsWorkflowInitialEvent) *NullableWorkflowsWorkflowInitialEvent {
	return &NullableWorkflowsWorkflowInitialEvent{value: val, isSet: true}
}

func (v NullableWorkflowsWorkflowInitialEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowsWorkflowInitialEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


