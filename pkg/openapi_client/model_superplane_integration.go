/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneIntegration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneIntegration{}

// SuperplaneIntegration struct for SuperplaneIntegration
type SuperplaneIntegration struct {
	Metadata *SuperplaneIntegrationMetadata `json:"metadata,omitempty"`
	Spec *SuperplaneIntegrationSpec `json:"spec,omitempty"`
}

// NewSuperplaneIntegration instantiates a new SuperplaneIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneIntegration() *SuperplaneIntegration {
	this := SuperplaneIntegration{}
	return &this
}

// NewSuperplaneIntegrationWithDefaults instantiates a new SuperplaneIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneIntegrationWithDefaults() *SuperplaneIntegration {
	this := SuperplaneIntegration{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SuperplaneIntegration) GetMetadata() SuperplaneIntegrationMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret SuperplaneIntegrationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneIntegration) GetMetadataOk() (*SuperplaneIntegrationMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SuperplaneIntegration) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given SuperplaneIntegrationMetadata and assigns it to the Metadata field.
func (o *SuperplaneIntegration) SetMetadata(v SuperplaneIntegrationMetadata) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *SuperplaneIntegration) GetSpec() SuperplaneIntegrationSpec {
	if o == nil || IsNil(o.Spec) {
		var ret SuperplaneIntegrationSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneIntegration) GetSpecOk() (*SuperplaneIntegrationSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *SuperplaneIntegration) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given SuperplaneIntegrationSpec and assigns it to the Spec field.
func (o *SuperplaneIntegration) SetSpec(v SuperplaneIntegrationSpec) {
	o.Spec = &v
}

func (o SuperplaneIntegration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneIntegration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

type NullableSuperplaneIntegration struct {
	value *SuperplaneIntegration
	isSet bool
}

func (v NullableSuperplaneIntegration) Get() *SuperplaneIntegration {
	return v.value
}

func (v *NullableSuperplaneIntegration) Set(val *SuperplaneIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneIntegration(val *SuperplaneIntegration) *NullableSuperplaneIntegration {
	return &NullableSuperplaneIntegration{value: val, isSet: true}
}

func (v NullableSuperplaneIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


