/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneApprovalRequirementType the model 'SuperplaneApprovalRequirementType'
type SuperplaneApprovalRequirementType string

// List of SuperplaneApprovalRequirementType
const (
	SUPERPLANEAPPROVALREQUIREMENTTYPE_TYPE_UNKNOWN SuperplaneApprovalRequirementType = "TYPE_UNKNOWN"
	SUPERPLANEAPPROVALREQUIREMENTTYPE_TYPE_USER SuperplaneApprovalRequirementType = "TYPE_USER"
	SUPERPLANEAPPROVALREQUIREMENTTYPE_TYPE_ROLE SuperplaneApprovalRequirementType = "TYPE_ROLE"
	SUPERPLANEAPPROVALREQUIREMENTTYPE_TYPE_GROUP SuperplaneApprovalRequirementType = "TYPE_GROUP"
)

// All allowed values of SuperplaneApprovalRequirementType enum
var AllowedSuperplaneApprovalRequirementTypeEnumValues = []SuperplaneApprovalRequirementType{
	"TYPE_UNKNOWN",
	"TYPE_USER",
	"TYPE_ROLE",
	"TYPE_GROUP",
}

func (v *SuperplaneApprovalRequirementType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneApprovalRequirementType(value)
	for _, existing := range AllowedSuperplaneApprovalRequirementTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneApprovalRequirementType", value)
}

// NewSuperplaneApprovalRequirementTypeFromValue returns a pointer to a valid SuperplaneApprovalRequirementType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneApprovalRequirementTypeFromValue(v string) (*SuperplaneApprovalRequirementType, error) {
	ev := SuperplaneApprovalRequirementType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneApprovalRequirementType: valid values are %v", v, AllowedSuperplaneApprovalRequirementTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneApprovalRequirementType) IsValid() bool {
	for _, existing := range AllowedSuperplaneApprovalRequirementTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneApprovalRequirementType value
func (v SuperplaneApprovalRequirementType) Ptr() *SuperplaneApprovalRequirementType {
	return &v
}

type NullableSuperplaneApprovalRequirementType struct {
	value *SuperplaneApprovalRequirementType
	isSet bool
}

func (v NullableSuperplaneApprovalRequirementType) Get() *SuperplaneApprovalRequirementType {
	return v.value
}

func (v *NullableSuperplaneApprovalRequirementType) Set(val *SuperplaneApprovalRequirementType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneApprovalRequirementType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneApprovalRequirementType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneApprovalRequirementType(val *SuperplaneApprovalRequirementType) *NullableSuperplaneApprovalRequirementType {
	return &NullableSuperplaneApprovalRequirementType{value: val, isSet: true}
}

func (v NullableSuperplaneApprovalRequirementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneApprovalRequirementType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

