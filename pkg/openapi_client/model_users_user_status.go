/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the UsersUserStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersUserStatus{}

// UsersUserStatus struct for UsersUserStatus
type UsersUserStatus struct {
	RoleAssignments []UsersUserRoleAssignment `json:"roleAssignments,omitempty"`
}

// NewUsersUserStatus instantiates a new UsersUserStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersUserStatus() *UsersUserStatus {
	this := UsersUserStatus{}
	return &this
}

// NewUsersUserStatusWithDefaults instantiates a new UsersUserStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersUserStatusWithDefaults() *UsersUserStatus {
	this := UsersUserStatus{}
	return &this
}

// GetRoleAssignments returns the RoleAssignments field value if set, zero value otherwise.
func (o *UsersUserStatus) GetRoleAssignments() []UsersUserRoleAssignment {
	if o == nil || IsNil(o.RoleAssignments) {
		var ret []UsersUserRoleAssignment
		return ret
	}
	return o.RoleAssignments
}

// GetRoleAssignmentsOk returns a tuple with the RoleAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUserStatus) GetRoleAssignmentsOk() ([]UsersUserRoleAssignment, bool) {
	if o == nil || IsNil(o.RoleAssignments) {
		return nil, false
	}
	return o.RoleAssignments, true
}

// HasRoleAssignments returns a boolean if a field has been set.
func (o *UsersUserStatus) HasRoleAssignments() bool {
	if o != nil && !IsNil(o.RoleAssignments) {
		return true
	}

	return false
}

// SetRoleAssignments gets a reference to the given []UsersUserRoleAssignment and assigns it to the RoleAssignments field.
func (o *UsersUserStatus) SetRoleAssignments(v []UsersUserRoleAssignment) {
	o.RoleAssignments = v
}

func (o UsersUserStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersUserStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoleAssignments) {
		toSerialize["roleAssignments"] = o.RoleAssignments
	}
	return toSerialize, nil
}

type NullableUsersUserStatus struct {
	value *UsersUserStatus
	isSet bool
}

func (v NullableUsersUserStatus) Get() *UsersUserStatus {
	return v.value
}

func (v *NullableUsersUserStatus) Set(val *UsersUserStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersUserStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersUserStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersUserStatus(val *UsersUserStatus) *NullableUsersUserStatus {
	return &NullableUsersUserStatus{value: val, isSet: true}
}

func (v NullableUsersUserStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersUserStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


