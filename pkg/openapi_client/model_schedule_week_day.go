/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// ScheduleWeekDay the model 'ScheduleWeekDay'
type ScheduleWeekDay string

// List of ScheduleWeekDay
const (
	SCHEDULEWEEKDAY_WEEK_DAY_UNKNOWN ScheduleWeekDay = "WEEK_DAY_UNKNOWN"
	SCHEDULEWEEKDAY_WEEK_DAY_MONDAY ScheduleWeekDay = "WEEK_DAY_MONDAY"
	SCHEDULEWEEKDAY_WEEK_DAY_TUESDAY ScheduleWeekDay = "WEEK_DAY_TUESDAY"
	SCHEDULEWEEKDAY_WEEK_DAY_WEDNESDAY ScheduleWeekDay = "WEEK_DAY_WEDNESDAY"
	SCHEDULEWEEKDAY_WEEK_DAY_THURSDAY ScheduleWeekDay = "WEEK_DAY_THURSDAY"
	SCHEDULEWEEKDAY_WEEK_DAY_FRIDAY ScheduleWeekDay = "WEEK_DAY_FRIDAY"
	SCHEDULEWEEKDAY_WEEK_DAY_SATURDAY ScheduleWeekDay = "WEEK_DAY_SATURDAY"
	SCHEDULEWEEKDAY_WEEK_DAY_SUNDAY ScheduleWeekDay = "WEEK_DAY_SUNDAY"
)

// All allowed values of ScheduleWeekDay enum
var AllowedScheduleWeekDayEnumValues = []ScheduleWeekDay{
	"WEEK_DAY_UNKNOWN",
	"WEEK_DAY_MONDAY",
	"WEEK_DAY_TUESDAY",
	"WEEK_DAY_WEDNESDAY",
	"WEEK_DAY_THURSDAY",
	"WEEK_DAY_FRIDAY",
	"WEEK_DAY_SATURDAY",
	"WEEK_DAY_SUNDAY",
}

func (v *ScheduleWeekDay) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScheduleWeekDay(value)
	for _, existing := range AllowedScheduleWeekDayEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScheduleWeekDay", value)
}

// NewScheduleWeekDayFromValue returns a pointer to a valid ScheduleWeekDay
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScheduleWeekDayFromValue(v string) (*ScheduleWeekDay, error) {
	ev := ScheduleWeekDay(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScheduleWeekDay: valid values are %v", v, AllowedScheduleWeekDayEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScheduleWeekDay) IsValid() bool {
	for _, existing := range AllowedScheduleWeekDayEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScheduleWeekDay value
func (v ScheduleWeekDay) Ptr() *ScheduleWeekDay {
	return &v
}

type NullableScheduleWeekDay struct {
	value *ScheduleWeekDay
	isSet bool
}

func (v NullableScheduleWeekDay) Get() *ScheduleWeekDay {
	return v.value
}

func (v *NullableScheduleWeekDay) Set(val *ScheduleWeekDay) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleWeekDay) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleWeekDay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleWeekDay(val *ScheduleWeekDay) *NullableScheduleWeekDay {
	return &NullableScheduleWeekDay{value: val, isSet: true}
}

func (v NullableScheduleWeekDay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleWeekDay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

