/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the IntegrationsIntegrationSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationsIntegrationSpec{}

// IntegrationsIntegrationSpec struct for IntegrationsIntegrationSpec
type IntegrationsIntegrationSpec struct {
	Type *IntegrationsIntegrationType `json:"type,omitempty"`
	Url *string `json:"url,omitempty"`
	Auth *IntegrationAuth `json:"auth,omitempty"`
	Oidc *IntegrationOIDC `json:"oidc,omitempty"`
}

// NewIntegrationsIntegrationSpec instantiates a new IntegrationsIntegrationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationsIntegrationSpec() *IntegrationsIntegrationSpec {
	this := IntegrationsIntegrationSpec{}
	var type_ IntegrationsIntegrationType = INTEGRATIONSINTEGRATIONTYPE_TYPE_NONE
	this.Type = &type_
	return &this
}

// NewIntegrationsIntegrationSpecWithDefaults instantiates a new IntegrationsIntegrationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationsIntegrationSpecWithDefaults() *IntegrationsIntegrationSpec {
	this := IntegrationsIntegrationSpec{}
	var type_ IntegrationsIntegrationType = INTEGRATIONSINTEGRATIONTYPE_TYPE_NONE
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IntegrationsIntegrationSpec) GetType() IntegrationsIntegrationType {
	if o == nil || IsNil(o.Type) {
		var ret IntegrationsIntegrationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationsIntegrationSpec) GetTypeOk() (*IntegrationsIntegrationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IntegrationsIntegrationSpec) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given IntegrationsIntegrationType and assigns it to the Type field.
func (o *IntegrationsIntegrationSpec) SetType(v IntegrationsIntegrationType) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IntegrationsIntegrationSpec) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationsIntegrationSpec) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IntegrationsIntegrationSpec) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IntegrationsIntegrationSpec) SetUrl(v string) {
	o.Url = &v
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *IntegrationsIntegrationSpec) GetAuth() IntegrationAuth {
	if o == nil || IsNil(o.Auth) {
		var ret IntegrationAuth
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationsIntegrationSpec) GetAuthOk() (*IntegrationAuth, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *IntegrationsIntegrationSpec) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given IntegrationAuth and assigns it to the Auth field.
func (o *IntegrationsIntegrationSpec) SetAuth(v IntegrationAuth) {
	o.Auth = &v
}

// GetOidc returns the Oidc field value if set, zero value otherwise.
func (o *IntegrationsIntegrationSpec) GetOidc() IntegrationOIDC {
	if o == nil || IsNil(o.Oidc) {
		var ret IntegrationOIDC
		return ret
	}
	return *o.Oidc
}

// GetOidcOk returns a tuple with the Oidc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationsIntegrationSpec) GetOidcOk() (*IntegrationOIDC, bool) {
	if o == nil || IsNil(o.Oidc) {
		return nil, false
	}
	return o.Oidc, true
}

// HasOidc returns a boolean if a field has been set.
func (o *IntegrationsIntegrationSpec) HasOidc() bool {
	if o != nil && !IsNil(o.Oidc) {
		return true
	}

	return false
}

// SetOidc gets a reference to the given IntegrationOIDC and assigns it to the Oidc field.
func (o *IntegrationsIntegrationSpec) SetOidc(v IntegrationOIDC) {
	o.Oidc = &v
}

func (o IntegrationsIntegrationSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationsIntegrationSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	if !IsNil(o.Oidc) {
		toSerialize["oidc"] = o.Oidc
	}
	return toSerialize, nil
}

type NullableIntegrationsIntegrationSpec struct {
	value *IntegrationsIntegrationSpec
	isSet bool
}

func (v NullableIntegrationsIntegrationSpec) Get() *IntegrationsIntegrationSpec {
	return v.value
}

func (v *NullableIntegrationsIntegrationSpec) Set(val *IntegrationsIntegrationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationsIntegrationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationsIntegrationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationsIntegrationSpec(val *IntegrationsIntegrationSpec) *NullableIntegrationsIntegrationSpec {
	return &NullableIntegrationsIntegrationSpec{value: val, isSet: true}
}

func (v NullableIntegrationsIntegrationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationsIntegrationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


