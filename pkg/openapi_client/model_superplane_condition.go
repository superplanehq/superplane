/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneCondition{}

// SuperplaneCondition struct for SuperplaneCondition
type SuperplaneCondition struct {
	Type *SuperplaneConditionType `json:"type,omitempty"`
	Approval *SuperplaneConditionApproval `json:"approval,omitempty"`
	TimeWindow *SuperplaneConditionTimeWindow `json:"timeWindow,omitempty"`
}

// NewSuperplaneCondition instantiates a new SuperplaneCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneCondition() *SuperplaneCondition {
	this := SuperplaneCondition{}
	var type_ SuperplaneConditionType = SUPERPLANECONDITIONTYPE_CONDITION_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewSuperplaneConditionWithDefaults instantiates a new SuperplaneCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneConditionWithDefaults() *SuperplaneCondition {
	this := SuperplaneCondition{}
	var type_ SuperplaneConditionType = SUPERPLANECONDITIONTYPE_CONDITION_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SuperplaneCondition) GetType() SuperplaneConditionType {
	if o == nil || IsNil(o.Type) {
		var ret SuperplaneConditionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneCondition) GetTypeOk() (*SuperplaneConditionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SuperplaneCondition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SuperplaneConditionType and assigns it to the Type field.
func (o *SuperplaneCondition) SetType(v SuperplaneConditionType) {
	o.Type = &v
}

// GetApproval returns the Approval field value if set, zero value otherwise.
func (o *SuperplaneCondition) GetApproval() SuperplaneConditionApproval {
	if o == nil || IsNil(o.Approval) {
		var ret SuperplaneConditionApproval
		return ret
	}
	return *o.Approval
}

// GetApprovalOk returns a tuple with the Approval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneCondition) GetApprovalOk() (*SuperplaneConditionApproval, bool) {
	if o == nil || IsNil(o.Approval) {
		return nil, false
	}
	return o.Approval, true
}

// HasApproval returns a boolean if a field has been set.
func (o *SuperplaneCondition) HasApproval() bool {
	if o != nil && !IsNil(o.Approval) {
		return true
	}

	return false
}

// SetApproval gets a reference to the given SuperplaneConditionApproval and assigns it to the Approval field.
func (o *SuperplaneCondition) SetApproval(v SuperplaneConditionApproval) {
	o.Approval = &v
}

// GetTimeWindow returns the TimeWindow field value if set, zero value otherwise.
func (o *SuperplaneCondition) GetTimeWindow() SuperplaneConditionTimeWindow {
	if o == nil || IsNil(o.TimeWindow) {
		var ret SuperplaneConditionTimeWindow
		return ret
	}
	return *o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneCondition) GetTimeWindowOk() (*SuperplaneConditionTimeWindow, bool) {
	if o == nil || IsNil(o.TimeWindow) {
		return nil, false
	}
	return o.TimeWindow, true
}

// HasTimeWindow returns a boolean if a field has been set.
func (o *SuperplaneCondition) HasTimeWindow() bool {
	if o != nil && !IsNil(o.TimeWindow) {
		return true
	}

	return false
}

// SetTimeWindow gets a reference to the given SuperplaneConditionTimeWindow and assigns it to the TimeWindow field.
func (o *SuperplaneCondition) SetTimeWindow(v SuperplaneConditionTimeWindow) {
	o.TimeWindow = &v
}

func (o SuperplaneCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Approval) {
		toSerialize["approval"] = o.Approval
	}
	if !IsNil(o.TimeWindow) {
		toSerialize["timeWindow"] = o.TimeWindow
	}
	return toSerialize, nil
}

type NullableSuperplaneCondition struct {
	value *SuperplaneCondition
	isSet bool
}

func (v NullableSuperplaneCondition) Get() *SuperplaneCondition {
	return v.value
}

func (v *NullableSuperplaneCondition) Set(val *SuperplaneCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneCondition(val *SuperplaneCondition) *NullableSuperplaneCondition {
	return &NullableSuperplaneCondition{value: val, isSet: true}
}

func (v NullableSuperplaneCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


