/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneTagUsageDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneTagUsageDefinition{}

// SuperplaneTagUsageDefinition struct for SuperplaneTagUsageDefinition
type SuperplaneTagUsageDefinition struct {
	From []string `json:"from,omitempty"`
	Tags []SuperplaneTagDefinition `json:"tags,omitempty"`
}

// NewSuperplaneTagUsageDefinition instantiates a new SuperplaneTagUsageDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneTagUsageDefinition() *SuperplaneTagUsageDefinition {
	this := SuperplaneTagUsageDefinition{}
	return &this
}

// NewSuperplaneTagUsageDefinitionWithDefaults instantiates a new SuperplaneTagUsageDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneTagUsageDefinitionWithDefaults() *SuperplaneTagUsageDefinition {
	this := SuperplaneTagUsageDefinition{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SuperplaneTagUsageDefinition) GetFrom() []string {
	if o == nil || IsNil(o.From) {
		var ret []string
		return ret
	}
	return o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneTagUsageDefinition) GetFromOk() ([]string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SuperplaneTagUsageDefinition) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given []string and assigns it to the From field.
func (o *SuperplaneTagUsageDefinition) SetFrom(v []string) {
	o.From = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SuperplaneTagUsageDefinition) GetTags() []SuperplaneTagDefinition {
	if o == nil || IsNil(o.Tags) {
		var ret []SuperplaneTagDefinition
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneTagUsageDefinition) GetTagsOk() ([]SuperplaneTagDefinition, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SuperplaneTagUsageDefinition) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []SuperplaneTagDefinition and assigns it to the Tags field.
func (o *SuperplaneTagUsageDefinition) SetTags(v []SuperplaneTagDefinition) {
	o.Tags = v
}

func (o SuperplaneTagUsageDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneTagUsageDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableSuperplaneTagUsageDefinition struct {
	value *SuperplaneTagUsageDefinition
	isSet bool
}

func (v NullableSuperplaneTagUsageDefinition) Get() *SuperplaneTagUsageDefinition {
	return v.value
}

func (v *NullableSuperplaneTagUsageDefinition) Set(val *SuperplaneTagUsageDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneTagUsageDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneTagUsageDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneTagUsageDefinition(val *SuperplaneTagUsageDefinition) *NullableSuperplaneTagUsageDefinition {
	return &NullableSuperplaneTagUsageDefinition{value: val, isSet: true}
}

func (v NullableSuperplaneTagUsageDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneTagUsageDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


