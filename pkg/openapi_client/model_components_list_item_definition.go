/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the ComponentsListItemDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentsListItemDefinition{}

// ComponentsListItemDefinition struct for ComponentsListItemDefinition
type ComponentsListItemDefinition struct {
	Type *string `json:"type,omitempty"`
	Schema []ComponentsConfigurationField `json:"schema,omitempty"`
}

// NewComponentsListItemDefinition instantiates a new ComponentsListItemDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentsListItemDefinition() *ComponentsListItemDefinition {
	this := ComponentsListItemDefinition{}
	return &this
}

// NewComponentsListItemDefinitionWithDefaults instantiates a new ComponentsListItemDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentsListItemDefinitionWithDefaults() *ComponentsListItemDefinition {
	this := ComponentsListItemDefinition{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ComponentsListItemDefinition) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsListItemDefinition) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ComponentsListItemDefinition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ComponentsListItemDefinition) SetType(v string) {
	o.Type = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *ComponentsListItemDefinition) GetSchema() []ComponentsConfigurationField {
	if o == nil || IsNil(o.Schema) {
		var ret []ComponentsConfigurationField
		return ret
	}
	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsListItemDefinition) GetSchemaOk() ([]ComponentsConfigurationField, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *ComponentsListItemDefinition) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given []ComponentsConfigurationField and assigns it to the Schema field.
func (o *ComponentsListItemDefinition) SetSchema(v []ComponentsConfigurationField) {
	o.Schema = v
}

func (o ComponentsListItemDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentsListItemDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	return toSerialize, nil
}

type NullableComponentsListItemDefinition struct {
	value *ComponentsListItemDefinition
	isSet bool
}

func (v NullableComponentsListItemDefinition) Get() *ComponentsListItemDefinition {
	return v.value
}

func (v *NullableComponentsListItemDefinition) Set(val *ComponentsListItemDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentsListItemDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentsListItemDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentsListItemDefinition(val *ComponentsListItemDefinition) *NullableComponentsListItemDefinition {
	return &NullableComponentsListItemDefinition{value: val, isSet: true}
}

func (v NullableComponentsListItemDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentsListItemDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


