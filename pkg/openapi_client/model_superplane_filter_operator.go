/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneFilterOperator the model 'SuperplaneFilterOperator'
type SuperplaneFilterOperator string

// List of SuperplaneFilterOperator
const (
	SUPERPLANEFILTEROPERATOR_FILTER_OPERATOR_AND SuperplaneFilterOperator = "FILTER_OPERATOR_AND"
	SUPERPLANEFILTEROPERATOR_FILTER_OPERATOR_OR SuperplaneFilterOperator = "FILTER_OPERATOR_OR"
)

// All allowed values of SuperplaneFilterOperator enum
var AllowedSuperplaneFilterOperatorEnumValues = []SuperplaneFilterOperator{
	"FILTER_OPERATOR_AND",
	"FILTER_OPERATOR_OR",
}

func (v *SuperplaneFilterOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneFilterOperator(value)
	for _, existing := range AllowedSuperplaneFilterOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneFilterOperator", value)
}

// NewSuperplaneFilterOperatorFromValue returns a pointer to a valid SuperplaneFilterOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneFilterOperatorFromValue(v string) (*SuperplaneFilterOperator, error) {
	ev := SuperplaneFilterOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneFilterOperator: valid values are %v", v, AllowedSuperplaneFilterOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneFilterOperator) IsValid() bool {
	for _, existing := range AllowedSuperplaneFilterOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneFilterOperator value
func (v SuperplaneFilterOperator) Ptr() *SuperplaneFilterOperator {
	return &v
}

type NullableSuperplaneFilterOperator struct {
	value *SuperplaneFilterOperator
	isSet bool
}

func (v NullableSuperplaneFilterOperator) Get() *SuperplaneFilterOperator {
	return v.value
}

func (v *NullableSuperplaneFilterOperator) Set(val *SuperplaneFilterOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneFilterOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneFilterOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneFilterOperator(val *SuperplaneFilterOperator) *NullableSuperplaneFilterOperator {
	return &NullableSuperplaneFilterOperator{value: val, isSet: true}
}

func (v NullableSuperplaneFilterOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneFilterOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

