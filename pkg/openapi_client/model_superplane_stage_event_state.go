/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneStageEventState the model 'SuperplaneStageEventState'
type SuperplaneStageEventState string

// List of SuperplaneStageEventState
const (
	SUPERPLANESTAGEEVENTSTATE_STATE_UNKNOWN SuperplaneStageEventState = "STATE_UNKNOWN"
	SUPERPLANESTAGEEVENTSTATE_STATE_PENDING SuperplaneStageEventState = "STATE_PENDING"
	SUPERPLANESTAGEEVENTSTATE_STATE_WAITING SuperplaneStageEventState = "STATE_WAITING"
	SUPERPLANESTAGEEVENTSTATE_STATE_PROCESSED SuperplaneStageEventState = "STATE_PROCESSED"
)

// All allowed values of SuperplaneStageEventState enum
var AllowedSuperplaneStageEventStateEnumValues = []SuperplaneStageEventState{
	"STATE_UNKNOWN",
	"STATE_PENDING",
	"STATE_WAITING",
	"STATE_PROCESSED",
}

func (v *SuperplaneStageEventState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneStageEventState(value)
	for _, existing := range AllowedSuperplaneStageEventStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneStageEventState", value)
}

// NewSuperplaneStageEventStateFromValue returns a pointer to a valid SuperplaneStageEventState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneStageEventStateFromValue(v string) (*SuperplaneStageEventState, error) {
	ev := SuperplaneStageEventState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneStageEventState: valid values are %v", v, AllowedSuperplaneStageEventStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneStageEventState) IsValid() bool {
	for _, existing := range AllowedSuperplaneStageEventStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneStageEventState value
func (v SuperplaneStageEventState) Ptr() *SuperplaneStageEventState {
	return &v
}

type NullableSuperplaneStageEventState struct {
	value *SuperplaneStageEventState
	isSet bool
}

func (v NullableSuperplaneStageEventState) Get() *SuperplaneStageEventState {
	return v.value
}

func (v *NullableSuperplaneStageEventState) Set(val *SuperplaneStageEventState) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneStageEventState) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneStageEventState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneStageEventState(val *SuperplaneStageEventState) *NullableSuperplaneStageEventState {
	return &NullableSuperplaneStageEventState{value: val, isSet: true}
}

func (v NullableSuperplaneStageEventState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneStageEventState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

