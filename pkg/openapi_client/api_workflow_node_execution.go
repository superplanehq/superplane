/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkflowNodeExecutionAPIService WorkflowNodeExecutionAPI service
type WorkflowNodeExecutionAPIService service

type ApiWorkflowsInvokeNodeExecutionActionRequest struct {
	ctx context.Context
	ApiService *WorkflowNodeExecutionAPIService
	executionId string
	actionName string
	body *WorkflowsInvokeNodeExecutionActionBody
}

func (r ApiWorkflowsInvokeNodeExecutionActionRequest) Body(body WorkflowsInvokeNodeExecutionActionBody) ApiWorkflowsInvokeNodeExecutionActionRequest {
	r.body = &body
	return r
}

func (r ApiWorkflowsInvokeNodeExecutionActionRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.WorkflowsInvokeNodeExecutionActionExecute(r)
}

/*
WorkflowsInvokeNodeExecutionAction Invoke execution action

Invokes a custom action on a workflow node execution

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param executionId
 @param actionName
 @return ApiWorkflowsInvokeNodeExecutionActionRequest
*/
func (a *WorkflowNodeExecutionAPIService) WorkflowsInvokeNodeExecutionAction(ctx context.Context, executionId string, actionName string) ApiWorkflowsInvokeNodeExecutionActionRequest {
	return ApiWorkflowsInvokeNodeExecutionActionRequest{
		ApiService: a,
		ctx: ctx,
		executionId: executionId,
		actionName: actionName,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WorkflowNodeExecutionAPIService) WorkflowsInvokeNodeExecutionActionExecute(r ApiWorkflowsInvokeNodeExecutionActionRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNodeExecutionAPIService.WorkflowsInvokeNodeExecutionAction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/workflows/executions/{executionId}/actions/{actionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"actionName"+"}", url.PathEscape(parameterValueToString(r.actionName, "actionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
