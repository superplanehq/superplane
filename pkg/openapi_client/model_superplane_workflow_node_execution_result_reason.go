/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneWorkflowNodeExecutionResultReason the model 'SuperplaneWorkflowNodeExecutionResultReason'
type SuperplaneWorkflowNodeExecutionResultReason string

// List of SuperplaneWorkflowNodeExecutionResultReason
const (
	SUPERPLANEWORKFLOWNODEEXECUTIONRESULTREASON_RESULT_REASON_OK SuperplaneWorkflowNodeExecutionResultReason = "RESULT_REASON_OK"
	SUPERPLANEWORKFLOWNODEEXECUTIONRESULTREASON_RESULT_REASON_ERROR SuperplaneWorkflowNodeExecutionResultReason = "RESULT_REASON_ERROR"
)

// All allowed values of SuperplaneWorkflowNodeExecutionResultReason enum
var AllowedSuperplaneWorkflowNodeExecutionResultReasonEnumValues = []SuperplaneWorkflowNodeExecutionResultReason{
	"RESULT_REASON_OK",
	"RESULT_REASON_ERROR",
}

func (v *SuperplaneWorkflowNodeExecutionResultReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneWorkflowNodeExecutionResultReason(value)
	for _, existing := range AllowedSuperplaneWorkflowNodeExecutionResultReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneWorkflowNodeExecutionResultReason", value)
}

// NewSuperplaneWorkflowNodeExecutionResultReasonFromValue returns a pointer to a valid SuperplaneWorkflowNodeExecutionResultReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneWorkflowNodeExecutionResultReasonFromValue(v string) (*SuperplaneWorkflowNodeExecutionResultReason, error) {
	ev := SuperplaneWorkflowNodeExecutionResultReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneWorkflowNodeExecutionResultReason: valid values are %v", v, AllowedSuperplaneWorkflowNodeExecutionResultReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneWorkflowNodeExecutionResultReason) IsValid() bool {
	for _, existing := range AllowedSuperplaneWorkflowNodeExecutionResultReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneWorkflowNodeExecutionResultReason value
func (v SuperplaneWorkflowNodeExecutionResultReason) Ptr() *SuperplaneWorkflowNodeExecutionResultReason {
	return &v
}

type NullableSuperplaneWorkflowNodeExecutionResultReason struct {
	value *SuperplaneWorkflowNodeExecutionResultReason
	isSet bool
}

func (v NullableSuperplaneWorkflowNodeExecutionResultReason) Get() *SuperplaneWorkflowNodeExecutionResultReason {
	return v.value
}

func (v *NullableSuperplaneWorkflowNodeExecutionResultReason) Set(val *SuperplaneWorkflowNodeExecutionResultReason) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneWorkflowNodeExecutionResultReason) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneWorkflowNodeExecutionResultReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneWorkflowNodeExecutionResultReason(val *SuperplaneWorkflowNodeExecutionResultReason) *NullableSuperplaneWorkflowNodeExecutionResultReason {
	return &NullableSuperplaneWorkflowNodeExecutionResultReason{value: val, isSet: true}
}

func (v NullableSuperplaneWorkflowNodeExecutionResultReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneWorkflowNodeExecutionResultReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

