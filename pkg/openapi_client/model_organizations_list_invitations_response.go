/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the OrganizationsListInvitationsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationsListInvitationsResponse{}

// OrganizationsListInvitationsResponse struct for OrganizationsListInvitationsResponse
type OrganizationsListInvitationsResponse struct {
	Invitations []OrganizationsInvitation `json:"invitations,omitempty"`
}

// NewOrganizationsListInvitationsResponse instantiates a new OrganizationsListInvitationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationsListInvitationsResponse() *OrganizationsListInvitationsResponse {
	this := OrganizationsListInvitationsResponse{}
	return &this
}

// NewOrganizationsListInvitationsResponseWithDefaults instantiates a new OrganizationsListInvitationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationsListInvitationsResponseWithDefaults() *OrganizationsListInvitationsResponse {
	this := OrganizationsListInvitationsResponse{}
	return &this
}

// GetInvitations returns the Invitations field value if set, zero value otherwise.
func (o *OrganizationsListInvitationsResponse) GetInvitations() []OrganizationsInvitation {
	if o == nil || IsNil(o.Invitations) {
		var ret []OrganizationsInvitation
		return ret
	}
	return o.Invitations
}

// GetInvitationsOk returns a tuple with the Invitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsListInvitationsResponse) GetInvitationsOk() ([]OrganizationsInvitation, bool) {
	if o == nil || IsNil(o.Invitations) {
		return nil, false
	}
	return o.Invitations, true
}

// HasInvitations returns a boolean if a field has been set.
func (o *OrganizationsListInvitationsResponse) HasInvitations() bool {
	if o != nil && !IsNil(o.Invitations) {
		return true
	}

	return false
}

// SetInvitations gets a reference to the given []OrganizationsInvitation and assigns it to the Invitations field.
func (o *OrganizationsListInvitationsResponse) SetInvitations(v []OrganizationsInvitation) {
	o.Invitations = v
}

func (o OrganizationsListInvitationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationsListInvitationsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Invitations) {
		toSerialize["invitations"] = o.Invitations
	}
	return toSerialize, nil
}

type NullableOrganizationsListInvitationsResponse struct {
	value *OrganizationsListInvitationsResponse
	isSet bool
}

func (v NullableOrganizationsListInvitationsResponse) Get() *OrganizationsListInvitationsResponse {
	return v.value
}

func (v *NullableOrganizationsListInvitationsResponse) Set(val *OrganizationsListInvitationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationsListInvitationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationsListInvitationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationsListInvitationsResponse(val *OrganizationsListInvitationsResponse) *NullableOrganizationsListInvitationsResponse {
	return &NullableOrganizationsListInvitationsResponse{value: val, isSet: true}
}

func (v NullableOrganizationsListInvitationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationsListInvitationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


