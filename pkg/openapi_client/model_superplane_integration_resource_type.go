/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneIntegrationResourceType the model 'SuperplaneIntegrationResourceType'
type SuperplaneIntegrationResourceType string

// List of SuperplaneIntegrationResourceType
const (
	SUPERPLANEINTEGRATIONRESOURCETYPE_TYPE_NONE SuperplaneIntegrationResourceType = "TYPE_NONE"
	SUPERPLANEINTEGRATIONRESOURCETYPE_TYPE_PROJECT SuperplaneIntegrationResourceType = "TYPE_PROJECT"
	SUPERPLANEINTEGRATIONRESOURCETYPE_TYPE_TASK SuperplaneIntegrationResourceType = "TYPE_TASK"
	SUPERPLANEINTEGRATIONRESOURCETYPE_TYPE_REPOSITORY SuperplaneIntegrationResourceType = "TYPE_REPOSITORY"
)

// All allowed values of SuperplaneIntegrationResourceType enum
var AllowedSuperplaneIntegrationResourceTypeEnumValues = []SuperplaneIntegrationResourceType{
	"TYPE_NONE",
	"TYPE_PROJECT",
	"TYPE_TASK",
	"TYPE_REPOSITORY",
}

func (v *SuperplaneIntegrationResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneIntegrationResourceType(value)
	for _, existing := range AllowedSuperplaneIntegrationResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneIntegrationResourceType", value)
}

// NewSuperplaneIntegrationResourceTypeFromValue returns a pointer to a valid SuperplaneIntegrationResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneIntegrationResourceTypeFromValue(v string) (*SuperplaneIntegrationResourceType, error) {
	ev := SuperplaneIntegrationResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneIntegrationResourceType: valid values are %v", v, AllowedSuperplaneIntegrationResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneIntegrationResourceType) IsValid() bool {
	for _, existing := range AllowedSuperplaneIntegrationResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneIntegrationResourceType value
func (v SuperplaneIntegrationResourceType) Ptr() *SuperplaneIntegrationResourceType {
	return &v
}

type NullableSuperplaneIntegrationResourceType struct {
	value *SuperplaneIntegrationResourceType
	isSet bool
}

func (v NullableSuperplaneIntegrationResourceType) Get() *SuperplaneIntegrationResourceType {
	return v.value
}

func (v *NullableSuperplaneIntegrationResourceType) Set(val *SuperplaneIntegrationResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneIntegrationResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneIntegrationResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneIntegrationResourceType(val *SuperplaneIntegrationResourceType) *NullableSuperplaneIntegrationResourceType {
	return &NullableSuperplaneIntegrationResourceType{value: val, isSet: true}
}

func (v NullableSuperplaneIntegrationResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneIntegrationResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

