/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the IntegrationAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationAuth{}

// IntegrationAuth struct for IntegrationAuth
type IntegrationAuth struct {
	Use *IntegrationAuthType `json:"use,omitempty"`
	Token *AuthToken `json:"token,omitempty"`
}

// NewIntegrationAuth instantiates a new IntegrationAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationAuth() *IntegrationAuth {
	this := IntegrationAuth{}
	var use IntegrationAuthType = INTEGRATIONAUTHTYPE_AUTH_TYPE_NONE
	this.Use = &use
	return &this
}

// NewIntegrationAuthWithDefaults instantiates a new IntegrationAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationAuthWithDefaults() *IntegrationAuth {
	this := IntegrationAuth{}
	var use IntegrationAuthType = INTEGRATIONAUTHTYPE_AUTH_TYPE_NONE
	this.Use = &use
	return &this
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *IntegrationAuth) GetUse() IntegrationAuthType {
	if o == nil || IsNil(o.Use) {
		var ret IntegrationAuthType
		return ret
	}
	return *o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAuth) GetUseOk() (*IntegrationAuthType, bool) {
	if o == nil || IsNil(o.Use) {
		return nil, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *IntegrationAuth) HasUse() bool {
	if o != nil && !IsNil(o.Use) {
		return true
	}

	return false
}

// SetUse gets a reference to the given IntegrationAuthType and assigns it to the Use field.
func (o *IntegrationAuth) SetUse(v IntegrationAuthType) {
	o.Use = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *IntegrationAuth) GetToken() AuthToken {
	if o == nil || IsNil(o.Token) {
		var ret AuthToken
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAuth) GetTokenOk() (*AuthToken, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *IntegrationAuth) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given AuthToken and assigns it to the Token field.
func (o *IntegrationAuth) SetToken(v AuthToken) {
	o.Token = &v
}

func (o IntegrationAuth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Use) {
		toSerialize["use"] = o.Use
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableIntegrationAuth struct {
	value *IntegrationAuth
	isSet bool
}

func (v NullableIntegrationAuth) Get() *IntegrationAuth {
	return v.value
}

func (v *NullableIntegrationAuth) Set(val *IntegrationAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationAuth(val *IntegrationAuth) *NullableIntegrationAuth {
	return &NullableIntegrationAuth{value: val, isSet: true}
}

func (v NullableIntegrationAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


