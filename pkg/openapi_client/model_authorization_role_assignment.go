/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the AuthorizationRoleAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationRoleAssignment{}

// AuthorizationRoleAssignment struct for AuthorizationRoleAssignment
type AuthorizationRoleAssignment struct {
	DomainType *AuthorizationDomainType `json:"domainType,omitempty"`
	DomainId *string `json:"domainId,omitempty"`
	Role *string `json:"role,omitempty"`
}

// NewAuthorizationRoleAssignment instantiates a new AuthorizationRoleAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationRoleAssignment() *AuthorizationRoleAssignment {
	this := AuthorizationRoleAssignment{}
	var domainType AuthorizationDomainType = AUTHORIZATIONDOMAINTYPE_DOMAIN_TYPE_UNSPECIFIED
	this.DomainType = &domainType
	return &this
}

// NewAuthorizationRoleAssignmentWithDefaults instantiates a new AuthorizationRoleAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationRoleAssignmentWithDefaults() *AuthorizationRoleAssignment {
	this := AuthorizationRoleAssignment{}
	var domainType AuthorizationDomainType = AUTHORIZATIONDOMAINTYPE_DOMAIN_TYPE_UNSPECIFIED
	this.DomainType = &domainType
	return &this
}

// GetDomainType returns the DomainType field value if set, zero value otherwise.
func (o *AuthorizationRoleAssignment) GetDomainType() AuthorizationDomainType {
	if o == nil || IsNil(o.DomainType) {
		var ret AuthorizationDomainType
		return ret
	}
	return *o.DomainType
}

// GetDomainTypeOk returns a tuple with the DomainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationRoleAssignment) GetDomainTypeOk() (*AuthorizationDomainType, bool) {
	if o == nil || IsNil(o.DomainType) {
		return nil, false
	}
	return o.DomainType, true
}

// HasDomainType returns a boolean if a field has been set.
func (o *AuthorizationRoleAssignment) HasDomainType() bool {
	if o != nil && !IsNil(o.DomainType) {
		return true
	}

	return false
}

// SetDomainType gets a reference to the given AuthorizationDomainType and assigns it to the DomainType field.
func (o *AuthorizationRoleAssignment) SetDomainType(v AuthorizationDomainType) {
	o.DomainType = &v
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *AuthorizationRoleAssignment) GetDomainId() string {
	if o == nil || IsNil(o.DomainId) {
		var ret string
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationRoleAssignment) GetDomainIdOk() (*string, bool) {
	if o == nil || IsNil(o.DomainId) {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *AuthorizationRoleAssignment) HasDomainId() bool {
	if o != nil && !IsNil(o.DomainId) {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given string and assigns it to the DomainId field.
func (o *AuthorizationRoleAssignment) SetDomainId(v string) {
	o.DomainId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *AuthorizationRoleAssignment) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationRoleAssignment) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *AuthorizationRoleAssignment) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *AuthorizationRoleAssignment) SetRole(v string) {
	o.Role = &v
}

func (o AuthorizationRoleAssignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationRoleAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomainType) {
		toSerialize["domainType"] = o.DomainType
	}
	if !IsNil(o.DomainId) {
		toSerialize["domainId"] = o.DomainId
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

type NullableAuthorizationRoleAssignment struct {
	value *AuthorizationRoleAssignment
	isSet bool
}

func (v NullableAuthorizationRoleAssignment) Get() *AuthorizationRoleAssignment {
	return v.value
}

func (v *NullableAuthorizationRoleAssignment) Set(val *AuthorizationRoleAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationRoleAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationRoleAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationRoleAssignment(val *AuthorizationRoleAssignment) *NullableAuthorizationRoleAssignment {
	return &NullableAuthorizationRoleAssignment{value: val, isSet: true}
}

func (v NullableAuthorizationRoleAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationRoleAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


