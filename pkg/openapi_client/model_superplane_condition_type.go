/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneConditionType the model 'SuperplaneConditionType'
type SuperplaneConditionType string

// List of SuperplaneConditionType
const (
	SUPERPLANECONDITIONTYPE_CONDITION_TYPE_UNKNOWN SuperplaneConditionType = "CONDITION_TYPE_UNKNOWN"
	SUPERPLANECONDITIONTYPE_CONDITION_TYPE_APPROVAL SuperplaneConditionType = "CONDITION_TYPE_APPROVAL"
	SUPERPLANECONDITIONTYPE_CONDITION_TYPE_TIME_WINDOW SuperplaneConditionType = "CONDITION_TYPE_TIME_WINDOW"
)

// All allowed values of SuperplaneConditionType enum
var AllowedSuperplaneConditionTypeEnumValues = []SuperplaneConditionType{
	"CONDITION_TYPE_UNKNOWN",
	"CONDITION_TYPE_APPROVAL",
	"CONDITION_TYPE_TIME_WINDOW",
}

func (v *SuperplaneConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneConditionType(value)
	for _, existing := range AllowedSuperplaneConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneConditionType", value)
}

// NewSuperplaneConditionTypeFromValue returns a pointer to a valid SuperplaneConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneConditionTypeFromValue(v string) (*SuperplaneConditionType, error) {
	ev := SuperplaneConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneConditionType: valid values are %v", v, AllowedSuperplaneConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneConditionType) IsValid() bool {
	for _, existing := range AllowedSuperplaneConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneConditionType value
func (v SuperplaneConditionType) Ptr() *SuperplaneConditionType {
	return &v
}

type NullableSuperplaneConditionType struct {
	value *SuperplaneConditionType
	isSet bool
}

func (v NullableSuperplaneConditionType) Get() *SuperplaneConditionType {
	return v.value
}

func (v *NullableSuperplaneConditionType) Set(val *SuperplaneConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneConditionType(val *SuperplaneConditionType) *NullableSuperplaneConditionType {
	return &NullableSuperplaneConditionType{value: val, isSet: true}
}

func (v NullableSuperplaneConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

