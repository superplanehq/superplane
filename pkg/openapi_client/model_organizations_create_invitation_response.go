/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the OrganizationsCreateInvitationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationsCreateInvitationResponse{}

// OrganizationsCreateInvitationResponse struct for OrganizationsCreateInvitationResponse
type OrganizationsCreateInvitationResponse struct {
	Invitation *OrganizationsInvitation `json:"invitation,omitempty"`
}

// NewOrganizationsCreateInvitationResponse instantiates a new OrganizationsCreateInvitationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationsCreateInvitationResponse() *OrganizationsCreateInvitationResponse {
	this := OrganizationsCreateInvitationResponse{}
	return &this
}

// NewOrganizationsCreateInvitationResponseWithDefaults instantiates a new OrganizationsCreateInvitationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationsCreateInvitationResponseWithDefaults() *OrganizationsCreateInvitationResponse {
	this := OrganizationsCreateInvitationResponse{}
	return &this
}

// GetInvitation returns the Invitation field value if set, zero value otherwise.
func (o *OrganizationsCreateInvitationResponse) GetInvitation() OrganizationsInvitation {
	if o == nil || IsNil(o.Invitation) {
		var ret OrganizationsInvitation
		return ret
	}
	return *o.Invitation
}

// GetInvitationOk returns a tuple with the Invitation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsCreateInvitationResponse) GetInvitationOk() (*OrganizationsInvitation, bool) {
	if o == nil || IsNil(o.Invitation) {
		return nil, false
	}
	return o.Invitation, true
}

// HasInvitation returns a boolean if a field has been set.
func (o *OrganizationsCreateInvitationResponse) HasInvitation() bool {
	if o != nil && !IsNil(o.Invitation) {
		return true
	}

	return false
}

// SetInvitation gets a reference to the given OrganizationsInvitation and assigns it to the Invitation field.
func (o *OrganizationsCreateInvitationResponse) SetInvitation(v OrganizationsInvitation) {
	o.Invitation = &v
}

func (o OrganizationsCreateInvitationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationsCreateInvitationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Invitation) {
		toSerialize["invitation"] = o.Invitation
	}
	return toSerialize, nil
}

type NullableOrganizationsCreateInvitationResponse struct {
	value *OrganizationsCreateInvitationResponse
	isSet bool
}

func (v NullableOrganizationsCreateInvitationResponse) Get() *OrganizationsCreateInvitationResponse {
	return v.value
}

func (v *NullableOrganizationsCreateInvitationResponse) Set(val *OrganizationsCreateInvitationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationsCreateInvitationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationsCreateInvitationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationsCreateInvitationResponse(val *OrganizationsCreateInvitationResponse) *NullableOrganizationsCreateInvitationResponse {
	return &NullableOrganizationsCreateInvitationResponse{value: val, isSet: true}
}

func (v NullableOrganizationsCreateInvitationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationsCreateInvitationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


