/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the AuthorizationUserRoleAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationUserRoleAssignment{}

// AuthorizationUserRoleAssignment struct for AuthorizationUserRoleAssignment
type AuthorizationUserRoleAssignment struct {
	RoleName *string `json:"roleName,omitempty"`
	RoleDisplayName *string `json:"roleDisplayName,omitempty"`
	RoleDescription *string `json:"roleDescription,omitempty"`
	DomainType *AuthorizationDomainType `json:"domainType,omitempty"`
	DomainId *string `json:"domainId,omitempty"`
	AssignedAt *string `json:"assignedAt,omitempty"`
}

// NewAuthorizationUserRoleAssignment instantiates a new AuthorizationUserRoleAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationUserRoleAssignment() *AuthorizationUserRoleAssignment {
	this := AuthorizationUserRoleAssignment{}
	var domainType AuthorizationDomainType = AUTHORIZATIONDOMAINTYPE_DOMAIN_TYPE_UNSPECIFIED
	this.DomainType = &domainType
	return &this
}

// NewAuthorizationUserRoleAssignmentWithDefaults instantiates a new AuthorizationUserRoleAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationUserRoleAssignmentWithDefaults() *AuthorizationUserRoleAssignment {
	this := AuthorizationUserRoleAssignment{}
	var domainType AuthorizationDomainType = AUTHORIZATIONDOMAINTYPE_DOMAIN_TYPE_UNSPECIFIED
	this.DomainType = &domainType
	return &this
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *AuthorizationUserRoleAssignment) GetRoleName() string {
	if o == nil || IsNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUserRoleAssignment) GetRoleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleName) {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *AuthorizationUserRoleAssignment) HasRoleName() bool {
	if o != nil && !IsNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *AuthorizationUserRoleAssignment) SetRoleName(v string) {
	o.RoleName = &v
}

// GetRoleDisplayName returns the RoleDisplayName field value if set, zero value otherwise.
func (o *AuthorizationUserRoleAssignment) GetRoleDisplayName() string {
	if o == nil || IsNil(o.RoleDisplayName) {
		var ret string
		return ret
	}
	return *o.RoleDisplayName
}

// GetRoleDisplayNameOk returns a tuple with the RoleDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUserRoleAssignment) GetRoleDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleDisplayName) {
		return nil, false
	}
	return o.RoleDisplayName, true
}

// HasRoleDisplayName returns a boolean if a field has been set.
func (o *AuthorizationUserRoleAssignment) HasRoleDisplayName() bool {
	if o != nil && !IsNil(o.RoleDisplayName) {
		return true
	}

	return false
}

// SetRoleDisplayName gets a reference to the given string and assigns it to the RoleDisplayName field.
func (o *AuthorizationUserRoleAssignment) SetRoleDisplayName(v string) {
	o.RoleDisplayName = &v
}

// GetRoleDescription returns the RoleDescription field value if set, zero value otherwise.
func (o *AuthorizationUserRoleAssignment) GetRoleDescription() string {
	if o == nil || IsNil(o.RoleDescription) {
		var ret string
		return ret
	}
	return *o.RoleDescription
}

// GetRoleDescriptionOk returns a tuple with the RoleDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUserRoleAssignment) GetRoleDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RoleDescription) {
		return nil, false
	}
	return o.RoleDescription, true
}

// HasRoleDescription returns a boolean if a field has been set.
func (o *AuthorizationUserRoleAssignment) HasRoleDescription() bool {
	if o != nil && !IsNil(o.RoleDescription) {
		return true
	}

	return false
}

// SetRoleDescription gets a reference to the given string and assigns it to the RoleDescription field.
func (o *AuthorizationUserRoleAssignment) SetRoleDescription(v string) {
	o.RoleDescription = &v
}

// GetDomainType returns the DomainType field value if set, zero value otherwise.
func (o *AuthorizationUserRoleAssignment) GetDomainType() AuthorizationDomainType {
	if o == nil || IsNil(o.DomainType) {
		var ret AuthorizationDomainType
		return ret
	}
	return *o.DomainType
}

// GetDomainTypeOk returns a tuple with the DomainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUserRoleAssignment) GetDomainTypeOk() (*AuthorizationDomainType, bool) {
	if o == nil || IsNil(o.DomainType) {
		return nil, false
	}
	return o.DomainType, true
}

// HasDomainType returns a boolean if a field has been set.
func (o *AuthorizationUserRoleAssignment) HasDomainType() bool {
	if o != nil && !IsNil(o.DomainType) {
		return true
	}

	return false
}

// SetDomainType gets a reference to the given AuthorizationDomainType and assigns it to the DomainType field.
func (o *AuthorizationUserRoleAssignment) SetDomainType(v AuthorizationDomainType) {
	o.DomainType = &v
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *AuthorizationUserRoleAssignment) GetDomainId() string {
	if o == nil || IsNil(o.DomainId) {
		var ret string
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUserRoleAssignment) GetDomainIdOk() (*string, bool) {
	if o == nil || IsNil(o.DomainId) {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *AuthorizationUserRoleAssignment) HasDomainId() bool {
	if o != nil && !IsNil(o.DomainId) {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given string and assigns it to the DomainId field.
func (o *AuthorizationUserRoleAssignment) SetDomainId(v string) {
	o.DomainId = &v
}

// GetAssignedAt returns the AssignedAt field value if set, zero value otherwise.
func (o *AuthorizationUserRoleAssignment) GetAssignedAt() string {
	if o == nil || IsNil(o.AssignedAt) {
		var ret string
		return ret
	}
	return *o.AssignedAt
}

// GetAssignedAtOk returns a tuple with the AssignedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUserRoleAssignment) GetAssignedAtOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedAt) {
		return nil, false
	}
	return o.AssignedAt, true
}

// HasAssignedAt returns a boolean if a field has been set.
func (o *AuthorizationUserRoleAssignment) HasAssignedAt() bool {
	if o != nil && !IsNil(o.AssignedAt) {
		return true
	}

	return false
}

// SetAssignedAt gets a reference to the given string and assigns it to the AssignedAt field.
func (o *AuthorizationUserRoleAssignment) SetAssignedAt(v string) {
	o.AssignedAt = &v
}

func (o AuthorizationUserRoleAssignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationUserRoleAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoleName) {
		toSerialize["roleName"] = o.RoleName
	}
	if !IsNil(o.RoleDisplayName) {
		toSerialize["roleDisplayName"] = o.RoleDisplayName
	}
	if !IsNil(o.RoleDescription) {
		toSerialize["roleDescription"] = o.RoleDescription
	}
	if !IsNil(o.DomainType) {
		toSerialize["domainType"] = o.DomainType
	}
	if !IsNil(o.DomainId) {
		toSerialize["domainId"] = o.DomainId
	}
	if !IsNil(o.AssignedAt) {
		toSerialize["assignedAt"] = o.AssignedAt
	}
	return toSerialize, nil
}

type NullableAuthorizationUserRoleAssignment struct {
	value *AuthorizationUserRoleAssignment
	isSet bool
}

func (v NullableAuthorizationUserRoleAssignment) Get() *AuthorizationUserRoleAssignment {
	return v.value
}

func (v *NullableAuthorizationUserRoleAssignment) Set(val *AuthorizationUserRoleAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationUserRoleAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationUserRoleAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationUserRoleAssignment(val *AuthorizationUserRoleAssignment) *NullableAuthorizationUserRoleAssignment {
	return &NullableAuthorizationUserRoleAssignment{value: val, isSet: true}
}

func (v NullableAuthorizationUserRoleAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationUserRoleAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


