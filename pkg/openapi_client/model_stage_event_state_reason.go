/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// StageEventStateReason the model 'StageEventStateReason'
type StageEventStateReason string

// List of StageEventStateReason
const (
	STAGEEVENTSTATEREASON_STATE_REASON_UNKNOWN StageEventStateReason = "STATE_REASON_UNKNOWN"
	STAGEEVENTSTATEREASON_STATE_REASON_APPROVAL StageEventStateReason = "STATE_REASON_APPROVAL"
	STAGEEVENTSTATEREASON_STATE_REASON_TIME_WINDOW StageEventStateReason = "STATE_REASON_TIME_WINDOW"
	STAGEEVENTSTATEREASON_STATE_REASON_EXECUTION StageEventStateReason = "STATE_REASON_EXECUTION"
	STAGEEVENTSTATEREASON_STATE_REASON_CONNECTION StageEventStateReason = "STATE_REASON_CONNECTION"
	STAGEEVENTSTATEREASON_STATE_REASON_CANCELLED StageEventStateReason = "STATE_REASON_CANCELLED"
	STAGEEVENTSTATEREASON_STATE_REASON_UNHEALTHY StageEventStateReason = "STATE_REASON_UNHEALTHY"
)

// All allowed values of StageEventStateReason enum
var AllowedStageEventStateReasonEnumValues = []StageEventStateReason{
	"STATE_REASON_UNKNOWN",
	"STATE_REASON_APPROVAL",
	"STATE_REASON_TIME_WINDOW",
	"STATE_REASON_EXECUTION",
	"STATE_REASON_CONNECTION",
	"STATE_REASON_CANCELLED",
	"STATE_REASON_UNHEALTHY",
}

func (v *StageEventStateReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StageEventStateReason(value)
	for _, existing := range AllowedStageEventStateReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StageEventStateReason", value)
}

// NewStageEventStateReasonFromValue returns a pointer to a valid StageEventStateReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStageEventStateReasonFromValue(v string) (*StageEventStateReason, error) {
	ev := StageEventStateReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StageEventStateReason: valid values are %v", v, AllowedStageEventStateReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StageEventStateReason) IsValid() bool {
	for _, existing := range AllowedStageEventStateReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StageEventStateReason value
func (v StageEventStateReason) Ptr() *StageEventStateReason {
	return &v
}

type NullableStageEventStateReason struct {
	value *StageEventStateReason
	isSet bool
}

func (v NullableStageEventStateReason) Get() *StageEventStateReason {
	return v.value
}

func (v *NullableStageEventStateReason) Set(val *StageEventStateReason) {
	v.value = val
	v.isSet = true
}

func (v NullableStageEventStateReason) IsSet() bool {
	return v.isSet
}

func (v *NullableStageEventStateReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStageEventStateReason(val *StageEventStateReason) *NullableStageEventStateReason {
	return &NullableStageEventStateReason{value: val, isSet: true}
}

func (v NullableStageEventStateReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStageEventStateReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

