/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// IntegrationsIntegrationType the model 'IntegrationsIntegrationType'
type IntegrationsIntegrationType string

// List of IntegrationsIntegrationType
const (
	INTEGRATIONSINTEGRATIONTYPE_TYPE_NONE IntegrationsIntegrationType = "TYPE_NONE"
	INTEGRATIONSINTEGRATIONTYPE_TYPE_SEMAPHORE IntegrationsIntegrationType = "TYPE_SEMAPHORE"
	INTEGRATIONSINTEGRATIONTYPE_TYPE_GITHUB IntegrationsIntegrationType = "TYPE_GITHUB"
)

// All allowed values of IntegrationsIntegrationType enum
var AllowedIntegrationsIntegrationTypeEnumValues = []IntegrationsIntegrationType{
	"TYPE_NONE",
	"TYPE_SEMAPHORE",
	"TYPE_GITHUB",
}

func (v *IntegrationsIntegrationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntegrationsIntegrationType(value)
	for _, existing := range AllowedIntegrationsIntegrationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntegrationsIntegrationType", value)
}

// NewIntegrationsIntegrationTypeFromValue returns a pointer to a valid IntegrationsIntegrationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntegrationsIntegrationTypeFromValue(v string) (*IntegrationsIntegrationType, error) {
	ev := IntegrationsIntegrationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntegrationsIntegrationType: valid values are %v", v, AllowedIntegrationsIntegrationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntegrationsIntegrationType) IsValid() bool {
	for _, existing := range AllowedIntegrationsIntegrationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntegrationsIntegrationType value
func (v IntegrationsIntegrationType) Ptr() *IntegrationsIntegrationType {
	return &v
}

type NullableIntegrationsIntegrationType struct {
	value *IntegrationsIntegrationType
	isSet bool
}

func (v NullableIntegrationsIntegrationType) Get() *IntegrationsIntegrationType {
	return v.value
}

func (v *NullableIntegrationsIntegrationType) Set(val *IntegrationsIntegrationType) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationsIntegrationType) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationsIntegrationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationsIntegrationType(val *IntegrationsIntegrationType) *NullableIntegrationsIntegrationType {
	return &NullableIntegrationsIntegrationType{value: val, isSet: true}
}

func (v NullableIntegrationsIntegrationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationsIntegrationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

