/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// EventRejectionRejectionReason the model 'EventRejectionRejectionReason'
type EventRejectionRejectionReason string

// List of EventRejectionRejectionReason
const (
	EVENTREJECTIONREJECTIONREASON_REJECTION_REASON_UNKNOWN EventRejectionRejectionReason = "REJECTION_REASON_UNKNOWN"
	EVENTREJECTIONREJECTIONREASON_REJECTION_REASON_FILTERED EventRejectionRejectionReason = "REJECTION_REASON_FILTERED"
	EVENTREJECTIONREJECTIONREASON_REJECTION_REASON_ERROR EventRejectionRejectionReason = "REJECTION_REASON_ERROR"
)

// All allowed values of EventRejectionRejectionReason enum
var AllowedEventRejectionRejectionReasonEnumValues = []EventRejectionRejectionReason{
	"REJECTION_REASON_UNKNOWN",
	"REJECTION_REASON_FILTERED",
	"REJECTION_REASON_ERROR",
}

func (v *EventRejectionRejectionReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventRejectionRejectionReason(value)
	for _, existing := range AllowedEventRejectionRejectionReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventRejectionRejectionReason", value)
}

// NewEventRejectionRejectionReasonFromValue returns a pointer to a valid EventRejectionRejectionReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventRejectionRejectionReasonFromValue(v string) (*EventRejectionRejectionReason, error) {
	ev := EventRejectionRejectionReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventRejectionRejectionReason: valid values are %v", v, AllowedEventRejectionRejectionReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventRejectionRejectionReason) IsValid() bool {
	for _, existing := range AllowedEventRejectionRejectionReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventRejectionRejectionReason value
func (v EventRejectionRejectionReason) Ptr() *EventRejectionRejectionReason {
	return &v
}

type NullableEventRejectionRejectionReason struct {
	value *EventRejectionRejectionReason
	isSet bool
}

func (v NullableEventRejectionRejectionReason) Get() *EventRejectionRejectionReason {
	return v.value
}

func (v *NullableEventRejectionRejectionReason) Set(val *EventRejectionRejectionReason) {
	v.value = val
	v.isSet = true
}

func (v NullableEventRejectionRejectionReason) IsSet() bool {
	return v.isSet
}

func (v *NullableEventRejectionRejectionReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventRejectionRejectionReason(val *EventRejectionRejectionReason) *NullableEventRejectionRejectionReason {
	return &NullableEventRejectionRejectionReason{value: val, isSet: true}
}

func (v NullableEventRejectionRejectionReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventRejectionRejectionReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

