/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the ConnectionFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionFilter{}

// ConnectionFilter struct for ConnectionFilter
type ConnectionFilter struct {
	Type *ConnectionFilterType `json:"type,omitempty"`
	Data *ConnectionDataFilter `json:"data,omitempty"`
	Header *ConnectionHeaderFilter `json:"header,omitempty"`
}

// NewConnectionFilter instantiates a new ConnectionFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionFilter() *ConnectionFilter {
	this := ConnectionFilter{}
	var type_ ConnectionFilterType = CONNECTIONFILTERTYPE_FILTER_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewConnectionFilterWithDefaults instantiates a new ConnectionFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionFilterWithDefaults() *ConnectionFilter {
	this := ConnectionFilter{}
	var type_ ConnectionFilterType = CONNECTIONFILTERTYPE_FILTER_TYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectionFilter) GetType() ConnectionFilterType {
	if o == nil || IsNil(o.Type) {
		var ret ConnectionFilterType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionFilter) GetTypeOk() (*ConnectionFilterType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectionFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectionFilterType and assigns it to the Type field.
func (o *ConnectionFilter) SetType(v ConnectionFilterType) {
	o.Type = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConnectionFilter) GetData() ConnectionDataFilter {
	if o == nil || IsNil(o.Data) {
		var ret ConnectionDataFilter
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionFilter) GetDataOk() (*ConnectionDataFilter, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConnectionFilter) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ConnectionDataFilter and assigns it to the Data field.
func (o *ConnectionFilter) SetData(v ConnectionDataFilter) {
	o.Data = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *ConnectionFilter) GetHeader() ConnectionHeaderFilter {
	if o == nil || IsNil(o.Header) {
		var ret ConnectionHeaderFilter
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionFilter) GetHeaderOk() (*ConnectionHeaderFilter, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *ConnectionFilter) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given ConnectionHeaderFilter and assigns it to the Header field.
func (o *ConnectionFilter) SetHeader(v ConnectionHeaderFilter) {
	o.Header = &v
}

func (o ConnectionFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	return toSerialize, nil
}

type NullableConnectionFilter struct {
	value *ConnectionFilter
	isSet bool
}

func (v NullableConnectionFilter) Get() *ConnectionFilter {
	return v.value
}

func (v *NullableConnectionFilter) Set(val *ConnectionFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionFilter(val *ConnectionFilter) *NullableConnectionFilter {
	return &NullableConnectionFilter{value: val, isSet: true}
}

func (v NullableConnectionFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


