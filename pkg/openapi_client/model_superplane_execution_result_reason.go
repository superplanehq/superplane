/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneExecutionResultReason the model 'SuperplaneExecutionResultReason'
type SuperplaneExecutionResultReason string

// List of SuperplaneExecutionResultReason
const (
	SUPERPLANEEXECUTIONRESULTREASON_RESULT_REASON_OK SuperplaneExecutionResultReason = "RESULT_REASON_OK"
	SUPERPLANEEXECUTIONRESULTREASON_RESULT_REASON_ERROR SuperplaneExecutionResultReason = "RESULT_REASON_ERROR"
	SUPERPLANEEXECUTIONRESULTREASON_RESULT_REASON_MISSING_OUTPUTS SuperplaneExecutionResultReason = "RESULT_REASON_MISSING_OUTPUTS"
	SUPERPLANEEXECUTIONRESULTREASON_RESULT_REASON_TIMEOUT SuperplaneExecutionResultReason = "RESULT_REASON_TIMEOUT"
	SUPERPLANEEXECUTIONRESULTREASON_RESULT_REASON_USER SuperplaneExecutionResultReason = "RESULT_REASON_USER"
)

// All allowed values of SuperplaneExecutionResultReason enum
var AllowedSuperplaneExecutionResultReasonEnumValues = []SuperplaneExecutionResultReason{
	"RESULT_REASON_OK",
	"RESULT_REASON_ERROR",
	"RESULT_REASON_MISSING_OUTPUTS",
	"RESULT_REASON_TIMEOUT",
	"RESULT_REASON_USER",
}

func (v *SuperplaneExecutionResultReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneExecutionResultReason(value)
	for _, existing := range AllowedSuperplaneExecutionResultReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneExecutionResultReason", value)
}

// NewSuperplaneExecutionResultReasonFromValue returns a pointer to a valid SuperplaneExecutionResultReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneExecutionResultReasonFromValue(v string) (*SuperplaneExecutionResultReason, error) {
	ev := SuperplaneExecutionResultReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneExecutionResultReason: valid values are %v", v, AllowedSuperplaneExecutionResultReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneExecutionResultReason) IsValid() bool {
	for _, existing := range AllowedSuperplaneExecutionResultReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneExecutionResultReason value
func (v SuperplaneExecutionResultReason) Ptr() *SuperplaneExecutionResultReason {
	return &v
}

type NullableSuperplaneExecutionResultReason struct {
	value *SuperplaneExecutionResultReason
	isSet bool
}

func (v NullableSuperplaneExecutionResultReason) Get() *SuperplaneExecutionResultReason {
	return v.value
}

func (v *NullableSuperplaneExecutionResultReason) Set(val *SuperplaneExecutionResultReason) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneExecutionResultReason) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneExecutionResultReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneExecutionResultReason(val *SuperplaneExecutionResultReason) *NullableSuperplaneExecutionResultReason {
	return &NullableSuperplaneExecutionResultReason{value: val, isSet: true}
}

func (v NullableSuperplaneExecutionResultReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneExecutionResultReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

