/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneListEventRejectionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneListEventRejectionsResponse{}

// SuperplaneListEventRejectionsResponse struct for SuperplaneListEventRejectionsResponse
type SuperplaneListEventRejectionsResponse struct {
	Rejections []SuperplaneEventRejection `json:"rejections,omitempty"`
}

// NewSuperplaneListEventRejectionsResponse instantiates a new SuperplaneListEventRejectionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneListEventRejectionsResponse() *SuperplaneListEventRejectionsResponse {
	this := SuperplaneListEventRejectionsResponse{}
	return &this
}

// NewSuperplaneListEventRejectionsResponseWithDefaults instantiates a new SuperplaneListEventRejectionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneListEventRejectionsResponseWithDefaults() *SuperplaneListEventRejectionsResponse {
	this := SuperplaneListEventRejectionsResponse{}
	return &this
}

// GetRejections returns the Rejections field value if set, zero value otherwise.
func (o *SuperplaneListEventRejectionsResponse) GetRejections() []SuperplaneEventRejection {
	if o == nil || IsNil(o.Rejections) {
		var ret []SuperplaneEventRejection
		return ret
	}
	return o.Rejections
}

// GetRejectionsOk returns a tuple with the Rejections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneListEventRejectionsResponse) GetRejectionsOk() ([]SuperplaneEventRejection, bool) {
	if o == nil || IsNil(o.Rejections) {
		return nil, false
	}
	return o.Rejections, true
}

// HasRejections returns a boolean if a field has been set.
func (o *SuperplaneListEventRejectionsResponse) HasRejections() bool {
	if o != nil && !IsNil(o.Rejections) {
		return true
	}

	return false
}

// SetRejections gets a reference to the given []SuperplaneEventRejection and assigns it to the Rejections field.
func (o *SuperplaneListEventRejectionsResponse) SetRejections(v []SuperplaneEventRejection) {
	o.Rejections = v
}

func (o SuperplaneListEventRejectionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneListEventRejectionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rejections) {
		toSerialize["rejections"] = o.Rejections
	}
	return toSerialize, nil
}

type NullableSuperplaneListEventRejectionsResponse struct {
	value *SuperplaneListEventRejectionsResponse
	isSet bool
}

func (v NullableSuperplaneListEventRejectionsResponse) Get() *SuperplaneListEventRejectionsResponse {
	return v.value
}

func (v *NullableSuperplaneListEventRejectionsResponse) Set(val *SuperplaneListEventRejectionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneListEventRejectionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneListEventRejectionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneListEventRejectionsResponse(val *SuperplaneListEventRejectionsResponse) *NullableSuperplaneListEventRejectionsResponse {
	return &NullableSuperplaneListEventRejectionsResponse{value: val, isSet: true}
}

func (v NullableSuperplaneListEventRejectionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneListEventRejectionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


