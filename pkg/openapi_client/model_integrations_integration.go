/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the IntegrationsIntegration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationsIntegration{}

// IntegrationsIntegration struct for IntegrationsIntegration
type IntegrationsIntegration struct {
	Metadata *IntegrationsIntegrationMetadata `json:"metadata,omitempty"`
	Spec *IntegrationsIntegrationSpec `json:"spec,omitempty"`
}

// NewIntegrationsIntegration instantiates a new IntegrationsIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationsIntegration() *IntegrationsIntegration {
	this := IntegrationsIntegration{}
	return &this
}

// NewIntegrationsIntegrationWithDefaults instantiates a new IntegrationsIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationsIntegrationWithDefaults() *IntegrationsIntegration {
	this := IntegrationsIntegration{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IntegrationsIntegration) GetMetadata() IntegrationsIntegrationMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret IntegrationsIntegrationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationsIntegration) GetMetadataOk() (*IntegrationsIntegrationMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IntegrationsIntegration) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given IntegrationsIntegrationMetadata and assigns it to the Metadata field.
func (o *IntegrationsIntegration) SetMetadata(v IntegrationsIntegrationMetadata) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *IntegrationsIntegration) GetSpec() IntegrationsIntegrationSpec {
	if o == nil || IsNil(o.Spec) {
		var ret IntegrationsIntegrationSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationsIntegration) GetSpecOk() (*IntegrationsIntegrationSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *IntegrationsIntegration) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given IntegrationsIntegrationSpec and assigns it to the Spec field.
func (o *IntegrationsIntegration) SetSpec(v IntegrationsIntegrationSpec) {
	o.Spec = &v
}

func (o IntegrationsIntegration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationsIntegration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

type NullableIntegrationsIntegration struct {
	value *IntegrationsIntegration
	isSet bool
}

func (v NullableIntegrationsIntegration) Get() *IntegrationsIntegration {
	return v.value
}

func (v *NullableIntegrationsIntegration) Set(val *IntegrationsIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationsIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationsIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationsIntegration(val *IntegrationsIntegration) *NullableIntegrationsIntegration {
	return &NullableIntegrationsIntegration{value: val, isSet: true}
}

func (v NullableIntegrationsIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationsIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


