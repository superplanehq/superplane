/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneBlueprintNodeRefType the model 'SuperplaneBlueprintNodeRefType'
type SuperplaneBlueprintNodeRefType string

// List of SuperplaneBlueprintNodeRefType
const (
	SUPERPLANEBLUEPRINTNODEREFTYPE_REF_TYPE_COMPONENT SuperplaneBlueprintNodeRefType = "REF_TYPE_COMPONENT"
)

// All allowed values of SuperplaneBlueprintNodeRefType enum
var AllowedSuperplaneBlueprintNodeRefTypeEnumValues = []SuperplaneBlueprintNodeRefType{
	"REF_TYPE_COMPONENT",
}

func (v *SuperplaneBlueprintNodeRefType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneBlueprintNodeRefType(value)
	for _, existing := range AllowedSuperplaneBlueprintNodeRefTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneBlueprintNodeRefType", value)
}

// NewSuperplaneBlueprintNodeRefTypeFromValue returns a pointer to a valid SuperplaneBlueprintNodeRefType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneBlueprintNodeRefTypeFromValue(v string) (*SuperplaneBlueprintNodeRefType, error) {
	ev := SuperplaneBlueprintNodeRefType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneBlueprintNodeRefType: valid values are %v", v, AllowedSuperplaneBlueprintNodeRefTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneBlueprintNodeRefType) IsValid() bool {
	for _, existing := range AllowedSuperplaneBlueprintNodeRefTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneBlueprintNodeRefType value
func (v SuperplaneBlueprintNodeRefType) Ptr() *SuperplaneBlueprintNodeRefType {
	return &v
}

type NullableSuperplaneBlueprintNodeRefType struct {
	value *SuperplaneBlueprintNodeRefType
	isSet bool
}

func (v NullableSuperplaneBlueprintNodeRefType) Get() *SuperplaneBlueprintNodeRefType {
	return v.value
}

func (v *NullableSuperplaneBlueprintNodeRefType) Set(val *SuperplaneBlueprintNodeRefType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneBlueprintNodeRefType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneBlueprintNodeRefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneBlueprintNodeRefType(val *SuperplaneBlueprintNodeRefType) *NullableSuperplaneBlueprintNodeRefType {
	return &NullableSuperplaneBlueprintNodeRefType{value: val, isSet: true}
}

func (v NullableSuperplaneBlueprintNodeRefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneBlueprintNodeRefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

