/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneEventState the model 'SuperplaneEventState'
type SuperplaneEventState string

// List of SuperplaneEventState
const (
	SUPERPLANEEVENTSTATE_STATE_UNKNOWN SuperplaneEventState = "STATE_UNKNOWN"
	SUPERPLANEEVENTSTATE_STATE_PENDING SuperplaneEventState = "STATE_PENDING"
	SUPERPLANEEVENTSTATE_STATE_REJECTED SuperplaneEventState = "STATE_REJECTED"
	SUPERPLANEEVENTSTATE_STATE_PROCESSED SuperplaneEventState = "STATE_PROCESSED"
)

// All allowed values of SuperplaneEventState enum
var AllowedSuperplaneEventStateEnumValues = []SuperplaneEventState{
	"STATE_UNKNOWN",
	"STATE_PENDING",
	"STATE_REJECTED",
	"STATE_PROCESSED",
}

func (v *SuperplaneEventState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneEventState(value)
	for _, existing := range AllowedSuperplaneEventStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneEventState", value)
}

// NewSuperplaneEventStateFromValue returns a pointer to a valid SuperplaneEventState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneEventStateFromValue(v string) (*SuperplaneEventState, error) {
	ev := SuperplaneEventState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneEventState: valid values are %v", v, AllowedSuperplaneEventStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneEventState) IsValid() bool {
	for _, existing := range AllowedSuperplaneEventStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneEventState value
func (v SuperplaneEventState) Ptr() *SuperplaneEventState {
	return &v
}

type NullableSuperplaneEventState struct {
	value *SuperplaneEventState
	isSet bool
}

func (v NullableSuperplaneEventState) Get() *SuperplaneEventState {
	return v.value
}

func (v *NullableSuperplaneEventState) Set(val *SuperplaneEventState) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEventState) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEventState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEventState(val *SuperplaneEventState) *NullableSuperplaneEventState {
	return &NullableSuperplaneEventState{value: val, isSet: true}
}

func (v NullableSuperplaneEventState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEventState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

