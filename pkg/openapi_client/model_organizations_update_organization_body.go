/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the OrganizationsUpdateOrganizationBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationsUpdateOrganizationBody{}

// OrganizationsUpdateOrganizationBody struct for OrganizationsUpdateOrganizationBody
type OrganizationsUpdateOrganizationBody struct {
	Organization *OrganizationsOrganization `json:"organization,omitempty"`
}

// NewOrganizationsUpdateOrganizationBody instantiates a new OrganizationsUpdateOrganizationBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationsUpdateOrganizationBody() *OrganizationsUpdateOrganizationBody {
	this := OrganizationsUpdateOrganizationBody{}
	return &this
}

// NewOrganizationsUpdateOrganizationBodyWithDefaults instantiates a new OrganizationsUpdateOrganizationBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationsUpdateOrganizationBodyWithDefaults() *OrganizationsUpdateOrganizationBody {
	this := OrganizationsUpdateOrganizationBody{}
	return &this
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *OrganizationsUpdateOrganizationBody) GetOrganization() OrganizationsOrganization {
	if o == nil || IsNil(o.Organization) {
		var ret OrganizationsOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsUpdateOrganizationBody) GetOrganizationOk() (*OrganizationsOrganization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *OrganizationsUpdateOrganizationBody) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationsOrganization and assigns it to the Organization field.
func (o *OrganizationsUpdateOrganizationBody) SetOrganization(v OrganizationsOrganization) {
	o.Organization = &v
}

func (o OrganizationsUpdateOrganizationBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationsUpdateOrganizationBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	return toSerialize, nil
}

type NullableOrganizationsUpdateOrganizationBody struct {
	value *OrganizationsUpdateOrganizationBody
	isSet bool
}

func (v NullableOrganizationsUpdateOrganizationBody) Get() *OrganizationsUpdateOrganizationBody {
	return v.value
}

func (v *NullableOrganizationsUpdateOrganizationBody) Set(val *OrganizationsUpdateOrganizationBody) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationsUpdateOrganizationBody) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationsUpdateOrganizationBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationsUpdateOrganizationBody(val *OrganizationsUpdateOrganizationBody) *NullableOrganizationsUpdateOrganizationBody {
	return &NullableOrganizationsUpdateOrganizationBody{value: val, isSet: true}
}

func (v NullableOrganizationsUpdateOrganizationBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationsUpdateOrganizationBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


