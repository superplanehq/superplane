/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneConnectionGroupSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneConnectionGroupSpec{}

// SuperplaneConnectionGroupSpec struct for SuperplaneConnectionGroupSpec
type SuperplaneConnectionGroupSpec struct {
	Connections []SuperplaneConnection `json:"connections,omitempty"`
	GroupBy *SpecGroupBy `json:"groupBy,omitempty"`
	Timeout *SpecTimeout `json:"timeout,omitempty"`
}

// NewSuperplaneConnectionGroupSpec instantiates a new SuperplaneConnectionGroupSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneConnectionGroupSpec() *SuperplaneConnectionGroupSpec {
	this := SuperplaneConnectionGroupSpec{}
	return &this
}

// NewSuperplaneConnectionGroupSpecWithDefaults instantiates a new SuperplaneConnectionGroupSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneConnectionGroupSpecWithDefaults() *SuperplaneConnectionGroupSpec {
	this := SuperplaneConnectionGroupSpec{}
	return &this
}

// GetConnections returns the Connections field value if set, zero value otherwise.
func (o *SuperplaneConnectionGroupSpec) GetConnections() []SuperplaneConnection {
	if o == nil || IsNil(o.Connections) {
		var ret []SuperplaneConnection
		return ret
	}
	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneConnectionGroupSpec) GetConnectionsOk() ([]SuperplaneConnection, bool) {
	if o == nil || IsNil(o.Connections) {
		return nil, false
	}
	return o.Connections, true
}

// HasConnections returns a boolean if a field has been set.
func (o *SuperplaneConnectionGroupSpec) HasConnections() bool {
	if o != nil && !IsNil(o.Connections) {
		return true
	}

	return false
}

// SetConnections gets a reference to the given []SuperplaneConnection and assigns it to the Connections field.
func (o *SuperplaneConnectionGroupSpec) SetConnections(v []SuperplaneConnection) {
	o.Connections = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *SuperplaneConnectionGroupSpec) GetGroupBy() SpecGroupBy {
	if o == nil || IsNil(o.GroupBy) {
		var ret SpecGroupBy
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneConnectionGroupSpec) GetGroupByOk() (*SpecGroupBy, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *SuperplaneConnectionGroupSpec) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given SpecGroupBy and assigns it to the GroupBy field.
func (o *SuperplaneConnectionGroupSpec) SetGroupBy(v SpecGroupBy) {
	o.GroupBy = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *SuperplaneConnectionGroupSpec) GetTimeout() SpecTimeout {
	if o == nil || IsNil(o.Timeout) {
		var ret SpecTimeout
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneConnectionGroupSpec) GetTimeoutOk() (*SpecTimeout, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *SuperplaneConnectionGroupSpec) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given SpecTimeout and assigns it to the Timeout field.
func (o *SuperplaneConnectionGroupSpec) SetTimeout(v SpecTimeout) {
	o.Timeout = &v
}

func (o SuperplaneConnectionGroupSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneConnectionGroupSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Connections) {
		toSerialize["connections"] = o.Connections
	}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

type NullableSuperplaneConnectionGroupSpec struct {
	value *SuperplaneConnectionGroupSpec
	isSet bool
}

func (v NullableSuperplaneConnectionGroupSpec) Get() *SuperplaneConnectionGroupSpec {
	return v.value
}

func (v *NullableSuperplaneConnectionGroupSpec) Set(val *SuperplaneConnectionGroupSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneConnectionGroupSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneConnectionGroupSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneConnectionGroupSpec(val *SuperplaneConnectionGroupSpec) *NullableSuperplaneConnectionGroupSpec {
	return &NullableSuperplaneConnectionGroupSpec{value: val, isSet: true}
}

func (v NullableSuperplaneConnectionGroupSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneConnectionGroupSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


