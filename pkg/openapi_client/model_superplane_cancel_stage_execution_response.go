/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneCancelStageExecutionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneCancelStageExecutionResponse{}

// SuperplaneCancelStageExecutionResponse struct for SuperplaneCancelStageExecutionResponse
type SuperplaneCancelStageExecutionResponse struct {
	Execution *SuperplaneExecution `json:"execution,omitempty"`
}

// NewSuperplaneCancelStageExecutionResponse instantiates a new SuperplaneCancelStageExecutionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneCancelStageExecutionResponse() *SuperplaneCancelStageExecutionResponse {
	this := SuperplaneCancelStageExecutionResponse{}
	return &this
}

// NewSuperplaneCancelStageExecutionResponseWithDefaults instantiates a new SuperplaneCancelStageExecutionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneCancelStageExecutionResponseWithDefaults() *SuperplaneCancelStageExecutionResponse {
	this := SuperplaneCancelStageExecutionResponse{}
	return &this
}

// GetExecution returns the Execution field value if set, zero value otherwise.
func (o *SuperplaneCancelStageExecutionResponse) GetExecution() SuperplaneExecution {
	if o == nil || IsNil(o.Execution) {
		var ret SuperplaneExecution
		return ret
	}
	return *o.Execution
}

// GetExecutionOk returns a tuple with the Execution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneCancelStageExecutionResponse) GetExecutionOk() (*SuperplaneExecution, bool) {
	if o == nil || IsNil(o.Execution) {
		return nil, false
	}
	return o.Execution, true
}

// HasExecution returns a boolean if a field has been set.
func (o *SuperplaneCancelStageExecutionResponse) HasExecution() bool {
	if o != nil && !IsNil(o.Execution) {
		return true
	}

	return false
}

// SetExecution gets a reference to the given SuperplaneExecution and assigns it to the Execution field.
func (o *SuperplaneCancelStageExecutionResponse) SetExecution(v SuperplaneExecution) {
	o.Execution = &v
}

func (o SuperplaneCancelStageExecutionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneCancelStageExecutionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Execution) {
		toSerialize["execution"] = o.Execution
	}
	return toSerialize, nil
}

type NullableSuperplaneCancelStageExecutionResponse struct {
	value *SuperplaneCancelStageExecutionResponse
	isSet bool
}

func (v NullableSuperplaneCancelStageExecutionResponse) Get() *SuperplaneCancelStageExecutionResponse {
	return v.value
}

func (v *NullableSuperplaneCancelStageExecutionResponse) Set(val *SuperplaneCancelStageExecutionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneCancelStageExecutionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneCancelStageExecutionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneCancelStageExecutionResponse(val *SuperplaneCancelStageExecutionResponse) *NullableSuperplaneCancelStageExecutionResponse {
	return &NullableSuperplaneCancelStageExecutionResponse{value: val, isSet: true}
}

func (v NullableSuperplaneCancelStageExecutionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneCancelStageExecutionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


