/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// ExecutionResultReason the model 'ExecutionResultReason'
type ExecutionResultReason string

// List of ExecutionResultReason
const (
	EXECUTIONRESULTREASON_RESULT_REASON_OK ExecutionResultReason = "RESULT_REASON_OK"
	EXECUTIONRESULTREASON_RESULT_REASON_ERROR ExecutionResultReason = "RESULT_REASON_ERROR"
	EXECUTIONRESULTREASON_RESULT_REASON_MISSING_OUTPUTS ExecutionResultReason = "RESULT_REASON_MISSING_OUTPUTS"
)

// All allowed values of ExecutionResultReason enum
var AllowedExecutionResultReasonEnumValues = []ExecutionResultReason{
	"RESULT_REASON_OK",
	"RESULT_REASON_ERROR",
	"RESULT_REASON_MISSING_OUTPUTS",
}

func (v *ExecutionResultReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExecutionResultReason(value)
	for _, existing := range AllowedExecutionResultReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExecutionResultReason", value)
}

// NewExecutionResultReasonFromValue returns a pointer to a valid ExecutionResultReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExecutionResultReasonFromValue(v string) (*ExecutionResultReason, error) {
	ev := ExecutionResultReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExecutionResultReason: valid values are %v", v, AllowedExecutionResultReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExecutionResultReason) IsValid() bool {
	for _, existing := range AllowedExecutionResultReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExecutionResultReason value
func (v ExecutionResultReason) Ptr() *ExecutionResultReason {
	return &v
}

type NullableExecutionResultReason struct {
	value *ExecutionResultReason
	isSet bool
}

func (v NullableExecutionResultReason) Get() *ExecutionResultReason {
	return v.value
}

func (v *NullableExecutionResultReason) Set(val *ExecutionResultReason) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionResultReason) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionResultReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionResultReason(val *ExecutionResultReason) *NullableExecutionResultReason {
	return &NullableExecutionResultReason{value: val, isSet: true}
}

func (v NullableExecutionResultReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionResultReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

