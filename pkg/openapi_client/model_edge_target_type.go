/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// EdgeTargetType the model 'EdgeTargetType'
type EdgeTargetType string

// List of EdgeTargetType
const (
	EDGETARGETTYPE_REF_TYPE_NODE EdgeTargetType = "REF_TYPE_NODE"
	EDGETARGETTYPE_REF_TYPE_OUTPUT_BRANCH EdgeTargetType = "REF_TYPE_OUTPUT_BRANCH"
)

// All allowed values of EdgeTargetType enum
var AllowedEdgeTargetTypeEnumValues = []EdgeTargetType{
	"REF_TYPE_NODE",
	"REF_TYPE_OUTPUT_BRANCH",
}

func (v *EdgeTargetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EdgeTargetType(value)
	for _, existing := range AllowedEdgeTargetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EdgeTargetType", value)
}

// NewEdgeTargetTypeFromValue returns a pointer to a valid EdgeTargetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEdgeTargetTypeFromValue(v string) (*EdgeTargetType, error) {
	ev := EdgeTargetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EdgeTargetType: valid values are %v", v, AllowedEdgeTargetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EdgeTargetType) IsValid() bool {
	for _, existing := range AllowedEdgeTargetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EdgeTargetType value
func (v EdgeTargetType) Ptr() *EdgeTargetType {
	return &v
}

type NullableEdgeTargetType struct {
	value *EdgeTargetType
	isSet bool
}

func (v NullableEdgeTargetType) Get() *EdgeTargetType {
	return v.value
}

func (v *NullableEdgeTargetType) Set(val *EdgeTargetType) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeTargetType) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeTargetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeTargetType(val *EdgeTargetType) *NullableEdgeTargetType {
	return &NullableEdgeTargetType{value: val, isSet: true}
}

func (v NullableEdgeTargetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeTargetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

