/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneExecutorSpecSemaphore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneExecutorSpecSemaphore{}

// SuperplaneExecutorSpecSemaphore struct for SuperplaneExecutorSpecSemaphore
type SuperplaneExecutorSpecSemaphore struct {
	Project *string `json:"project,omitempty"`
	Task *string `json:"task,omitempty"`
	Branch *string `json:"branch,omitempty"`
	PipelineFile *string `json:"pipelineFile,omitempty"`
	Parameters *map[string]string `json:"parameters,omitempty"`
}

// NewSuperplaneExecutorSpecSemaphore instantiates a new SuperplaneExecutorSpecSemaphore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneExecutorSpecSemaphore() *SuperplaneExecutorSpecSemaphore {
	this := SuperplaneExecutorSpecSemaphore{}
	return &this
}

// NewSuperplaneExecutorSpecSemaphoreWithDefaults instantiates a new SuperplaneExecutorSpecSemaphore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneExecutorSpecSemaphoreWithDefaults() *SuperplaneExecutorSpecSemaphore {
	this := SuperplaneExecutorSpecSemaphore{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *SuperplaneExecutorSpecSemaphore) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutorSpecSemaphore) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *SuperplaneExecutorSpecSemaphore) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *SuperplaneExecutorSpecSemaphore) SetProject(v string) {
	o.Project = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *SuperplaneExecutorSpecSemaphore) GetTask() string {
	if o == nil || IsNil(o.Task) {
		var ret string
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutorSpecSemaphore) GetTaskOk() (*string, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *SuperplaneExecutorSpecSemaphore) HasTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given string and assigns it to the Task field.
func (o *SuperplaneExecutorSpecSemaphore) SetTask(v string) {
	o.Task = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *SuperplaneExecutorSpecSemaphore) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutorSpecSemaphore) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *SuperplaneExecutorSpecSemaphore) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *SuperplaneExecutorSpecSemaphore) SetBranch(v string) {
	o.Branch = &v
}

// GetPipelineFile returns the PipelineFile field value if set, zero value otherwise.
func (o *SuperplaneExecutorSpecSemaphore) GetPipelineFile() string {
	if o == nil || IsNil(o.PipelineFile) {
		var ret string
		return ret
	}
	return *o.PipelineFile
}

// GetPipelineFileOk returns a tuple with the PipelineFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutorSpecSemaphore) GetPipelineFileOk() (*string, bool) {
	if o == nil || IsNil(o.PipelineFile) {
		return nil, false
	}
	return o.PipelineFile, true
}

// HasPipelineFile returns a boolean if a field has been set.
func (o *SuperplaneExecutorSpecSemaphore) HasPipelineFile() bool {
	if o != nil && !IsNil(o.PipelineFile) {
		return true
	}

	return false
}

// SetPipelineFile gets a reference to the given string and assigns it to the PipelineFile field.
func (o *SuperplaneExecutorSpecSemaphore) SetPipelineFile(v string) {
	o.PipelineFile = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *SuperplaneExecutorSpecSemaphore) GetParameters() map[string]string {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutorSpecSemaphore) GetParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *SuperplaneExecutorSpecSemaphore) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *SuperplaneExecutorSpecSemaphore) SetParameters(v map[string]string) {
	o.Parameters = &v
}

func (o SuperplaneExecutorSpecSemaphore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneExecutorSpecSemaphore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.PipelineFile) {
		toSerialize["pipelineFile"] = o.PipelineFile
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableSuperplaneExecutorSpecSemaphore struct {
	value *SuperplaneExecutorSpecSemaphore
	isSet bool
}

func (v NullableSuperplaneExecutorSpecSemaphore) Get() *SuperplaneExecutorSpecSemaphore {
	return v.value
}

func (v *NullableSuperplaneExecutorSpecSemaphore) Set(val *SuperplaneExecutorSpecSemaphore) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneExecutorSpecSemaphore) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneExecutorSpecSemaphore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneExecutorSpecSemaphore(val *SuperplaneExecutorSpecSemaphore) *NullableSuperplaneExecutorSpecSemaphore {
	return &NullableSuperplaneExecutorSpecSemaphore{value: val, isSet: true}
}

func (v NullableSuperplaneExecutorSpecSemaphore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneExecutorSpecSemaphore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


