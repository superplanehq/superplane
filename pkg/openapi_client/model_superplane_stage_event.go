/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the SuperplaneStageEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneStageEvent{}

// SuperplaneStageEvent struct for SuperplaneStageEvent
type SuperplaneStageEvent struct {
	Id *string `json:"id,omitempty"`
	SourceId *string `json:"sourceId,omitempty"`
	SourceType *SuperplaneConnectionType `json:"sourceType,omitempty"`
	State *SuperplaneStageEventState `json:"state,omitempty"`
	StateReason *SuperplaneStageEventStateReason `json:"stateReason,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Approvals []SuperplaneStageEventApproval `json:"approvals,omitempty"`
	Execution *SuperplaneExecution `json:"execution,omitempty"`
	Inputs []SuperplaneKeyValuePair `json:"inputs,omitempty"`
	Label *string `json:"label,omitempty"`
}

// NewSuperplaneStageEvent instantiates a new SuperplaneStageEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneStageEvent() *SuperplaneStageEvent {
	this := SuperplaneStageEvent{}
	var sourceType SuperplaneConnectionType = SUPERPLANECONNECTIONTYPE_TYPE_UNKNOWN
	this.SourceType = &sourceType
	var state SuperplaneStageEventState = SUPERPLANESTAGEEVENTSTATE_STATE_UNKNOWN
	this.State = &state
	var stateReason SuperplaneStageEventStateReason = SUPERPLANESTAGEEVENTSTATEREASON_STATE_REASON_UNKNOWN
	this.StateReason = &stateReason
	return &this
}

// NewSuperplaneStageEventWithDefaults instantiates a new SuperplaneStageEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneStageEventWithDefaults() *SuperplaneStageEvent {
	this := SuperplaneStageEvent{}
	var sourceType SuperplaneConnectionType = SUPERPLANECONNECTIONTYPE_TYPE_UNKNOWN
	this.SourceType = &sourceType
	var state SuperplaneStageEventState = SUPERPLANESTAGEEVENTSTATE_STATE_UNKNOWN
	this.State = &state
	var stateReason SuperplaneStageEventStateReason = SUPERPLANESTAGEEVENTSTATEREASON_STATE_REASON_UNKNOWN
	this.StateReason = &stateReason
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperplaneStageEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneStageEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperplaneStageEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperplaneStageEvent) SetId(v string) {
	o.Id = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *SuperplaneStageEvent) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneStageEvent) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *SuperplaneStageEvent) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *SuperplaneStageEvent) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *SuperplaneStageEvent) GetSourceType() SuperplaneConnectionType {
	if o == nil || IsNil(o.SourceType) {
		var ret SuperplaneConnectionType
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneStageEvent) GetSourceTypeOk() (*SuperplaneConnectionType, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *SuperplaneStageEvent) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given SuperplaneConnectionType and assigns it to the SourceType field.
func (o *SuperplaneStageEvent) SetSourceType(v SuperplaneConnectionType) {
	o.SourceType = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SuperplaneStageEvent) GetState() SuperplaneStageEventState {
	if o == nil || IsNil(o.State) {
		var ret SuperplaneStageEventState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneStageEvent) GetStateOk() (*SuperplaneStageEventState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SuperplaneStageEvent) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given SuperplaneStageEventState and assigns it to the State field.
func (o *SuperplaneStageEvent) SetState(v SuperplaneStageEventState) {
	o.State = &v
}

// GetStateReason returns the StateReason field value if set, zero value otherwise.
func (o *SuperplaneStageEvent) GetStateReason() SuperplaneStageEventStateReason {
	if o == nil || IsNil(o.StateReason) {
		var ret SuperplaneStageEventStateReason
		return ret
	}
	return *o.StateReason
}

// GetStateReasonOk returns a tuple with the StateReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneStageEvent) GetStateReasonOk() (*SuperplaneStageEventStateReason, bool) {
	if o == nil || IsNil(o.StateReason) {
		return nil, false
	}
	return o.StateReason, true
}

// HasStateReason returns a boolean if a field has been set.
func (o *SuperplaneStageEvent) HasStateReason() bool {
	if o != nil && !IsNil(o.StateReason) {
		return true
	}

	return false
}

// SetStateReason gets a reference to the given SuperplaneStageEventStateReason and assigns it to the StateReason field.
func (o *SuperplaneStageEvent) SetStateReason(v SuperplaneStageEventStateReason) {
	o.StateReason = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SuperplaneStageEvent) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneStageEvent) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SuperplaneStageEvent) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SuperplaneStageEvent) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetApprovals returns the Approvals field value if set, zero value otherwise.
func (o *SuperplaneStageEvent) GetApprovals() []SuperplaneStageEventApproval {
	if o == nil || IsNil(o.Approvals) {
		var ret []SuperplaneStageEventApproval
		return ret
	}
	return o.Approvals
}

// GetApprovalsOk returns a tuple with the Approvals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneStageEvent) GetApprovalsOk() ([]SuperplaneStageEventApproval, bool) {
	if o == nil || IsNil(o.Approvals) {
		return nil, false
	}
	return o.Approvals, true
}

// HasApprovals returns a boolean if a field has been set.
func (o *SuperplaneStageEvent) HasApprovals() bool {
	if o != nil && !IsNil(o.Approvals) {
		return true
	}

	return false
}

// SetApprovals gets a reference to the given []SuperplaneStageEventApproval and assigns it to the Approvals field.
func (o *SuperplaneStageEvent) SetApprovals(v []SuperplaneStageEventApproval) {
	o.Approvals = v
}

// GetExecution returns the Execution field value if set, zero value otherwise.
func (o *SuperplaneStageEvent) GetExecution() SuperplaneExecution {
	if o == nil || IsNil(o.Execution) {
		var ret SuperplaneExecution
		return ret
	}
	return *o.Execution
}

// GetExecutionOk returns a tuple with the Execution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneStageEvent) GetExecutionOk() (*SuperplaneExecution, bool) {
	if o == nil || IsNil(o.Execution) {
		return nil, false
	}
	return o.Execution, true
}

// HasExecution returns a boolean if a field has been set.
func (o *SuperplaneStageEvent) HasExecution() bool {
	if o != nil && !IsNil(o.Execution) {
		return true
	}

	return false
}

// SetExecution gets a reference to the given SuperplaneExecution and assigns it to the Execution field.
func (o *SuperplaneStageEvent) SetExecution(v SuperplaneExecution) {
	o.Execution = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *SuperplaneStageEvent) GetInputs() []SuperplaneKeyValuePair {
	if o == nil || IsNil(o.Inputs) {
		var ret []SuperplaneKeyValuePair
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneStageEvent) GetInputsOk() ([]SuperplaneKeyValuePair, bool) {
	if o == nil || IsNil(o.Inputs) {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *SuperplaneStageEvent) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []SuperplaneKeyValuePair and assigns it to the Inputs field.
func (o *SuperplaneStageEvent) SetInputs(v []SuperplaneKeyValuePair) {
	o.Inputs = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *SuperplaneStageEvent) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneStageEvent) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *SuperplaneStageEvent) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *SuperplaneStageEvent) SetLabel(v string) {
	o.Label = &v
}

func (o SuperplaneStageEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneStageEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.SourceType) {
		toSerialize["sourceType"] = o.SourceType
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.StateReason) {
		toSerialize["stateReason"] = o.StateReason
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Approvals) {
		toSerialize["approvals"] = o.Approvals
	}
	if !IsNil(o.Execution) {
		toSerialize["execution"] = o.Execution
	}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

type NullableSuperplaneStageEvent struct {
	value *SuperplaneStageEvent
	isSet bool
}

func (v NullableSuperplaneStageEvent) Get() *SuperplaneStageEvent {
	return v.value
}

func (v *NullableSuperplaneStageEvent) Set(val *SuperplaneStageEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneStageEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneStageEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneStageEvent(val *SuperplaneStageEvent) *NullableSuperplaneStageEvent {
	return &NullableSuperplaneStageEvent{value: val, isSet: true}
}

func (v NullableSuperplaneStageEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneStageEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


