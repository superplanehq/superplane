/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneExecutor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneExecutor{}

// SuperplaneExecutor struct for SuperplaneExecutor
type SuperplaneExecutor struct {
	Type *string `json:"type,omitempty"`
	Integration *IntegrationsIntegrationRef `json:"integration,omitempty"`
	Resource *IntegrationsResourceRef `json:"resource,omitempty"`
	Spec map[string]interface{} `json:"spec,omitempty"`
}

// NewSuperplaneExecutor instantiates a new SuperplaneExecutor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneExecutor() *SuperplaneExecutor {
	this := SuperplaneExecutor{}
	return &this
}

// NewSuperplaneExecutorWithDefaults instantiates a new SuperplaneExecutor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneExecutorWithDefaults() *SuperplaneExecutor {
	this := SuperplaneExecutor{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SuperplaneExecutor) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutor) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SuperplaneExecutor) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SuperplaneExecutor) SetType(v string) {
	o.Type = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *SuperplaneExecutor) GetIntegration() IntegrationsIntegrationRef {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationsIntegrationRef
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutor) GetIntegrationOk() (*IntegrationsIntegrationRef, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *SuperplaneExecutor) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationsIntegrationRef and assigns it to the Integration field.
func (o *SuperplaneExecutor) SetIntegration(v IntegrationsIntegrationRef) {
	o.Integration = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *SuperplaneExecutor) GetResource() IntegrationsResourceRef {
	if o == nil || IsNil(o.Resource) {
		var ret IntegrationsResourceRef
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutor) GetResourceOk() (*IntegrationsResourceRef, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *SuperplaneExecutor) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given IntegrationsResourceRef and assigns it to the Resource field.
func (o *SuperplaneExecutor) SetResource(v IntegrationsResourceRef) {
	o.Resource = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *SuperplaneExecutor) GetSpec() map[string]interface{} {
	if o == nil || IsNil(o.Spec) {
		var ret map[string]interface{}
		return ret
	}
	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneExecutor) GetSpecOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Spec) {
		return map[string]interface{}{}, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *SuperplaneExecutor) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given map[string]interface{} and assigns it to the Spec field.
func (o *SuperplaneExecutor) SetSpec(v map[string]interface{}) {
	o.Spec = v
}

func (o SuperplaneExecutor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneExecutor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

type NullableSuperplaneExecutor struct {
	value *SuperplaneExecutor
	isSet bool
}

func (v NullableSuperplaneExecutor) Get() *SuperplaneExecutor {
	return v.value
}

func (v *NullableSuperplaneExecutor) Set(val *SuperplaneExecutor) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneExecutor) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneExecutor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneExecutor(val *SuperplaneExecutor) *NullableSuperplaneExecutor {
	return &NullableSuperplaneExecutor{value: val, isSet: true}
}

func (v NullableSuperplaneExecutor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneExecutor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


