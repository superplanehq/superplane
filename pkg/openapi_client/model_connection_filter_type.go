/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// ConnectionFilterType the model 'ConnectionFilterType'
type ConnectionFilterType string

// List of ConnectionFilterType
const (
	CONNECTIONFILTERTYPE_FILTER_TYPE_UNKNOWN ConnectionFilterType = "FILTER_TYPE_UNKNOWN"
	CONNECTIONFILTERTYPE_FILTER_TYPE_DATA ConnectionFilterType = "FILTER_TYPE_DATA"
	CONNECTIONFILTERTYPE_FILTER_TYPE_HEADER ConnectionFilterType = "FILTER_TYPE_HEADER"
)

// All allowed values of ConnectionFilterType enum
var AllowedConnectionFilterTypeEnumValues = []ConnectionFilterType{
	"FILTER_TYPE_UNKNOWN",
	"FILTER_TYPE_DATA",
	"FILTER_TYPE_HEADER",
}

func (v *ConnectionFilterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionFilterType(value)
	for _, existing := range AllowedConnectionFilterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionFilterType", value)
}

// NewConnectionFilterTypeFromValue returns a pointer to a valid ConnectionFilterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionFilterTypeFromValue(v string) (*ConnectionFilterType, error) {
	ev := ConnectionFilterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionFilterType: valid values are %v", v, AllowedConnectionFilterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionFilterType) IsValid() bool {
	for _, existing := range AllowedConnectionFilterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionFilterType value
func (v ConnectionFilterType) Ptr() *ConnectionFilterType {
	return &v
}

type NullableConnectionFilterType struct {
	value *ConnectionFilterType
	isSet bool
}

func (v NullableConnectionFilterType) Get() *ConnectionFilterType {
	return v.value
}

func (v *NullableConnectionFilterType) Set(val *ConnectionFilterType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionFilterType(val *ConnectionFilterType) *NullableConnectionFilterType {
	return &NullableConnectionFilterType{value: val, isSet: true}
}

func (v NullableConnectionFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

