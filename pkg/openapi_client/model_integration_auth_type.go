/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// IntegrationAuthType the model 'IntegrationAuthType'
type IntegrationAuthType string

// List of IntegrationAuthType
const (
	INTEGRATIONAUTHTYPE_AUTH_TYPE_NONE IntegrationAuthType = "AUTH_TYPE_NONE"
	INTEGRATIONAUTHTYPE_AUTH_TYPE_TOKEN IntegrationAuthType = "AUTH_TYPE_TOKEN"
	INTEGRATIONAUTHTYPE_AUTH_TYPE_OIDC IntegrationAuthType = "AUTH_TYPE_OIDC"
)

// All allowed values of IntegrationAuthType enum
var AllowedIntegrationAuthTypeEnumValues = []IntegrationAuthType{
	"AUTH_TYPE_NONE",
	"AUTH_TYPE_TOKEN",
	"AUTH_TYPE_OIDC",
}

func (v *IntegrationAuthType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntegrationAuthType(value)
	for _, existing := range AllowedIntegrationAuthTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntegrationAuthType", value)
}

// NewIntegrationAuthTypeFromValue returns a pointer to a valid IntegrationAuthType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntegrationAuthTypeFromValue(v string) (*IntegrationAuthType, error) {
	ev := IntegrationAuthType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntegrationAuthType: valid values are %v", v, AllowedIntegrationAuthTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntegrationAuthType) IsValid() bool {
	for _, existing := range AllowedIntegrationAuthTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntegrationAuthType value
func (v IntegrationAuthType) Ptr() *IntegrationAuthType {
	return &v
}

type NullableIntegrationAuthType struct {
	value *IntegrationAuthType
	isSet bool
}

func (v NullableIntegrationAuthType) Get() *IntegrationAuthType {
	return v.value
}

func (v *NullableIntegrationAuthType) Set(val *IntegrationAuthType) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationAuthType) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationAuthType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationAuthType(val *IntegrationAuthType) *NullableIntegrationAuthType {
	return &NullableIntegrationAuthType{value: val, isSet: true}
}

func (v NullableIntegrationAuthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationAuthType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

