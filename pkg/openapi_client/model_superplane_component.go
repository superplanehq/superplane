/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneComponent{}

// SuperplaneComponent struct for SuperplaneComponent
type SuperplaneComponent struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Configuration []SuperplaneConfigurationField `json:"configuration,omitempty"`
	Branches []SuperplaneOutputBranch `json:"branches,omitempty"`
}

// NewSuperplaneComponent instantiates a new SuperplaneComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneComponent() *SuperplaneComponent {
	this := SuperplaneComponent{}
	return &this
}

// NewSuperplaneComponentWithDefaults instantiates a new SuperplaneComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneComponentWithDefaults() *SuperplaneComponent {
	this := SuperplaneComponent{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SuperplaneComponent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneComponent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SuperplaneComponent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SuperplaneComponent) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SuperplaneComponent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneComponent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SuperplaneComponent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SuperplaneComponent) SetDescription(v string) {
	o.Description = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *SuperplaneComponent) GetConfiguration() []SuperplaneConfigurationField {
	if o == nil || IsNil(o.Configuration) {
		var ret []SuperplaneConfigurationField
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneComponent) GetConfigurationOk() ([]SuperplaneConfigurationField, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *SuperplaneComponent) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given []SuperplaneConfigurationField and assigns it to the Configuration field.
func (o *SuperplaneComponent) SetConfiguration(v []SuperplaneConfigurationField) {
	o.Configuration = v
}

// GetBranches returns the Branches field value if set, zero value otherwise.
func (o *SuperplaneComponent) GetBranches() []SuperplaneOutputBranch {
	if o == nil || IsNil(o.Branches) {
		var ret []SuperplaneOutputBranch
		return ret
	}
	return o.Branches
}

// GetBranchesOk returns a tuple with the Branches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneComponent) GetBranchesOk() ([]SuperplaneOutputBranch, bool) {
	if o == nil || IsNil(o.Branches) {
		return nil, false
	}
	return o.Branches, true
}

// HasBranches returns a boolean if a field has been set.
func (o *SuperplaneComponent) HasBranches() bool {
	if o != nil && !IsNil(o.Branches) {
		return true
	}

	return false
}

// SetBranches gets a reference to the given []SuperplaneOutputBranch and assigns it to the Branches field.
func (o *SuperplaneComponent) SetBranches(v []SuperplaneOutputBranch) {
	o.Branches = v
}

func (o SuperplaneComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.Branches) {
		toSerialize["branches"] = o.Branches
	}
	return toSerialize, nil
}

type NullableSuperplaneComponent struct {
	value *SuperplaneComponent
	isSet bool
}

func (v NullableSuperplaneComponent) Get() *SuperplaneComponent {
	return v.value
}

func (v *NullableSuperplaneComponent) Set(val *SuperplaneComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneComponent(val *SuperplaneComponent) *NullableSuperplaneComponent {
	return &NullableSuperplaneComponent{value: val, isSet: true}
}

func (v NullableSuperplaneComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


