/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// AlertAlertType the model 'AlertAlertType'
type AlertAlertType string

// List of AlertAlertType
const (
	ALERTALERTTYPE_ALERT_TYPE_UNKNOWN AlertAlertType = "ALERT_TYPE_UNKNOWN"
	ALERTALERTTYPE_ALERT_TYPE_ERROR AlertAlertType = "ALERT_TYPE_ERROR"
	ALERTALERTTYPE_ALERT_TYPE_WARNING AlertAlertType = "ALERT_TYPE_WARNING"
	ALERTALERTTYPE_ALERT_TYPE_INFO AlertAlertType = "ALERT_TYPE_INFO"
)

// All allowed values of AlertAlertType enum
var AllowedAlertAlertTypeEnumValues = []AlertAlertType{
	"ALERT_TYPE_UNKNOWN",
	"ALERT_TYPE_ERROR",
	"ALERT_TYPE_WARNING",
	"ALERT_TYPE_INFO",
}

func (v *AlertAlertType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertAlertType(value)
	for _, existing := range AllowedAlertAlertTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertAlertType", value)
}

// NewAlertAlertTypeFromValue returns a pointer to a valid AlertAlertType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertAlertTypeFromValue(v string) (*AlertAlertType, error) {
	ev := AlertAlertType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertAlertType: valid values are %v", v, AllowedAlertAlertTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertAlertType) IsValid() bool {
	for _, existing := range AllowedAlertAlertTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertAlertType value
func (v AlertAlertType) Ptr() *AlertAlertType {
	return &v
}

type NullableAlertAlertType struct {
	value *AlertAlertType
	isSet bool
}

func (v NullableAlertAlertType) Get() *AlertAlertType {
	return v.value
}

func (v *NullableAlertAlertType) Set(val *AlertAlertType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertAlertType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertAlertType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertAlertType(val *AlertAlertType) *NullableAlertAlertType {
	return &NullableAlertAlertType{value: val, isSet: true}
}

func (v NullableAlertAlertType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertAlertType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

