/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneEventSourceStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneEventSourceStatus{}

// SuperplaneEventSourceStatus struct for SuperplaneEventSourceStatus
type SuperplaneEventSourceStatus struct {
	QueueItemsCount *int64 `json:"queueItemsCount,omitempty"`
	LastEvents []SuperplaneEvent `json:"lastEvents,omitempty"`
}

// NewSuperplaneEventSourceStatus instantiates a new SuperplaneEventSourceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneEventSourceStatus() *SuperplaneEventSourceStatus {
	this := SuperplaneEventSourceStatus{}
	return &this
}

// NewSuperplaneEventSourceStatusWithDefaults instantiates a new SuperplaneEventSourceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneEventSourceStatusWithDefaults() *SuperplaneEventSourceStatus {
	this := SuperplaneEventSourceStatus{}
	return &this
}

// GetQueueItemsCount returns the QueueItemsCount field value if set, zero value otherwise.
func (o *SuperplaneEventSourceStatus) GetQueueItemsCount() int64 {
	if o == nil || IsNil(o.QueueItemsCount) {
		var ret int64
		return ret
	}
	return *o.QueueItemsCount
}

// GetQueueItemsCountOk returns a tuple with the QueueItemsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSourceStatus) GetQueueItemsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.QueueItemsCount) {
		return nil, false
	}
	return o.QueueItemsCount, true
}

// HasQueueItemsCount returns a boolean if a field has been set.
func (o *SuperplaneEventSourceStatus) HasQueueItemsCount() bool {
	if o != nil && !IsNil(o.QueueItemsCount) {
		return true
	}

	return false
}

// SetQueueItemsCount gets a reference to the given int64 and assigns it to the QueueItemsCount field.
func (o *SuperplaneEventSourceStatus) SetQueueItemsCount(v int64) {
	o.QueueItemsCount = &v
}

// GetLastEvents returns the LastEvents field value if set, zero value otherwise.
func (o *SuperplaneEventSourceStatus) GetLastEvents() []SuperplaneEvent {
	if o == nil || IsNil(o.LastEvents) {
		var ret []SuperplaneEvent
		return ret
	}
	return o.LastEvents
}

// GetLastEventsOk returns a tuple with the LastEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSourceStatus) GetLastEventsOk() ([]SuperplaneEvent, bool) {
	if o == nil || IsNil(o.LastEvents) {
		return nil, false
	}
	return o.LastEvents, true
}

// HasLastEvents returns a boolean if a field has been set.
func (o *SuperplaneEventSourceStatus) HasLastEvents() bool {
	if o != nil && !IsNil(o.LastEvents) {
		return true
	}

	return false
}

// SetLastEvents gets a reference to the given []SuperplaneEvent and assigns it to the LastEvents field.
func (o *SuperplaneEventSourceStatus) SetLastEvents(v []SuperplaneEvent) {
	o.LastEvents = v
}

func (o SuperplaneEventSourceStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneEventSourceStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QueueItemsCount) {
		toSerialize["queueItemsCount"] = o.QueueItemsCount
	}
	if !IsNil(o.LastEvents) {
		toSerialize["lastEvents"] = o.LastEvents
	}
	return toSerialize, nil
}

type NullableSuperplaneEventSourceStatus struct {
	value *SuperplaneEventSourceStatus
	isSet bool
}

func (v NullableSuperplaneEventSourceStatus) Get() *SuperplaneEventSourceStatus {
	return v.value
}

func (v *NullableSuperplaneEventSourceStatus) Set(val *SuperplaneEventSourceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEventSourceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEventSourceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEventSourceStatus(val *SuperplaneEventSourceStatus) *NullableSuperplaneEventSourceStatus {
	return &NullableSuperplaneEventSourceStatus{value: val, isSet: true}
}

func (v NullableSuperplaneEventSourceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEventSourceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


