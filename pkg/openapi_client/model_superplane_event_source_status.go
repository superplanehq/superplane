/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneEventSourceStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneEventSourceStatus{}

// SuperplaneEventSourceStatus struct for SuperplaneEventSourceStatus
type SuperplaneEventSourceStatus struct {
	History *StatusHistory `json:"history,omitempty"`
	Schedule *EventSourceStatusSchedule `json:"schedule,omitempty"`
}

// NewSuperplaneEventSourceStatus instantiates a new SuperplaneEventSourceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneEventSourceStatus() *SuperplaneEventSourceStatus {
	this := SuperplaneEventSourceStatus{}
	return &this
}

// NewSuperplaneEventSourceStatusWithDefaults instantiates a new SuperplaneEventSourceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneEventSourceStatusWithDefaults() *SuperplaneEventSourceStatus {
	this := SuperplaneEventSourceStatus{}
	return &this
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *SuperplaneEventSourceStatus) GetHistory() StatusHistory {
	if o == nil || IsNil(o.History) {
		var ret StatusHistory
		return ret
	}
	return *o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSourceStatus) GetHistoryOk() (*StatusHistory, bool) {
	if o == nil || IsNil(o.History) {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *SuperplaneEventSourceStatus) HasHistory() bool {
	if o != nil && !IsNil(o.History) {
		return true
	}

	return false
}

// SetHistory gets a reference to the given StatusHistory and assigns it to the History field.
func (o *SuperplaneEventSourceStatus) SetHistory(v StatusHistory) {
	o.History = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *SuperplaneEventSourceStatus) GetSchedule() EventSourceStatusSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret EventSourceStatusSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSourceStatus) GetScheduleOk() (*EventSourceStatusSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *SuperplaneEventSourceStatus) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given EventSourceStatusSchedule and assigns it to the Schedule field.
func (o *SuperplaneEventSourceStatus) SetSchedule(v EventSourceStatusSchedule) {
	o.Schedule = &v
}

func (o SuperplaneEventSourceStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneEventSourceStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.History) {
		toSerialize["history"] = o.History
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	return toSerialize, nil
}

type NullableSuperplaneEventSourceStatus struct {
	value *SuperplaneEventSourceStatus
	isSet bool
}

func (v NullableSuperplaneEventSourceStatus) Get() *SuperplaneEventSourceStatus {
	return v.value
}

func (v *NullableSuperplaneEventSourceStatus) Set(val *SuperplaneEventSourceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEventSourceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEventSourceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEventSourceStatus(val *SuperplaneEventSourceStatus) *NullableSuperplaneEventSourceStatus {
	return &NullableSuperplaneEventSourceStatus{value: val, isSet: true}
}

func (v NullableSuperplaneEventSourceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEventSourceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


