/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// WorkflowsWorkflowNodeExecutionResultReason the model 'WorkflowsWorkflowNodeExecutionResultReason'
type WorkflowsWorkflowNodeExecutionResultReason string

// List of WorkflowsWorkflowNodeExecutionResultReason
const (
	WORKFLOWSWORKFLOWNODEEXECUTIONRESULTREASON_RESULT_REASON_OK WorkflowsWorkflowNodeExecutionResultReason = "RESULT_REASON_OK"
	WORKFLOWSWORKFLOWNODEEXECUTIONRESULTREASON_RESULT_REASON_ERROR WorkflowsWorkflowNodeExecutionResultReason = "RESULT_REASON_ERROR"
)

// All allowed values of WorkflowsWorkflowNodeExecutionResultReason enum
var AllowedWorkflowsWorkflowNodeExecutionResultReasonEnumValues = []WorkflowsWorkflowNodeExecutionResultReason{
	"RESULT_REASON_OK",
	"RESULT_REASON_ERROR",
}

func (v *WorkflowsWorkflowNodeExecutionResultReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkflowsWorkflowNodeExecutionResultReason(value)
	for _, existing := range AllowedWorkflowsWorkflowNodeExecutionResultReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkflowsWorkflowNodeExecutionResultReason", value)
}

// NewWorkflowsWorkflowNodeExecutionResultReasonFromValue returns a pointer to a valid WorkflowsWorkflowNodeExecutionResultReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkflowsWorkflowNodeExecutionResultReasonFromValue(v string) (*WorkflowsWorkflowNodeExecutionResultReason, error) {
	ev := WorkflowsWorkflowNodeExecutionResultReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkflowsWorkflowNodeExecutionResultReason: valid values are %v", v, AllowedWorkflowsWorkflowNodeExecutionResultReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkflowsWorkflowNodeExecutionResultReason) IsValid() bool {
	for _, existing := range AllowedWorkflowsWorkflowNodeExecutionResultReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkflowsWorkflowNodeExecutionResultReason value
func (v WorkflowsWorkflowNodeExecutionResultReason) Ptr() *WorkflowsWorkflowNodeExecutionResultReason {
	return &v
}

type NullableWorkflowsWorkflowNodeExecutionResultReason struct {
	value *WorkflowsWorkflowNodeExecutionResultReason
	isSet bool
}

func (v NullableWorkflowsWorkflowNodeExecutionResultReason) Get() *WorkflowsWorkflowNodeExecutionResultReason {
	return v.value
}

func (v *NullableWorkflowsWorkflowNodeExecutionResultReason) Set(val *WorkflowsWorkflowNodeExecutionResultReason) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowsWorkflowNodeExecutionResultReason) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowsWorkflowNodeExecutionResultReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowsWorkflowNodeExecutionResultReason(val *WorkflowsWorkflowNodeExecutionResultReason) *NullableWorkflowsWorkflowNodeExecutionResultReason {
	return &NullableWorkflowsWorkflowNodeExecutionResultReason{value: val, isSet: true}
}

func (v NullableWorkflowsWorkflowNodeExecutionResultReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowsWorkflowNodeExecutionResultReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

