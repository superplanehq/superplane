/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the SuperplaneEventSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneEventSource{}

// SuperplaneEventSource struct for SuperplaneEventSource
type SuperplaneEventSource struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	CanvasId *string `json:"canvasId,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
}

// NewSuperplaneEventSource instantiates a new SuperplaneEventSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneEventSource() *SuperplaneEventSource {
	this := SuperplaneEventSource{}
	return &this
}

// NewSuperplaneEventSourceWithDefaults instantiates a new SuperplaneEventSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneEventSourceWithDefaults() *SuperplaneEventSource {
	this := SuperplaneEventSource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperplaneEventSource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperplaneEventSource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperplaneEventSource) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SuperplaneEventSource) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSource) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SuperplaneEventSource) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SuperplaneEventSource) SetName(v string) {
	o.Name = &v
}

// GetCanvasId returns the CanvasId field value if set, zero value otherwise.
func (o *SuperplaneEventSource) GetCanvasId() string {
	if o == nil || IsNil(o.CanvasId) {
		var ret string
		return ret
	}
	return *o.CanvasId
}

// GetCanvasIdOk returns a tuple with the CanvasId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSource) GetCanvasIdOk() (*string, bool) {
	if o == nil || IsNil(o.CanvasId) {
		return nil, false
	}
	return o.CanvasId, true
}

// HasCanvasId returns a boolean if a field has been set.
func (o *SuperplaneEventSource) HasCanvasId() bool {
	if o != nil && !IsNil(o.CanvasId) {
		return true
	}

	return false
}

// SetCanvasId gets a reference to the given string and assigns it to the CanvasId field.
func (o *SuperplaneEventSource) SetCanvasId(v string) {
	o.CanvasId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SuperplaneEventSource) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSource) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SuperplaneEventSource) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SuperplaneEventSource) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o SuperplaneEventSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneEventSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CanvasId) {
		toSerialize["canvasId"] = o.CanvasId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableSuperplaneEventSource struct {
	value *SuperplaneEventSource
	isSet bool
}

func (v NullableSuperplaneEventSource) Get() *SuperplaneEventSource {
	return v.value
}

func (v *NullableSuperplaneEventSource) Set(val *SuperplaneEventSource) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEventSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEventSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEventSource(val *SuperplaneEventSource) *NullableSuperplaneEventSource {
	return &NullableSuperplaneEventSource{value: val, isSet: true}
}

func (v NullableSuperplaneEventSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEventSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


