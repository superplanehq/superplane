/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the ConnectionDataFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionDataFilter{}

// ConnectionDataFilter struct for ConnectionDataFilter
type ConnectionDataFilter struct {
	Expression *string `json:"expression,omitempty"`
}

// NewConnectionDataFilter instantiates a new ConnectionDataFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionDataFilter() *ConnectionDataFilter {
	this := ConnectionDataFilter{}
	return &this
}

// NewConnectionDataFilterWithDefaults instantiates a new ConnectionDataFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionDataFilterWithDefaults() *ConnectionDataFilter {
	this := ConnectionDataFilter{}
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *ConnectionDataFilter) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDataFilter) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *ConnectionDataFilter) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *ConnectionDataFilter) SetExpression(v string) {
	o.Expression = &v
}

func (o ConnectionDataFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionDataFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	return toSerialize, nil
}

type NullableConnectionDataFilter struct {
	value *ConnectionDataFilter
	isSet bool
}

func (v NullableConnectionDataFilter) Get() *ConnectionDataFilter {
	return v.value
}

func (v *NullableConnectionDataFilter) Set(val *ConnectionDataFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionDataFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionDataFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionDataFilter(val *ConnectionDataFilter) *NullableConnectionDataFilter {
	return &NullableConnectionDataFilter{value: val, isSet: true}
}

func (v NullableConnectionDataFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionDataFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


