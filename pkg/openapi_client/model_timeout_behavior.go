/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// TimeoutBehavior the model 'TimeoutBehavior'
type TimeoutBehavior string

// List of TimeoutBehavior
const (
	TIMEOUTBEHAVIOR_BEHAVIOR_DROP TimeoutBehavior = "BEHAVIOR_DROP"
	TIMEOUTBEHAVIOR_BEHAVIOR_EMIT TimeoutBehavior = "BEHAVIOR_EMIT"
)

// All allowed values of TimeoutBehavior enum
var AllowedTimeoutBehaviorEnumValues = []TimeoutBehavior{
	"BEHAVIOR_DROP",
	"BEHAVIOR_EMIT",
}

func (v *TimeoutBehavior) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeoutBehavior(value)
	for _, existing := range AllowedTimeoutBehaviorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeoutBehavior", value)
}

// NewTimeoutBehaviorFromValue returns a pointer to a valid TimeoutBehavior
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeoutBehaviorFromValue(v string) (*TimeoutBehavior, error) {
	ev := TimeoutBehavior(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeoutBehavior: valid values are %v", v, AllowedTimeoutBehaviorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeoutBehavior) IsValid() bool {
	for _, existing := range AllowedTimeoutBehaviorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeoutBehavior value
func (v TimeoutBehavior) Ptr() *TimeoutBehavior {
	return &v
}

type NullableTimeoutBehavior struct {
	value *TimeoutBehavior
	isSet bool
}

func (v NullableTimeoutBehavior) Get() *TimeoutBehavior {
	return v.value
}

func (v *NullableTimeoutBehavior) Set(val *TimeoutBehavior) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeoutBehavior) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeoutBehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeoutBehavior(val *TimeoutBehavior) *NullableTimeoutBehavior {
	return &NullableTimeoutBehavior{value: val, isSet: true}
}

func (v NullableTimeoutBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeoutBehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

