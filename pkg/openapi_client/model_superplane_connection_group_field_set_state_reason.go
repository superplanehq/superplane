/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneConnectionGroupFieldSetStateReason the model 'SuperplaneConnectionGroupFieldSetStateReason'
type SuperplaneConnectionGroupFieldSetStateReason string

// List of SuperplaneConnectionGroupFieldSetStateReason
const (
	SUPERPLANECONNECTIONGROUPFIELDSETSTATEREASON_STATE_REASON_NONE SuperplaneConnectionGroupFieldSetStateReason = "STATE_REASON_NONE"
	SUPERPLANECONNECTIONGROUPFIELDSETSTATEREASON_STATE_REASON_OK SuperplaneConnectionGroupFieldSetStateReason = "STATE_REASON_OK"
	SUPERPLANECONNECTIONGROUPFIELDSETSTATEREASON_STATE_REASON_TIMEOUT SuperplaneConnectionGroupFieldSetStateReason = "STATE_REASON_TIMEOUT"
)

// All allowed values of SuperplaneConnectionGroupFieldSetStateReason enum
var AllowedSuperplaneConnectionGroupFieldSetStateReasonEnumValues = []SuperplaneConnectionGroupFieldSetStateReason{
	"STATE_REASON_NONE",
	"STATE_REASON_OK",
	"STATE_REASON_TIMEOUT",
}

func (v *SuperplaneConnectionGroupFieldSetStateReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneConnectionGroupFieldSetStateReason(value)
	for _, existing := range AllowedSuperplaneConnectionGroupFieldSetStateReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneConnectionGroupFieldSetStateReason", value)
}

// NewSuperplaneConnectionGroupFieldSetStateReasonFromValue returns a pointer to a valid SuperplaneConnectionGroupFieldSetStateReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneConnectionGroupFieldSetStateReasonFromValue(v string) (*SuperplaneConnectionGroupFieldSetStateReason, error) {
	ev := SuperplaneConnectionGroupFieldSetStateReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneConnectionGroupFieldSetStateReason: valid values are %v", v, AllowedSuperplaneConnectionGroupFieldSetStateReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneConnectionGroupFieldSetStateReason) IsValid() bool {
	for _, existing := range AllowedSuperplaneConnectionGroupFieldSetStateReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneConnectionGroupFieldSetStateReason value
func (v SuperplaneConnectionGroupFieldSetStateReason) Ptr() *SuperplaneConnectionGroupFieldSetStateReason {
	return &v
}

type NullableSuperplaneConnectionGroupFieldSetStateReason struct {
	value *SuperplaneConnectionGroupFieldSetStateReason
	isSet bool
}

func (v NullableSuperplaneConnectionGroupFieldSetStateReason) Get() *SuperplaneConnectionGroupFieldSetStateReason {
	return v.value
}

func (v *NullableSuperplaneConnectionGroupFieldSetStateReason) Set(val *SuperplaneConnectionGroupFieldSetStateReason) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneConnectionGroupFieldSetStateReason) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneConnectionGroupFieldSetStateReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneConnectionGroupFieldSetStateReason(val *SuperplaneConnectionGroupFieldSetStateReason) *NullableSuperplaneConnectionGroupFieldSetStateReason {
	return &NullableSuperplaneConnectionGroupFieldSetStateReason{value: val, isSet: true}
}

func (v NullableSuperplaneConnectionGroupFieldSetStateReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneConnectionGroupFieldSetStateReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

