/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the InputMappingValueFrom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputMappingValueFrom{}

// InputMappingValueFrom struct for InputMappingValueFrom
type InputMappingValueFrom struct {
	EventData *InputMappingValueFromEventData `json:"eventData,omitempty"`
	LastExecution *InputMappingValueFromLastExecution `json:"lastExecution,omitempty"`
}

// NewInputMappingValueFrom instantiates a new InputMappingValueFrom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputMappingValueFrom() *InputMappingValueFrom {
	this := InputMappingValueFrom{}
	return &this
}

// NewInputMappingValueFromWithDefaults instantiates a new InputMappingValueFrom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputMappingValueFromWithDefaults() *InputMappingValueFrom {
	this := InputMappingValueFrom{}
	return &this
}

// GetEventData returns the EventData field value if set, zero value otherwise.
func (o *InputMappingValueFrom) GetEventData() InputMappingValueFromEventData {
	if o == nil || IsNil(o.EventData) {
		var ret InputMappingValueFromEventData
		return ret
	}
	return *o.EventData
}

// GetEventDataOk returns a tuple with the EventData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputMappingValueFrom) GetEventDataOk() (*InputMappingValueFromEventData, bool) {
	if o == nil || IsNil(o.EventData) {
		return nil, false
	}
	return o.EventData, true
}

// HasEventData returns a boolean if a field has been set.
func (o *InputMappingValueFrom) HasEventData() bool {
	if o != nil && !IsNil(o.EventData) {
		return true
	}

	return false
}

// SetEventData gets a reference to the given InputMappingValueFromEventData and assigns it to the EventData field.
func (o *InputMappingValueFrom) SetEventData(v InputMappingValueFromEventData) {
	o.EventData = &v
}

// GetLastExecution returns the LastExecution field value if set, zero value otherwise.
func (o *InputMappingValueFrom) GetLastExecution() InputMappingValueFromLastExecution {
	if o == nil || IsNil(o.LastExecution) {
		var ret InputMappingValueFromLastExecution
		return ret
	}
	return *o.LastExecution
}

// GetLastExecutionOk returns a tuple with the LastExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputMappingValueFrom) GetLastExecutionOk() (*InputMappingValueFromLastExecution, bool) {
	if o == nil || IsNil(o.LastExecution) {
		return nil, false
	}
	return o.LastExecution, true
}

// HasLastExecution returns a boolean if a field has been set.
func (o *InputMappingValueFrom) HasLastExecution() bool {
	if o != nil && !IsNil(o.LastExecution) {
		return true
	}

	return false
}

// SetLastExecution gets a reference to the given InputMappingValueFromLastExecution and assigns it to the LastExecution field.
func (o *InputMappingValueFrom) SetLastExecution(v InputMappingValueFromLastExecution) {
	o.LastExecution = &v
}

func (o InputMappingValueFrom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputMappingValueFrom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventData) {
		toSerialize["eventData"] = o.EventData
	}
	if !IsNil(o.LastExecution) {
		toSerialize["lastExecution"] = o.LastExecution
	}
	return toSerialize, nil
}

type NullableInputMappingValueFrom struct {
	value *InputMappingValueFrom
	isSet bool
}

func (v NullableInputMappingValueFrom) Get() *InputMappingValueFrom {
	return v.value
}

func (v *NullableInputMappingValueFrom) Set(val *InputMappingValueFrom) {
	v.value = val
	v.isSet = true
}

func (v NullableInputMappingValueFrom) IsSet() bool {
	return v.isSet
}

func (v *NullableInputMappingValueFrom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputMappingValueFrom(val *InputMappingValueFrom) *NullableInputMappingValueFrom {
	return &NullableInputMappingValueFrom{value: val, isSet: true}
}

func (v NullableInputMappingValueFrom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputMappingValueFrom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


