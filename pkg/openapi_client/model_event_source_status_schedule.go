/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the EventSourceStatusSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSourceStatusSchedule{}

// EventSourceStatusSchedule struct for EventSourceStatusSchedule
type EventSourceStatusSchedule struct {
	LastTrigger *time.Time `json:"lastTrigger,omitempty"`
	NextTrigger *time.Time `json:"nextTrigger,omitempty"`
}

// NewEventSourceStatusSchedule instantiates a new EventSourceStatusSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSourceStatusSchedule() *EventSourceStatusSchedule {
	this := EventSourceStatusSchedule{}
	return &this
}

// NewEventSourceStatusScheduleWithDefaults instantiates a new EventSourceStatusSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSourceStatusScheduleWithDefaults() *EventSourceStatusSchedule {
	this := EventSourceStatusSchedule{}
	return &this
}

// GetLastTrigger returns the LastTrigger field value if set, zero value otherwise.
func (o *EventSourceStatusSchedule) GetLastTrigger() time.Time {
	if o == nil || IsNil(o.LastTrigger) {
		var ret time.Time
		return ret
	}
	return *o.LastTrigger
}

// GetLastTriggerOk returns a tuple with the LastTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSourceStatusSchedule) GetLastTriggerOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastTrigger) {
		return nil, false
	}
	return o.LastTrigger, true
}

// HasLastTrigger returns a boolean if a field has been set.
func (o *EventSourceStatusSchedule) HasLastTrigger() bool {
	if o != nil && !IsNil(o.LastTrigger) {
		return true
	}

	return false
}

// SetLastTrigger gets a reference to the given time.Time and assigns it to the LastTrigger field.
func (o *EventSourceStatusSchedule) SetLastTrigger(v time.Time) {
	o.LastTrigger = &v
}

// GetNextTrigger returns the NextTrigger field value if set, zero value otherwise.
func (o *EventSourceStatusSchedule) GetNextTrigger() time.Time {
	if o == nil || IsNil(o.NextTrigger) {
		var ret time.Time
		return ret
	}
	return *o.NextTrigger
}

// GetNextTriggerOk returns a tuple with the NextTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSourceStatusSchedule) GetNextTriggerOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextTrigger) {
		return nil, false
	}
	return o.NextTrigger, true
}

// HasNextTrigger returns a boolean if a field has been set.
func (o *EventSourceStatusSchedule) HasNextTrigger() bool {
	if o != nil && !IsNil(o.NextTrigger) {
		return true
	}

	return false
}

// SetNextTrigger gets a reference to the given time.Time and assigns it to the NextTrigger field.
func (o *EventSourceStatusSchedule) SetNextTrigger(v time.Time) {
	o.NextTrigger = &v
}

func (o EventSourceStatusSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSourceStatusSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastTrigger) {
		toSerialize["lastTrigger"] = o.LastTrigger
	}
	if !IsNil(o.NextTrigger) {
		toSerialize["nextTrigger"] = o.NextTrigger
	}
	return toSerialize, nil
}

type NullableEventSourceStatusSchedule struct {
	value *EventSourceStatusSchedule
	isSet bool
}

func (v NullableEventSourceStatusSchedule) Get() *EventSourceStatusSchedule {
	return v.value
}

func (v *NullableEventSourceStatusSchedule) Set(val *EventSourceStatusSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSourceStatusSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSourceStatusSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSourceStatusSchedule(val *EventSourceStatusSchedule) *NullableEventSourceStatusSchedule {
	return &NullableEventSourceStatusSchedule{value: val, isSet: true}
}

func (v NullableEventSourceStatusSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSourceStatusSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


