/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneEventStateReason the model 'SuperplaneEventStateReason'
type SuperplaneEventStateReason string

// List of SuperplaneEventStateReason
const (
	SUPERPLANEEVENTSTATEREASON_STATE_REASON_UNKNOWN SuperplaneEventStateReason = "STATE_REASON_UNKNOWN"
	SUPERPLANEEVENTSTATEREASON_STATE_REASON_FILTERED SuperplaneEventStateReason = "STATE_REASON_FILTERED"
	SUPERPLANEEVENTSTATEREASON_STATE_REASON_ERROR SuperplaneEventStateReason = "STATE_REASON_ERROR"
	SUPERPLANEEVENTSTATEREASON_STATE_REASON_NOT_CONNECTED SuperplaneEventStateReason = "STATE_REASON_NOT_CONNECTED"
	SUPERPLANEEVENTSTATEREASON_STATE_REASON_OK SuperplaneEventStateReason = "STATE_REASON_OK"
)

// All allowed values of SuperplaneEventStateReason enum
var AllowedSuperplaneEventStateReasonEnumValues = []SuperplaneEventStateReason{
	"STATE_REASON_UNKNOWN",
	"STATE_REASON_FILTERED",
	"STATE_REASON_ERROR",
	"STATE_REASON_NOT_CONNECTED",
	"STATE_REASON_OK",
}

func (v *SuperplaneEventStateReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneEventStateReason(value)
	for _, existing := range AllowedSuperplaneEventStateReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneEventStateReason", value)
}

// NewSuperplaneEventStateReasonFromValue returns a pointer to a valid SuperplaneEventStateReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneEventStateReasonFromValue(v string) (*SuperplaneEventStateReason, error) {
	ev := SuperplaneEventStateReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneEventStateReason: valid values are %v", v, AllowedSuperplaneEventStateReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneEventStateReason) IsValid() bool {
	for _, existing := range AllowedSuperplaneEventStateReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneEventStateReason value
func (v SuperplaneEventStateReason) Ptr() *SuperplaneEventStateReason {
	return &v
}

type NullableSuperplaneEventStateReason struct {
	value *SuperplaneEventStateReason
	isSet bool
}

func (v NullableSuperplaneEventStateReason) Get() *SuperplaneEventStateReason {
	return v.value
}

func (v *NullableSuperplaneEventStateReason) Set(val *SuperplaneEventStateReason) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEventStateReason) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEventStateReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEventStateReason(val *SuperplaneEventStateReason) *NullableSuperplaneEventStateReason {
	return &NullableSuperplaneEventStateReason{value: val, isSet: true}
}

func (v NullableSuperplaneEventStateReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEventStateReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

