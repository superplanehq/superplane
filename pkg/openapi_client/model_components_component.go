/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the ComponentsComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentsComponent{}

// ComponentsComponent struct for ComponentsComponent
type ComponentsComponent struct {
	Name *string `json:"name,omitempty"`
	Label *string `json:"label,omitempty"`
	Description *string `json:"description,omitempty"`
	Configuration []ComponentsConfigurationField `json:"configuration,omitempty"`
	Branches []ComponentsOutputBranch `json:"branches,omitempty"`
}

// NewComponentsComponent instantiates a new ComponentsComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentsComponent() *ComponentsComponent {
	this := ComponentsComponent{}
	return &this
}

// NewComponentsComponentWithDefaults instantiates a new ComponentsComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentsComponentWithDefaults() *ComponentsComponent {
	this := ComponentsComponent{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComponentsComponent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsComponent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComponentsComponent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComponentsComponent) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ComponentsComponent) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsComponent) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ComponentsComponent) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ComponentsComponent) SetLabel(v string) {
	o.Label = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ComponentsComponent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsComponent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ComponentsComponent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ComponentsComponent) SetDescription(v string) {
	o.Description = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *ComponentsComponent) GetConfiguration() []ComponentsConfigurationField {
	if o == nil || IsNil(o.Configuration) {
		var ret []ComponentsConfigurationField
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsComponent) GetConfigurationOk() ([]ComponentsConfigurationField, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *ComponentsComponent) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given []ComponentsConfigurationField and assigns it to the Configuration field.
func (o *ComponentsComponent) SetConfiguration(v []ComponentsConfigurationField) {
	o.Configuration = v
}

// GetBranches returns the Branches field value if set, zero value otherwise.
func (o *ComponentsComponent) GetBranches() []ComponentsOutputBranch {
	if o == nil || IsNil(o.Branches) {
		var ret []ComponentsOutputBranch
		return ret
	}
	return o.Branches
}

// GetBranchesOk returns a tuple with the Branches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsComponent) GetBranchesOk() ([]ComponentsOutputBranch, bool) {
	if o == nil || IsNil(o.Branches) {
		return nil, false
	}
	return o.Branches, true
}

// HasBranches returns a boolean if a field has been set.
func (o *ComponentsComponent) HasBranches() bool {
	if o != nil && !IsNil(o.Branches) {
		return true
	}

	return false
}

// SetBranches gets a reference to the given []ComponentsOutputBranch and assigns it to the Branches field.
func (o *ComponentsComponent) SetBranches(v []ComponentsOutputBranch) {
	o.Branches = v
}

func (o ComponentsComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentsComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.Branches) {
		toSerialize["branches"] = o.Branches
	}
	return toSerialize, nil
}

type NullableComponentsComponent struct {
	value *ComponentsComponent
	isSet bool
}

func (v NullableComponentsComponent) Get() *ComponentsComponent {
	return v.value
}

func (v *NullableComponentsComponent) Set(val *ComponentsComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentsComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentsComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentsComponent(val *ComponentsComponent) *NullableComponentsComponent {
	return &NullableComponentsComponent{value: val, isSet: true}
}

func (v NullableComponentsComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentsComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


