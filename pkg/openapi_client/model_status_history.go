/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the StatusHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusHistory{}

// StatusHistory struct for StatusHistory
type StatusHistory struct {
	Received *int64 `json:"received,omitempty"`
	RecentItems []SuperplaneEvent `json:"recentItems,omitempty"`
}

// NewStatusHistory instantiates a new StatusHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusHistory() *StatusHistory {
	this := StatusHistory{}
	return &this
}

// NewStatusHistoryWithDefaults instantiates a new StatusHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusHistoryWithDefaults() *StatusHistory {
	this := StatusHistory{}
	return &this
}

// GetReceived returns the Received field value if set, zero value otherwise.
func (o *StatusHistory) GetReceived() int64 {
	if o == nil || IsNil(o.Received) {
		var ret int64
		return ret
	}
	return *o.Received
}

// GetReceivedOk returns a tuple with the Received field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusHistory) GetReceivedOk() (*int64, bool) {
	if o == nil || IsNil(o.Received) {
		return nil, false
	}
	return o.Received, true
}

// HasReceived returns a boolean if a field has been set.
func (o *StatusHistory) HasReceived() bool {
	if o != nil && !IsNil(o.Received) {
		return true
	}

	return false
}

// SetReceived gets a reference to the given int64 and assigns it to the Received field.
func (o *StatusHistory) SetReceived(v int64) {
	o.Received = &v
}

// GetRecentItems returns the RecentItems field value if set, zero value otherwise.
func (o *StatusHistory) GetRecentItems() []SuperplaneEvent {
	if o == nil || IsNil(o.RecentItems) {
		var ret []SuperplaneEvent
		return ret
	}
	return o.RecentItems
}

// GetRecentItemsOk returns a tuple with the RecentItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusHistory) GetRecentItemsOk() ([]SuperplaneEvent, bool) {
	if o == nil || IsNil(o.RecentItems) {
		return nil, false
	}
	return o.RecentItems, true
}

// HasRecentItems returns a boolean if a field has been set.
func (o *StatusHistory) HasRecentItems() bool {
	if o != nil && !IsNil(o.RecentItems) {
		return true
	}

	return false
}

// SetRecentItems gets a reference to the given []SuperplaneEvent and assigns it to the RecentItems field.
func (o *StatusHistory) SetRecentItems(v []SuperplaneEvent) {
	o.RecentItems = v
}

func (o StatusHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Received) {
		toSerialize["received"] = o.Received
	}
	if !IsNil(o.RecentItems) {
		toSerialize["recentItems"] = o.RecentItems
	}
	return toSerialize, nil
}

type NullableStatusHistory struct {
	value *StatusHistory
	isSet bool
}

func (v NullableStatusHistory) Get() *StatusHistory {
	return v.value
}

func (v *NullableStatusHistory) Set(val *StatusHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusHistory(val *StatusHistory) *NullableStatusHistory {
	return &NullableStatusHistory{value: val, isSet: true}
}

func (v NullableStatusHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


