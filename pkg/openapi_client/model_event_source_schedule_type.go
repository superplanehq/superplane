/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// EventSourceScheduleType the model 'EventSourceScheduleType'
type EventSourceScheduleType string

// List of EventSourceScheduleType
const (
	EVENTSOURCESCHEDULETYPE_TYPE_UNKNOWN EventSourceScheduleType = "TYPE_UNKNOWN"
	EVENTSOURCESCHEDULETYPE_TYPE_HOURLY EventSourceScheduleType = "TYPE_HOURLY"
	EVENTSOURCESCHEDULETYPE_TYPE_DAILY EventSourceScheduleType = "TYPE_DAILY"
	EVENTSOURCESCHEDULETYPE_TYPE_WEEKLY EventSourceScheduleType = "TYPE_WEEKLY"
)

// All allowed values of EventSourceScheduleType enum
var AllowedEventSourceScheduleTypeEnumValues = []EventSourceScheduleType{
	"TYPE_UNKNOWN",
	"TYPE_HOURLY",
	"TYPE_DAILY",
	"TYPE_WEEKLY",
}

func (v *EventSourceScheduleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventSourceScheduleType(value)
	for _, existing := range AllowedEventSourceScheduleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventSourceScheduleType", value)
}

// NewEventSourceScheduleTypeFromValue returns a pointer to a valid EventSourceScheduleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventSourceScheduleTypeFromValue(v string) (*EventSourceScheduleType, error) {
	ev := EventSourceScheduleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventSourceScheduleType: valid values are %v", v, AllowedEventSourceScheduleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventSourceScheduleType) IsValid() bool {
	for _, existing := range AllowedEventSourceScheduleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventSourceScheduleType value
func (v EventSourceScheduleType) Ptr() *EventSourceScheduleType {
	return &v
}

type NullableEventSourceScheduleType struct {
	value *EventSourceScheduleType
	isSet bool
}

func (v NullableEventSourceScheduleType) Get() *EventSourceScheduleType {
	return v.value
}

func (v *NullableEventSourceScheduleType) Set(val *EventSourceScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSourceScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSourceScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSourceScheduleType(val *EventSourceScheduleType) *NullableEventSourceScheduleType {
	return &NullableEventSourceScheduleType{value: val, isSet: true}
}

func (v NullableEventSourceScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSourceScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

