/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the GroupByField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupByField{}

// GroupByField struct for GroupByField
type GroupByField struct {
	Name *string `json:"name,omitempty"`
	Expression *string `json:"expression,omitempty"`
}

// NewGroupByField instantiates a new GroupByField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupByField() *GroupByField {
	this := GroupByField{}
	return &this
}

// NewGroupByFieldWithDefaults instantiates a new GroupByField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupByFieldWithDefaults() *GroupByField {
	this := GroupByField{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GroupByField) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupByField) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GroupByField) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GroupByField) SetName(v string) {
	o.Name = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *GroupByField) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupByField) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *GroupByField) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *GroupByField) SetExpression(v string) {
	o.Expression = &v
}

func (o GroupByField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupByField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	return toSerialize, nil
}

type NullableGroupByField struct {
	value *GroupByField
	isSet bool
}

func (v NullableGroupByField) Get() *GroupByField {
	return v.value
}

func (v *NullableGroupByField) Set(val *GroupByField) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupByField) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupByField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupByField(val *GroupByField) *NullableGroupByField {
	return &NullableGroupByField{value: val, isSet: true}
}

func (v NullableGroupByField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupByField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


