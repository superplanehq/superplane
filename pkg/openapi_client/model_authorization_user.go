/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the AuthorizationUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationUser{}

// AuthorizationUser struct for AuthorizationUser
type AuthorizationUser struct {
	UserId *string `json:"userId,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Email *string `json:"email,omitempty"`
	AvatarUrl *string `json:"avatarUrl,omitempty"`
	IsActive *bool `json:"isActive,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	LastLoginAt *string `json:"lastLoginAt,omitempty"`
	RoleAssignments []AuthorizationUserRoleAssignment `json:"roleAssignments,omitempty"`
	AccountProviders []AuthorizationAccountProvider `json:"accountProviders,omitempty"`
}

// NewAuthorizationUser instantiates a new AuthorizationUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationUser() *AuthorizationUser {
	this := AuthorizationUser{}
	return &this
}

// NewAuthorizationUserWithDefaults instantiates a new AuthorizationUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationUserWithDefaults() *AuthorizationUser {
	this := AuthorizationUser{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AuthorizationUser) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUser) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AuthorizationUser) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *AuthorizationUser) SetUserId(v string) {
	o.UserId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AuthorizationUser) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUser) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AuthorizationUser) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AuthorizationUser) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AuthorizationUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AuthorizationUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AuthorizationUser) SetEmail(v string) {
	o.Email = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *AuthorizationUser) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUser) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *AuthorizationUser) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *AuthorizationUser) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *AuthorizationUser) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUser) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *AuthorizationUser) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *AuthorizationUser) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AuthorizationUser) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUser) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AuthorizationUser) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *AuthorizationUser) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AuthorizationUser) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUser) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AuthorizationUser) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AuthorizationUser) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetLastLoginAt returns the LastLoginAt field value if set, zero value otherwise.
func (o *AuthorizationUser) GetLastLoginAt() string {
	if o == nil || IsNil(o.LastLoginAt) {
		var ret string
		return ret
	}
	return *o.LastLoginAt
}

// GetLastLoginAtOk returns a tuple with the LastLoginAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUser) GetLastLoginAtOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginAt) {
		return nil, false
	}
	return o.LastLoginAt, true
}

// HasLastLoginAt returns a boolean if a field has been set.
func (o *AuthorizationUser) HasLastLoginAt() bool {
	if o != nil && !IsNil(o.LastLoginAt) {
		return true
	}

	return false
}

// SetLastLoginAt gets a reference to the given string and assigns it to the LastLoginAt field.
func (o *AuthorizationUser) SetLastLoginAt(v string) {
	o.LastLoginAt = &v
}

// GetRoleAssignments returns the RoleAssignments field value if set, zero value otherwise.
func (o *AuthorizationUser) GetRoleAssignments() []AuthorizationUserRoleAssignment {
	if o == nil || IsNil(o.RoleAssignments) {
		var ret []AuthorizationUserRoleAssignment
		return ret
	}
	return o.RoleAssignments
}

// GetRoleAssignmentsOk returns a tuple with the RoleAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUser) GetRoleAssignmentsOk() ([]AuthorizationUserRoleAssignment, bool) {
	if o == nil || IsNil(o.RoleAssignments) {
		return nil, false
	}
	return o.RoleAssignments, true
}

// HasRoleAssignments returns a boolean if a field has been set.
func (o *AuthorizationUser) HasRoleAssignments() bool {
	if o != nil && !IsNil(o.RoleAssignments) {
		return true
	}

	return false
}

// SetRoleAssignments gets a reference to the given []AuthorizationUserRoleAssignment and assigns it to the RoleAssignments field.
func (o *AuthorizationUser) SetRoleAssignments(v []AuthorizationUserRoleAssignment) {
	o.RoleAssignments = v
}

// GetAccountProviders returns the AccountProviders field value if set, zero value otherwise.
func (o *AuthorizationUser) GetAccountProviders() []AuthorizationAccountProvider {
	if o == nil || IsNil(o.AccountProviders) {
		var ret []AuthorizationAccountProvider
		return ret
	}
	return o.AccountProviders
}

// GetAccountProvidersOk returns a tuple with the AccountProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationUser) GetAccountProvidersOk() ([]AuthorizationAccountProvider, bool) {
	if o == nil || IsNil(o.AccountProviders) {
		return nil, false
	}
	return o.AccountProviders, true
}

// HasAccountProviders returns a boolean if a field has been set.
func (o *AuthorizationUser) HasAccountProviders() bool {
	if o != nil && !IsNil(o.AccountProviders) {
		return true
	}

	return false
}

// SetAccountProviders gets a reference to the given []AuthorizationAccountProvider and assigns it to the AccountProviders field.
func (o *AuthorizationUser) SetAccountProviders(v []AuthorizationAccountProvider) {
	o.AccountProviders = v
}

func (o AuthorizationUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatarUrl"] = o.AvatarUrl
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.LastLoginAt) {
		toSerialize["lastLoginAt"] = o.LastLoginAt
	}
	if !IsNil(o.RoleAssignments) {
		toSerialize["roleAssignments"] = o.RoleAssignments
	}
	if !IsNil(o.AccountProviders) {
		toSerialize["accountProviders"] = o.AccountProviders
	}
	return toSerialize, nil
}

type NullableAuthorizationUser struct {
	value *AuthorizationUser
	isSet bool
}

func (v NullableAuthorizationUser) Get() *AuthorizationUser {
	return v.value
}

func (v *NullableAuthorizationUser) Set(val *AuthorizationUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationUser(val *AuthorizationUser) *NullableAuthorizationUser {
	return &NullableAuthorizationUser{value: val, isSet: true}
}

func (v NullableAuthorizationUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


