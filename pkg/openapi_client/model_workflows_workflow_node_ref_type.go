/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// WorkflowsWorkflowNodeRefType the model 'WorkflowsWorkflowNodeRefType'
type WorkflowsWorkflowNodeRefType string

// List of WorkflowsWorkflowNodeRefType
const (
	WORKFLOWSWORKFLOWNODEREFTYPE_REF_TYPE_COMPONENT WorkflowsWorkflowNodeRefType = "REF_TYPE_COMPONENT"
	WORKFLOWSWORKFLOWNODEREFTYPE_REF_TYPE_BLUEPRINT WorkflowsWorkflowNodeRefType = "REF_TYPE_BLUEPRINT"
)

// All allowed values of WorkflowsWorkflowNodeRefType enum
var AllowedWorkflowsWorkflowNodeRefTypeEnumValues = []WorkflowsWorkflowNodeRefType{
	"REF_TYPE_COMPONENT",
	"REF_TYPE_BLUEPRINT",
}

func (v *WorkflowsWorkflowNodeRefType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkflowsWorkflowNodeRefType(value)
	for _, existing := range AllowedWorkflowsWorkflowNodeRefTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkflowsWorkflowNodeRefType", value)
}

// NewWorkflowsWorkflowNodeRefTypeFromValue returns a pointer to a valid WorkflowsWorkflowNodeRefType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkflowsWorkflowNodeRefTypeFromValue(v string) (*WorkflowsWorkflowNodeRefType, error) {
	ev := WorkflowsWorkflowNodeRefType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkflowsWorkflowNodeRefType: valid values are %v", v, AllowedWorkflowsWorkflowNodeRefTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkflowsWorkflowNodeRefType) IsValid() bool {
	for _, existing := range AllowedWorkflowsWorkflowNodeRefTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkflowsWorkflowNodeRefType value
func (v WorkflowsWorkflowNodeRefType) Ptr() *WorkflowsWorkflowNodeRefType {
	return &v
}

type NullableWorkflowsWorkflowNodeRefType struct {
	value *WorkflowsWorkflowNodeRefType
	isSet bool
}

func (v NullableWorkflowsWorkflowNodeRefType) Get() *WorkflowsWorkflowNodeRefType {
	return v.value
}

func (v *NullableWorkflowsWorkflowNodeRefType) Set(val *WorkflowsWorkflowNodeRefType) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowsWorkflowNodeRefType) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowsWorkflowNodeRefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowsWorkflowNodeRefType(val *WorkflowsWorkflowNodeRefType) *NullableWorkflowsWorkflowNodeRefType {
	return &NullableWorkflowsWorkflowNodeRefType{value: val, isSet: true}
}

func (v NullableWorkflowsWorkflowNodeRefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowsWorkflowNodeRefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

