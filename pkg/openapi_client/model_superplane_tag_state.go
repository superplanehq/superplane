/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneTagState the model 'SuperplaneTagState'
type SuperplaneTagState string

// List of SuperplaneTagState
const (
	SUPERPLANETAGSTATE_TAG_STATE_UNKNOWN SuperplaneTagState = "TAG_STATE_UNKNOWN"
	SUPERPLANETAGSTATE_TAG_STATE_HEALTHY SuperplaneTagState = "TAG_STATE_HEALTHY"
	SUPERPLANETAGSTATE_TAG_STATE_UNHEALTHY SuperplaneTagState = "TAG_STATE_UNHEALTHY"
)

// All allowed values of SuperplaneTagState enum
var AllowedSuperplaneTagStateEnumValues = []SuperplaneTagState{
	"TAG_STATE_UNKNOWN",
	"TAG_STATE_HEALTHY",
	"TAG_STATE_UNHEALTHY",
}

func (v *SuperplaneTagState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneTagState(value)
	for _, existing := range AllowedSuperplaneTagStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneTagState", value)
}

// NewSuperplaneTagStateFromValue returns a pointer to a valid SuperplaneTagState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneTagStateFromValue(v string) (*SuperplaneTagState, error) {
	ev := SuperplaneTagState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneTagState: valid values are %v", v, AllowedSuperplaneTagStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneTagState) IsValid() bool {
	for _, existing := range AllowedSuperplaneTagStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneTagState value
func (v SuperplaneTagState) Ptr() *SuperplaneTagState {
	return &v
}

type NullableSuperplaneTagState struct {
	value *SuperplaneTagState
	isSet bool
}

func (v NullableSuperplaneTagState) Get() *SuperplaneTagState {
	return v.value
}

func (v *NullableSuperplaneTagState) Set(val *SuperplaneTagState) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneTagState) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneTagState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneTagState(val *SuperplaneTagState) *NullableSuperplaneTagState {
	return &NullableSuperplaneTagState{value: val, isSet: true}
}

func (v NullableSuperplaneTagState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneTagState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

