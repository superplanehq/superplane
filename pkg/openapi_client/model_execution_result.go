/*
Superplane Authorization API

API for the Superplane Authorization service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// ExecutionResult the model 'ExecutionResult'
type ExecutionResult string

// List of ExecutionResult
const (
	EXECUTIONRESULT_RESULT_UNKNOWN ExecutionResult = "RESULT_UNKNOWN"
	EXECUTIONRESULT_RESULT_PASSED ExecutionResult = "RESULT_PASSED"
	EXECUTIONRESULT_RESULT_FAILED ExecutionResult = "RESULT_FAILED"
)

// All allowed values of ExecutionResult enum
var AllowedExecutionResultEnumValues = []ExecutionResult{
	"RESULT_UNKNOWN",
	"RESULT_PASSED",
	"RESULT_FAILED",
}

func (v *ExecutionResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExecutionResult(value)
	for _, existing := range AllowedExecutionResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExecutionResult", value)
}

// NewExecutionResultFromValue returns a pointer to a valid ExecutionResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExecutionResultFromValue(v string) (*ExecutionResult, error) {
	ev := ExecutionResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExecutionResult: valid values are %v", v, AllowedExecutionResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExecutionResult) IsValid() bool {
	for _, existing := range AllowedExecutionResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExecutionResult value
func (v ExecutionResult) Ptr() *ExecutionResult {
	return &v
}

type NullableExecutionResult struct {
	value *ExecutionResult
	isSet bool
}

func (v NullableExecutionResult) Get() *ExecutionResult {
	return v.value
}

func (v *NullableExecutionResult) Set(val *ExecutionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionResult(val *ExecutionResult) *NullableExecutionResult {
	return &NullableExecutionResult{value: val, isSet: true}
}

func (v NullableExecutionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

