/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// GroupByEmitOn the model 'GroupByEmitOn'
type GroupByEmitOn string

// List of GroupByEmitOn
const (
	GROUPBYEMITON_EMIT_ON_ALL GroupByEmitOn = "EMIT_ON_ALL"
	GROUPBYEMITON_EMIT_ON_MAJORITY GroupByEmitOn = "EMIT_ON_MAJORITY"
)

// All allowed values of GroupByEmitOn enum
var AllowedGroupByEmitOnEnumValues = []GroupByEmitOn{
	"EMIT_ON_ALL",
	"EMIT_ON_MAJORITY",
}

func (v *GroupByEmitOn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupByEmitOn(value)
	for _, existing := range AllowedGroupByEmitOnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupByEmitOn", value)
}

// NewGroupByEmitOnFromValue returns a pointer to a valid GroupByEmitOn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupByEmitOnFromValue(v string) (*GroupByEmitOn, error) {
	ev := GroupByEmitOn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupByEmitOn: valid values are %v", v, AllowedGroupByEmitOnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupByEmitOn) IsValid() bool {
	for _, existing := range AllowedGroupByEmitOnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupByEmitOn value
func (v GroupByEmitOn) Ptr() *GroupByEmitOn {
	return &v
}

type NullableGroupByEmitOn struct {
	value *GroupByEmitOn
	isSet bool
}

func (v NullableGroupByEmitOn) Get() *GroupByEmitOn {
	return v.value
}

func (v *NullableGroupByEmitOn) Set(val *GroupByEmitOn) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupByEmitOn) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupByEmitOn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupByEmitOn(val *GroupByEmitOn) *NullableGroupByEmitOn {
	return &NullableGroupByEmitOn{value: val, isSet: true}
}

func (v NullableGroupByEmitOn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupByEmitOn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

