/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// NodeRefType the model 'NodeRefType'
type NodeRefType string

// List of NodeRefType
const (
	NODEREFTYPE_REF_TYPE_COMPONENT NodeRefType = "REF_TYPE_COMPONENT"
	NODEREFTYPE_REF_TYPE_BLUEPRINT NodeRefType = "REF_TYPE_BLUEPRINT"
)

// All allowed values of NodeRefType enum
var AllowedNodeRefTypeEnumValues = []NodeRefType{
	"REF_TYPE_COMPONENT",
	"REF_TYPE_BLUEPRINT",
}

func (v *NodeRefType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NodeRefType(value)
	for _, existing := range AllowedNodeRefTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NodeRefType", value)
}

// NewNodeRefTypeFromValue returns a pointer to a valid NodeRefType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNodeRefTypeFromValue(v string) (*NodeRefType, error) {
	ev := NodeRefType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NodeRefType: valid values are %v", v, AllowedNodeRefTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NodeRefType) IsValid() bool {
	for _, existing := range AllowedNodeRefTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NodeRefType value
func (v NodeRefType) Ptr() *NodeRefType {
	return &v
}

type NullableNodeRefType struct {
	value *NodeRefType
	isSet bool
}

func (v NullableNodeRefType) Get() *NodeRefType {
	return v.value
}

func (v *NullableNodeRefType) Set(val *NodeRefType) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeRefType) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeRefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeRefType(val *NodeRefType) *NullableNodeRefType {
	return &NullableNodeRefType{value: val, isSet: true}
}

func (v NullableNodeRefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeRefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

