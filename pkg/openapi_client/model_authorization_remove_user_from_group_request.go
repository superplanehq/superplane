/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the AuthorizationRemoveUserFromGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationRemoveUserFromGroupRequest{}

// AuthorizationRemoveUserFromGroupRequest struct for AuthorizationRemoveUserFromGroupRequest
type AuthorizationRemoveUserFromGroupRequest struct {
	DomainType *AuthorizationDomainType `json:"domainType,omitempty"`
	DomainId *string `json:"domainId,omitempty"`
	GroupName *string `json:"groupName,omitempty"`
	UserId *string `json:"userId,omitempty"`
}

// NewAuthorizationRemoveUserFromGroupRequest instantiates a new AuthorizationRemoveUserFromGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationRemoveUserFromGroupRequest() *AuthorizationRemoveUserFromGroupRequest {
	this := AuthorizationRemoveUserFromGroupRequest{}
	var domainType AuthorizationDomainType = AUTHORIZATIONDOMAINTYPE_DOMAIN_TYPE_UNSPECIFIED
	this.DomainType = &domainType
	return &this
}

// NewAuthorizationRemoveUserFromGroupRequestWithDefaults instantiates a new AuthorizationRemoveUserFromGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationRemoveUserFromGroupRequestWithDefaults() *AuthorizationRemoveUserFromGroupRequest {
	this := AuthorizationRemoveUserFromGroupRequest{}
	var domainType AuthorizationDomainType = AUTHORIZATIONDOMAINTYPE_DOMAIN_TYPE_UNSPECIFIED
	this.DomainType = &domainType
	return &this
}

// GetDomainType returns the DomainType field value if set, zero value otherwise.
func (o *AuthorizationRemoveUserFromGroupRequest) GetDomainType() AuthorizationDomainType {
	if o == nil || IsNil(o.DomainType) {
		var ret AuthorizationDomainType
		return ret
	}
	return *o.DomainType
}

// GetDomainTypeOk returns a tuple with the DomainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationRemoveUserFromGroupRequest) GetDomainTypeOk() (*AuthorizationDomainType, bool) {
	if o == nil || IsNil(o.DomainType) {
		return nil, false
	}
	return o.DomainType, true
}

// HasDomainType returns a boolean if a field has been set.
func (o *AuthorizationRemoveUserFromGroupRequest) HasDomainType() bool {
	if o != nil && !IsNil(o.DomainType) {
		return true
	}

	return false
}

// SetDomainType gets a reference to the given AuthorizationDomainType and assigns it to the DomainType field.
func (o *AuthorizationRemoveUserFromGroupRequest) SetDomainType(v AuthorizationDomainType) {
	o.DomainType = &v
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *AuthorizationRemoveUserFromGroupRequest) GetDomainId() string {
	if o == nil || IsNil(o.DomainId) {
		var ret string
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationRemoveUserFromGroupRequest) GetDomainIdOk() (*string, bool) {
	if o == nil || IsNil(o.DomainId) {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *AuthorizationRemoveUserFromGroupRequest) HasDomainId() bool {
	if o != nil && !IsNil(o.DomainId) {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given string and assigns it to the DomainId field.
func (o *AuthorizationRemoveUserFromGroupRequest) SetDomainId(v string) {
	o.DomainId = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *AuthorizationRemoveUserFromGroupRequest) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationRemoveUserFromGroupRequest) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *AuthorizationRemoveUserFromGroupRequest) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *AuthorizationRemoveUserFromGroupRequest) SetGroupName(v string) {
	o.GroupName = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AuthorizationRemoveUserFromGroupRequest) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationRemoveUserFromGroupRequest) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AuthorizationRemoveUserFromGroupRequest) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *AuthorizationRemoveUserFromGroupRequest) SetUserId(v string) {
	o.UserId = &v
}

func (o AuthorizationRemoveUserFromGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationRemoveUserFromGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomainType) {
		toSerialize["domainType"] = o.DomainType
	}
	if !IsNil(o.DomainId) {
		toSerialize["domainId"] = o.DomainId
	}
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableAuthorizationRemoveUserFromGroupRequest struct {
	value *AuthorizationRemoveUserFromGroupRequest
	isSet bool
}

func (v NullableAuthorizationRemoveUserFromGroupRequest) Get() *AuthorizationRemoveUserFromGroupRequest {
	return v.value
}

func (v *NullableAuthorizationRemoveUserFromGroupRequest) Set(val *AuthorizationRemoveUserFromGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationRemoveUserFromGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationRemoveUserFromGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationRemoveUserFromGroupRequest(val *AuthorizationRemoveUserFromGroupRequest) *NullableAuthorizationRemoveUserFromGroupRequest {
	return &NullableAuthorizationRemoveUserFromGroupRequest{value: val, isSet: true}
}

func (v NullableAuthorizationRemoveUserFromGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationRemoveUserFromGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


