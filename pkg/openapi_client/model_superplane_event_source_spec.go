/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the SuperplaneEventSourceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneEventSourceSpec{}

// SuperplaneEventSourceSpec struct for SuperplaneEventSourceSpec
type SuperplaneEventSourceSpec struct {
	Integration *IntegrationsIntegrationRef `json:"integration,omitempty"`
	Resource *IntegrationsResourceRef `json:"resource,omitempty"`
	Events []EventSourceEventType `json:"events,omitempty"`
}

// NewSuperplaneEventSourceSpec instantiates a new SuperplaneEventSourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneEventSourceSpec() *SuperplaneEventSourceSpec {
	this := SuperplaneEventSourceSpec{}
	return &this
}

// NewSuperplaneEventSourceSpecWithDefaults instantiates a new SuperplaneEventSourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneEventSourceSpecWithDefaults() *SuperplaneEventSourceSpec {
	this := SuperplaneEventSourceSpec{}
	return &this
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *SuperplaneEventSourceSpec) GetIntegration() IntegrationsIntegrationRef {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationsIntegrationRef
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSourceSpec) GetIntegrationOk() (*IntegrationsIntegrationRef, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *SuperplaneEventSourceSpec) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationsIntegrationRef and assigns it to the Integration field.
func (o *SuperplaneEventSourceSpec) SetIntegration(v IntegrationsIntegrationRef) {
	o.Integration = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *SuperplaneEventSourceSpec) GetResource() IntegrationsResourceRef {
	if o == nil || IsNil(o.Resource) {
		var ret IntegrationsResourceRef
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSourceSpec) GetResourceOk() (*IntegrationsResourceRef, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *SuperplaneEventSourceSpec) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given IntegrationsResourceRef and assigns it to the Resource field.
func (o *SuperplaneEventSourceSpec) SetResource(v IntegrationsResourceRef) {
	o.Resource = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *SuperplaneEventSourceSpec) GetEvents() []EventSourceEventType {
	if o == nil || IsNil(o.Events) {
		var ret []EventSourceEventType
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEventSourceSpec) GetEventsOk() ([]EventSourceEventType, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *SuperplaneEventSourceSpec) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []EventSourceEventType and assigns it to the Events field.
func (o *SuperplaneEventSourceSpec) SetEvents(v []EventSourceEventType) {
	o.Events = v
}

func (o SuperplaneEventSourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneEventSourceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	return toSerialize, nil
}

type NullableSuperplaneEventSourceSpec struct {
	value *SuperplaneEventSourceSpec
	isSet bool
}

func (v NullableSuperplaneEventSourceSpec) Get() *SuperplaneEventSourceSpec {
	return v.value
}

func (v *NullableSuperplaneEventSourceSpec) Set(val *SuperplaneEventSourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEventSourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEventSourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEventSourceSpec(val *SuperplaneEventSourceSpec) *NullableSuperplaneEventSourceSpec {
	return &NullableSuperplaneEventSourceSpec{value: val, isSet: true}
}

func (v NullableSuperplaneEventSourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEventSourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


