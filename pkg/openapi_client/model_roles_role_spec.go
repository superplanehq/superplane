/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the RolesRoleSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RolesRoleSpec{}

// RolesRoleSpec struct for RolesRoleSpec
type RolesRoleSpec struct {
	DisplayName *string `json:"displayName,omitempty"`
	Description *string `json:"description,omitempty"`
	Permissions []AuthorizationPermission `json:"permissions,omitempty"`
	InheritedRole *RolesRole `json:"inheritedRole,omitempty"`
}

// NewRolesRoleSpec instantiates a new RolesRoleSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolesRoleSpec() *RolesRoleSpec {
	this := RolesRoleSpec{}
	return &this
}

// NewRolesRoleSpecWithDefaults instantiates a new RolesRoleSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolesRoleSpecWithDefaults() *RolesRoleSpec {
	this := RolesRoleSpec{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *RolesRoleSpec) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesRoleSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *RolesRoleSpec) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *RolesRoleSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RolesRoleSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesRoleSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RolesRoleSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RolesRoleSpec) SetDescription(v string) {
	o.Description = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *RolesRoleSpec) GetPermissions() []AuthorizationPermission {
	if o == nil || IsNil(o.Permissions) {
		var ret []AuthorizationPermission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesRoleSpec) GetPermissionsOk() ([]AuthorizationPermission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *RolesRoleSpec) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []AuthorizationPermission and assigns it to the Permissions field.
func (o *RolesRoleSpec) SetPermissions(v []AuthorizationPermission) {
	o.Permissions = v
}

// GetInheritedRole returns the InheritedRole field value if set, zero value otherwise.
func (o *RolesRoleSpec) GetInheritedRole() RolesRole {
	if o == nil || IsNil(o.InheritedRole) {
		var ret RolesRole
		return ret
	}
	return *o.InheritedRole
}

// GetInheritedRoleOk returns a tuple with the InheritedRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesRoleSpec) GetInheritedRoleOk() (*RolesRole, bool) {
	if o == nil || IsNil(o.InheritedRole) {
		return nil, false
	}
	return o.InheritedRole, true
}

// HasInheritedRole returns a boolean if a field has been set.
func (o *RolesRoleSpec) HasInheritedRole() bool {
	if o != nil && !IsNil(o.InheritedRole) {
		return true
	}

	return false
}

// SetInheritedRole gets a reference to the given RolesRole and assigns it to the InheritedRole field.
func (o *RolesRoleSpec) SetInheritedRole(v RolesRole) {
	o.InheritedRole = &v
}

func (o RolesRoleSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RolesRoleSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.InheritedRole) {
		toSerialize["inheritedRole"] = o.InheritedRole
	}
	return toSerialize, nil
}

type NullableRolesRoleSpec struct {
	value *RolesRoleSpec
	isSet bool
}

func (v NullableRolesRoleSpec) Get() *RolesRoleSpec {
	return v.value
}

func (v *NullableRolesRoleSpec) Set(val *RolesRoleSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRolesRoleSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRolesRoleSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolesRoleSpec(val *RolesRoleSpec) *NullableRolesRoleSpec {
	return &NullableRolesRoleSpec{value: val, isSet: true}
}

func (v NullableRolesRoleSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolesRoleSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


