/*
Superplane API

API for the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// SuperplaneConnectionGroupFieldSetResult the model 'SuperplaneConnectionGroupFieldSetResult'
type SuperplaneConnectionGroupFieldSetResult string

// List of SuperplaneConnectionGroupFieldSetResult
const (
	SUPERPLANECONNECTIONGROUPFIELDSETRESULT_RESULT_NONE SuperplaneConnectionGroupFieldSetResult = "RESULT_NONE"
	SUPERPLANECONNECTIONGROUPFIELDSETRESULT_RESULT_TIMED_OUT SuperplaneConnectionGroupFieldSetResult = "RESULT_TIMED_OUT"
	SUPERPLANECONNECTIONGROUPFIELDSETRESULT_RESULT_RECEIVED_ALL SuperplaneConnectionGroupFieldSetResult = "RESULT_RECEIVED_ALL"
)

// All allowed values of SuperplaneConnectionGroupFieldSetResult enum
var AllowedSuperplaneConnectionGroupFieldSetResultEnumValues = []SuperplaneConnectionGroupFieldSetResult{
	"RESULT_NONE",
	"RESULT_TIMED_OUT",
	"RESULT_RECEIVED_ALL",
}

func (v *SuperplaneConnectionGroupFieldSetResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuperplaneConnectionGroupFieldSetResult(value)
	for _, existing := range AllowedSuperplaneConnectionGroupFieldSetResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuperplaneConnectionGroupFieldSetResult", value)
}

// NewSuperplaneConnectionGroupFieldSetResultFromValue returns a pointer to a valid SuperplaneConnectionGroupFieldSetResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuperplaneConnectionGroupFieldSetResultFromValue(v string) (*SuperplaneConnectionGroupFieldSetResult, error) {
	ev := SuperplaneConnectionGroupFieldSetResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuperplaneConnectionGroupFieldSetResult: valid values are %v", v, AllowedSuperplaneConnectionGroupFieldSetResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuperplaneConnectionGroupFieldSetResult) IsValid() bool {
	for _, existing := range AllowedSuperplaneConnectionGroupFieldSetResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuperplaneConnectionGroupFieldSetResult value
func (v SuperplaneConnectionGroupFieldSetResult) Ptr() *SuperplaneConnectionGroupFieldSetResult {
	return &v
}

type NullableSuperplaneConnectionGroupFieldSetResult struct {
	value *SuperplaneConnectionGroupFieldSetResult
	isSet bool
}

func (v NullableSuperplaneConnectionGroupFieldSetResult) Get() *SuperplaneConnectionGroupFieldSetResult {
	return v.value
}

func (v *NullableSuperplaneConnectionGroupFieldSetResult) Set(val *SuperplaneConnectionGroupFieldSetResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneConnectionGroupFieldSetResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneConnectionGroupFieldSetResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneConnectionGroupFieldSetResult(val *SuperplaneConnectionGroupFieldSetResult) *NullableSuperplaneConnectionGroupFieldSetResult {
	return &NullableSuperplaneConnectionGroupFieldSetResult{value: val, isSet: true}
}

func (v NullableSuperplaneConnectionGroupFieldSetResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneConnectionGroupFieldSetResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

