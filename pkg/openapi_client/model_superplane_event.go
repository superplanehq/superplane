/*
Superplane Organizations API

API for managing organizations in the Superplane service

API version: 1.0
Contact: support@superplane.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"time"
)

// checks if the SuperplaneEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperplaneEvent{}

// SuperplaneEvent struct for SuperplaneEvent
type SuperplaneEvent struct {
	Id *string `json:"id,omitempty"`
	SourceId *string `json:"sourceId,omitempty"`
	SourceName *string `json:"sourceName,omitempty"`
	SourceType *SuperplaneEventSourceType `json:"sourceType,omitempty"`
	Type *string `json:"type,omitempty"`
	State *SuperplaneEventState `json:"state,omitempty"`
	StateReason *SuperplaneEventStateReason `json:"stateReason,omitempty"`
	StateMessage *string `json:"stateMessage,omitempty"`
	ReceivedAt *time.Time `json:"receivedAt,omitempty"`
	Raw map[string]interface{} `json:"raw,omitempty"`
	Headers map[string]interface{} `json:"headers,omitempty"`
}

// NewSuperplaneEvent instantiates a new SuperplaneEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperplaneEvent() *SuperplaneEvent {
	this := SuperplaneEvent{}
	var sourceType SuperplaneEventSourceType = SUPERPLANEEVENTSOURCETYPE_EVENT_SOURCE_TYPE_UNKNOWN
	this.SourceType = &sourceType
	var state SuperplaneEventState = SUPERPLANEEVENTSTATE_STATE_UNKNOWN
	this.State = &state
	var stateReason SuperplaneEventStateReason = SUPERPLANEEVENTSTATEREASON_STATE_REASON_UNKNOWN
	this.StateReason = &stateReason
	return &this
}

// NewSuperplaneEventWithDefaults instantiates a new SuperplaneEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperplaneEventWithDefaults() *SuperplaneEvent {
	this := SuperplaneEvent{}
	var sourceType SuperplaneEventSourceType = SUPERPLANEEVENTSOURCETYPE_EVENT_SOURCE_TYPE_UNKNOWN
	this.SourceType = &sourceType
	var state SuperplaneEventState = SUPERPLANEEVENTSTATE_STATE_UNKNOWN
	this.State = &state
	var stateReason SuperplaneEventStateReason = SUPERPLANEEVENTSTATEREASON_STATE_REASON_UNKNOWN
	this.StateReason = &stateReason
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperplaneEvent) SetId(v string) {
	o.Id = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *SuperplaneEvent) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetSourceName() string {
	if o == nil || IsNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasSourceName() bool {
	if o != nil && !IsNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *SuperplaneEvent) SetSourceName(v string) {
	o.SourceName = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetSourceType() SuperplaneEventSourceType {
	if o == nil || IsNil(o.SourceType) {
		var ret SuperplaneEventSourceType
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetSourceTypeOk() (*SuperplaneEventSourceType, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given SuperplaneEventSourceType and assigns it to the SourceType field.
func (o *SuperplaneEvent) SetSourceType(v SuperplaneEventSourceType) {
	o.SourceType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SuperplaneEvent) SetType(v string) {
	o.Type = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetState() SuperplaneEventState {
	if o == nil || IsNil(o.State) {
		var ret SuperplaneEventState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetStateOk() (*SuperplaneEventState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given SuperplaneEventState and assigns it to the State field.
func (o *SuperplaneEvent) SetState(v SuperplaneEventState) {
	o.State = &v
}

// GetStateReason returns the StateReason field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetStateReason() SuperplaneEventStateReason {
	if o == nil || IsNil(o.StateReason) {
		var ret SuperplaneEventStateReason
		return ret
	}
	return *o.StateReason
}

// GetStateReasonOk returns a tuple with the StateReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetStateReasonOk() (*SuperplaneEventStateReason, bool) {
	if o == nil || IsNil(o.StateReason) {
		return nil, false
	}
	return o.StateReason, true
}

// HasStateReason returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasStateReason() bool {
	if o != nil && !IsNil(o.StateReason) {
		return true
	}

	return false
}

// SetStateReason gets a reference to the given SuperplaneEventStateReason and assigns it to the StateReason field.
func (o *SuperplaneEvent) SetStateReason(v SuperplaneEventStateReason) {
	o.StateReason = &v
}

// GetStateMessage returns the StateMessage field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetStateMessage() string {
	if o == nil || IsNil(o.StateMessage) {
		var ret string
		return ret
	}
	return *o.StateMessage
}

// GetStateMessageOk returns a tuple with the StateMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetStateMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StateMessage) {
		return nil, false
	}
	return o.StateMessage, true
}

// HasStateMessage returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasStateMessage() bool {
	if o != nil && !IsNil(o.StateMessage) {
		return true
	}

	return false
}

// SetStateMessage gets a reference to the given string and assigns it to the StateMessage field.
func (o *SuperplaneEvent) SetStateMessage(v string) {
	o.StateMessage = &v
}

// GetReceivedAt returns the ReceivedAt field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetReceivedAt() time.Time {
	if o == nil || IsNil(o.ReceivedAt) {
		var ret time.Time
		return ret
	}
	return *o.ReceivedAt
}

// GetReceivedAtOk returns a tuple with the ReceivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetReceivedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReceivedAt) {
		return nil, false
	}
	return o.ReceivedAt, true
}

// HasReceivedAt returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasReceivedAt() bool {
	if o != nil && !IsNil(o.ReceivedAt) {
		return true
	}

	return false
}

// SetReceivedAt gets a reference to the given time.Time and assigns it to the ReceivedAt field.
func (o *SuperplaneEvent) SetReceivedAt(v time.Time) {
	o.ReceivedAt = &v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetRaw() map[string]interface{} {
	if o == nil || IsNil(o.Raw) {
		var ret map[string]interface{}
		return ret
	}
	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetRawOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Raw) {
		return map[string]interface{}{}, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasRaw() bool {
	if o != nil && !IsNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given map[string]interface{} and assigns it to the Raw field.
func (o *SuperplaneEvent) SetRaw(v map[string]interface{}) {
	o.Raw = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *SuperplaneEvent) GetHeaders() map[string]interface{} {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]interface{}
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperplaneEvent) GetHeadersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Headers) {
		return map[string]interface{}{}, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *SuperplaneEvent) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]interface{} and assigns it to the Headers field.
func (o *SuperplaneEvent) SetHeaders(v map[string]interface{}) {
	o.Headers = v
}

func (o SuperplaneEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperplaneEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}
	if !IsNil(o.SourceType) {
		toSerialize["sourceType"] = o.SourceType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.StateReason) {
		toSerialize["stateReason"] = o.StateReason
	}
	if !IsNil(o.StateMessage) {
		toSerialize["stateMessage"] = o.StateMessage
	}
	if !IsNil(o.ReceivedAt) {
		toSerialize["receivedAt"] = o.ReceivedAt
	}
	if !IsNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	return toSerialize, nil
}

type NullableSuperplaneEvent struct {
	value *SuperplaneEvent
	isSet bool
}

func (v NullableSuperplaneEvent) Get() *SuperplaneEvent {
	return v.value
}

func (v *NullableSuperplaneEvent) Set(val *SuperplaneEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperplaneEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperplaneEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperplaneEvent(val *SuperplaneEvent) *NullableSuperplaneEvent {
	return &NullableSuperplaneEvent{value: val, isSet: true}
}

func (v NullableSuperplaneEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperplaneEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


