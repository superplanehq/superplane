// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.8
// source: primitives.proto

package primitives

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Primitives_ListPrimitives_FullMethodName       = "/Superplane.Primitives/ListPrimitives"
	Primitives_DescribePrimitive_FullMethodName    = "/Superplane.Primitives/DescribePrimitive"
	Primitives_ListPrimitiveActions_FullMethodName = "/Superplane.Primitives/ListPrimitiveActions"
)

// PrimitivesClient is the client API for Primitives service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimitivesClient interface {
	ListPrimitives(ctx context.Context, in *ListPrimitivesRequest, opts ...grpc.CallOption) (*ListPrimitivesResponse, error)
	DescribePrimitive(ctx context.Context, in *DescribePrimitiveRequest, opts ...grpc.CallOption) (*DescribePrimitiveResponse, error)
	ListPrimitiveActions(ctx context.Context, in *ListPrimitiveActionsRequest, opts ...grpc.CallOption) (*ListPrimitiveActionsResponse, error)
}

type primitivesClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimitivesClient(cc grpc.ClientConnInterface) PrimitivesClient {
	return &primitivesClient{cc}
}

func (c *primitivesClient) ListPrimitives(ctx context.Context, in *ListPrimitivesRequest, opts ...grpc.CallOption) (*ListPrimitivesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrimitivesResponse)
	err := c.cc.Invoke(ctx, Primitives_ListPrimitives_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *primitivesClient) DescribePrimitive(ctx context.Context, in *DescribePrimitiveRequest, opts ...grpc.CallOption) (*DescribePrimitiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribePrimitiveResponse)
	err := c.cc.Invoke(ctx, Primitives_DescribePrimitive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *primitivesClient) ListPrimitiveActions(ctx context.Context, in *ListPrimitiveActionsRequest, opts ...grpc.CallOption) (*ListPrimitiveActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrimitiveActionsResponse)
	err := c.cc.Invoke(ctx, Primitives_ListPrimitiveActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrimitivesServer is the server API for Primitives service.
// All implementations should embed UnimplementedPrimitivesServer
// for forward compatibility.
type PrimitivesServer interface {
	ListPrimitives(context.Context, *ListPrimitivesRequest) (*ListPrimitivesResponse, error)
	DescribePrimitive(context.Context, *DescribePrimitiveRequest) (*DescribePrimitiveResponse, error)
	ListPrimitiveActions(context.Context, *ListPrimitiveActionsRequest) (*ListPrimitiveActionsResponse, error)
}

// UnimplementedPrimitivesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrimitivesServer struct{}

func (UnimplementedPrimitivesServer) ListPrimitives(context.Context, *ListPrimitivesRequest) (*ListPrimitivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrimitives not implemented")
}
func (UnimplementedPrimitivesServer) DescribePrimitive(context.Context, *DescribePrimitiveRequest) (*DescribePrimitiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePrimitive not implemented")
}
func (UnimplementedPrimitivesServer) ListPrimitiveActions(context.Context, *ListPrimitiveActionsRequest) (*ListPrimitiveActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrimitiveActions not implemented")
}
func (UnimplementedPrimitivesServer) testEmbeddedByValue() {}

// UnsafePrimitivesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimitivesServer will
// result in compilation errors.
type UnsafePrimitivesServer interface {
	mustEmbedUnimplementedPrimitivesServer()
}

func RegisterPrimitivesServer(s grpc.ServiceRegistrar, srv PrimitivesServer) {
	// If the following call pancis, it indicates UnimplementedPrimitivesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Primitives_ServiceDesc, srv)
}

func _Primitives_ListPrimitives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrimitivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimitivesServer).ListPrimitives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Primitives_ListPrimitives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimitivesServer).ListPrimitives(ctx, req.(*ListPrimitivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Primitives_DescribePrimitive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePrimitiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimitivesServer).DescribePrimitive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Primitives_DescribePrimitive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimitivesServer).DescribePrimitive(ctx, req.(*DescribePrimitiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Primitives_ListPrimitiveActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrimitiveActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimitivesServer).ListPrimitiveActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Primitives_ListPrimitiveActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimitivesServer).ListPrimitiveActions(ctx, req.(*ListPrimitiveActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Primitives_ServiceDesc is the grpc.ServiceDesc for Primitives service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Primitives_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Superplane.Primitives",
	HandlerType: (*PrimitivesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPrimitives",
			Handler:    _Primitives_ListPrimitives_Handler,
		},
		{
			MethodName: "DescribePrimitive",
			Handler:    _Primitives_DescribePrimitive_Handler,
		},
		{
			MethodName: "ListPrimitiveActions",
			Handler:    _Primitives_ListPrimitiveActions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "primitives.proto",
}
