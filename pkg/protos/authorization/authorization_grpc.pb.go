// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.8
// source: authorization.proto

package authorization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Authorization_ListUserPermissions_FullMethodName             = "/Superplane.Authorization.Authorization/ListUserPermissions"
	Authorization_AssignRole_FullMethodName                      = "/Superplane.Authorization.Authorization/AssignRole"
	Authorization_RemoveRole_FullMethodName                      = "/Superplane.Authorization.Authorization/RemoveRole"
	Authorization_ListRoles_FullMethodName                       = "/Superplane.Authorization.Authorization/ListRoles"
	Authorization_DescribeRole_FullMethodName                    = "/Superplane.Authorization.Authorization/DescribeRole"
	Authorization_GetUserRoles_FullMethodName                    = "/Superplane.Authorization.Authorization/GetUserRoles"
	Authorization_CreateOrganizationGroup_FullMethodName         = "/Superplane.Authorization.Authorization/CreateOrganizationGroup"
	Authorization_CreateCanvasGroup_FullMethodName               = "/Superplane.Authorization.Authorization/CreateCanvasGroup"
	Authorization_AddUserToOrganizationGroup_FullMethodName      = "/Superplane.Authorization.Authorization/AddUserToOrganizationGroup"
	Authorization_AddUserToCanvasGroup_FullMethodName            = "/Superplane.Authorization.Authorization/AddUserToCanvasGroup"
	Authorization_RemoveUserFromOrganizationGroup_FullMethodName = "/Superplane.Authorization.Authorization/RemoveUserFromOrganizationGroup"
	Authorization_RemoveUserFromCanvasGroup_FullMethodName       = "/Superplane.Authorization.Authorization/RemoveUserFromCanvasGroup"
	Authorization_ListOrganizationGroups_FullMethodName          = "/Superplane.Authorization.Authorization/ListOrganizationGroups"
	Authorization_ListCanvasGroups_FullMethodName                = "/Superplane.Authorization.Authorization/ListCanvasGroups"
	Authorization_GetOrganizationGroupUsers_FullMethodName       = "/Superplane.Authorization.Authorization/GetOrganizationGroupUsers"
	Authorization_GetCanvasGroupUsers_FullMethodName             = "/Superplane.Authorization.Authorization/GetCanvasGroupUsers"
	Authorization_GetOrganizationGroup_FullMethodName            = "/Superplane.Authorization.Authorization/GetOrganizationGroup"
	Authorization_GetCanvasGroup_FullMethodName                  = "/Superplane.Authorization.Authorization/GetCanvasGroup"
	Authorization_GetOrganizationUsers_FullMethodName            = "/Superplane.Authorization.Authorization/GetOrganizationUsers"
	Authorization_GetCanvasUsers_FullMethodName                  = "/Superplane.Authorization.Authorization/GetCanvasUsers"
	Authorization_CreateRole_FullMethodName                      = "/Superplane.Authorization.Authorization/CreateRole"
	Authorization_UpdateRole_FullMethodName                      = "/Superplane.Authorization.Authorization/UpdateRole"
	Authorization_DeleteRole_FullMethodName                      = "/Superplane.Authorization.Authorization/DeleteRole"
	Authorization_UpdateOrganizationGroup_FullMethodName         = "/Superplane.Authorization.Authorization/UpdateOrganizationGroup"
	Authorization_DeleteOrganizationGroup_FullMethodName         = "/Superplane.Authorization.Authorization/DeleteOrganizationGroup"
	Authorization_UpdateCanvasGroup_FullMethodName               = "/Superplane.Authorization.Authorization/UpdateCanvasGroup"
	Authorization_DeleteCanvasGroup_FullMethodName               = "/Superplane.Authorization.Authorization/DeleteCanvasGroup"
)

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	// Endpoint for listing all user permissions within a domain
	// Operation is synchronous and idempotent.
	ListUserPermissions(ctx context.Context, in *ListUserPermissionsRequest, opts ...grpc.CallOption) (*ListUserPermissionsResponse, error)
	// Endpoint for assigning a role to a user in an organization or canvas
	// Operation is synchronous and idempotent.
	AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*AssignRoleResponse, error)
	// Endpoint for removing a role from a user in an organization or canvas
	// Operation is synchronous and idempotent.
	RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...grpc.CallOption) (*RemoveRoleResponse, error)
	// Endpoint for listing available roles within a domain
	// Operation is synchronous and idempotent.
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// Endpoint for describing a specific role
	// Operation is synchronous and idempotent.
	DescribeRole(ctx context.Context, in *DescribeRoleRequest, opts ...grpc.CallOption) (*DescribeRoleResponse, error)
	// Endpoint for getting user roles within a domain
	// Operation is synchronous and idempotent.
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	// Endpoint for creating a group within an organization
	// Operation is synchronous and idempotent.
	CreateOrganizationGroup(ctx context.Context, in *CreateOrganizationGroupRequest, opts ...grpc.CallOption) (*CreateOrganizationGroupResponse, error)
	// Endpoint for creating a group within a canvas
	// Operation is synchronous and idempotent.
	CreateCanvasGroup(ctx context.Context, in *CreateCanvasGroupRequest, opts ...grpc.CallOption) (*CreateCanvasGroupResponse, error)
	// Endpoint for adding a user to an organization group
	// Operation is synchronous and idempotent.
	AddUserToOrganizationGroup(ctx context.Context, in *AddUserToOrganizationGroupRequest, opts ...grpc.CallOption) (*AddUserToOrganizationGroupResponse, error)
	// Endpoint for adding a user to a canvas group
	// Operation is synchronous and idempotent.
	AddUserToCanvasGroup(ctx context.Context, in *AddUserToCanvasGroupRequest, opts ...grpc.CallOption) (*AddUserToCanvasGroupResponse, error)
	// Endpoint for removing a user from an organization group
	// Operation is synchronous and idempotent.
	RemoveUserFromOrganizationGroup(ctx context.Context, in *RemoveUserFromOrganizationGroupRequest, opts ...grpc.CallOption) (*RemoveUserFromOrganizationGroupResponse, error)
	// Endpoint for removing a user from a canvas group
	// Operation is synchronous and idempotent.
	RemoveUserFromCanvasGroup(ctx context.Context, in *RemoveUserFromCanvasGroupRequest, opts ...grpc.CallOption) (*RemoveUserFromCanvasGroupResponse, error)
	// Endpoint for listing groups within an organization
	// Operation is synchronous and idempotent.
	ListOrganizationGroups(ctx context.Context, in *ListOrganizationGroupsRequest, opts ...grpc.CallOption) (*ListOrganizationGroupsResponse, error)
	// Endpoint for listing groups within a canvas
	// Operation is synchronous and idempotent.
	ListCanvasGroups(ctx context.Context, in *ListCanvasGroupsRequest, opts ...grpc.CallOption) (*ListCanvasGroupsResponse, error)
	// Endpoint for getting users in a specific organization group
	// Operation is synchronous and idempotent.
	GetOrganizationGroupUsers(ctx context.Context, in *GetOrganizationGroupUsersRequest, opts ...grpc.CallOption) (*GetOrganizationGroupUsersResponse, error)
	// Endpoint for getting users in a specific canvas group
	// Operation is synchronous and idempotent.
	GetCanvasGroupUsers(ctx context.Context, in *GetCanvasGroupUsersRequest, opts ...grpc.CallOption) (*GetCanvasGroupUsersResponse, error)
	// Endpoint for getting details of a specific organization group
	// Operation is synchronous and idempotent.
	GetOrganizationGroup(ctx context.Context, in *GetOrganizationGroupRequest, opts ...grpc.CallOption) (*GetOrganizationGroupResponse, error)
	// Endpoint for getting details of a specific canvas group
	// Operation is synchronous and idempotent.
	GetCanvasGroup(ctx context.Context, in *GetCanvasGroupRequest, opts ...grpc.CallOption) (*GetCanvasGroupResponse, error)
	// Endpoint for getting all users in an organization
	// Operation is synchronous and idempotent.
	GetOrganizationUsers(ctx context.Context, in *GetOrganizationUsersRequest, opts ...grpc.CallOption) (*GetOrganizationUsersResponse, error)
	// Endpoint for getting all users in a canvas
	// Operation is synchronous and idempotent.
	GetCanvasUsers(ctx context.Context, in *GetCanvasUsersRequest, opts ...grpc.CallOption) (*GetCanvasUsersResponse, error)
	// Endpoint for creating a custom role
	// Operation is synchronous and idempotent.
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// Endpoint for updating a custom role
	// Operation is synchronous and idempotent.
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	// Endpoint for deleting a custom role
	// Operation is synchronous and idempotent.
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// Endpoint for updating an organization group
	// Operation is synchronous and idempotent.
	UpdateOrganizationGroup(ctx context.Context, in *UpdateOrganizationGroupRequest, opts ...grpc.CallOption) (*UpdateOrganizationGroupResponse, error)
	// Endpoint for deleting an organization group
	// Operation is synchronous and idempotent.
	DeleteOrganizationGroup(ctx context.Context, in *DeleteOrganizationGroupRequest, opts ...grpc.CallOption) (*DeleteOrganizationGroupResponse, error)
	// Endpoint for updating a canvas group
	// Operation is synchronous and idempotent.
	UpdateCanvasGroup(ctx context.Context, in *UpdateCanvasGroupRequest, opts ...grpc.CallOption) (*UpdateCanvasGroupResponse, error)
	// Endpoint for deleting a canvas group
	// Operation is synchronous and idempotent.
	DeleteCanvasGroup(ctx context.Context, in *DeleteCanvasGroupRequest, opts ...grpc.CallOption) (*DeleteCanvasGroupResponse, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) ListUserPermissions(ctx context.Context, in *ListUserPermissionsRequest, opts ...grpc.CallOption) (*ListUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserPermissionsResponse)
	err := c.cc.Invoke(ctx, Authorization_ListUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*AssignRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignRoleResponse)
	err := c.cc.Invoke(ctx, Authorization_AssignRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...grpc.CallOption) (*RemoveRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRoleResponse)
	err := c.cc.Invoke(ctx, Authorization_RemoveRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, Authorization_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DescribeRole(ctx context.Context, in *DescribeRoleRequest, opts ...grpc.CallOption) (*DescribeRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeRoleResponse)
	err := c.cc.Invoke(ctx, Authorization_DescribeRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, Authorization_GetUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreateOrganizationGroup(ctx context.Context, in *CreateOrganizationGroupRequest, opts ...grpc.CallOption) (*CreateOrganizationGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_CreateOrganizationGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreateCanvasGroup(ctx context.Context, in *CreateCanvasGroupRequest, opts ...grpc.CallOption) (*CreateCanvasGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCanvasGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_CreateCanvasGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AddUserToOrganizationGroup(ctx context.Context, in *AddUserToOrganizationGroupRequest, opts ...grpc.CallOption) (*AddUserToOrganizationGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserToOrganizationGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_AddUserToOrganizationGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AddUserToCanvasGroup(ctx context.Context, in *AddUserToCanvasGroupRequest, opts ...grpc.CallOption) (*AddUserToCanvasGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserToCanvasGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_AddUserToCanvasGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RemoveUserFromOrganizationGroup(ctx context.Context, in *RemoveUserFromOrganizationGroupRequest, opts ...grpc.CallOption) (*RemoveUserFromOrganizationGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserFromOrganizationGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_RemoveUserFromOrganizationGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RemoveUserFromCanvasGroup(ctx context.Context, in *RemoveUserFromCanvasGroupRequest, opts ...grpc.CallOption) (*RemoveUserFromCanvasGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserFromCanvasGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_RemoveUserFromCanvasGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListOrganizationGroups(ctx context.Context, in *ListOrganizationGroupsRequest, opts ...grpc.CallOption) (*ListOrganizationGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationGroupsResponse)
	err := c.cc.Invoke(ctx, Authorization_ListOrganizationGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListCanvasGroups(ctx context.Context, in *ListCanvasGroupsRequest, opts ...grpc.CallOption) (*ListCanvasGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCanvasGroupsResponse)
	err := c.cc.Invoke(ctx, Authorization_ListCanvasGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetOrganizationGroupUsers(ctx context.Context, in *GetOrganizationGroupUsersRequest, opts ...grpc.CallOption) (*GetOrganizationGroupUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationGroupUsersResponse)
	err := c.cc.Invoke(ctx, Authorization_GetOrganizationGroupUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetCanvasGroupUsers(ctx context.Context, in *GetCanvasGroupUsersRequest, opts ...grpc.CallOption) (*GetCanvasGroupUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCanvasGroupUsersResponse)
	err := c.cc.Invoke(ctx, Authorization_GetCanvasGroupUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetOrganizationGroup(ctx context.Context, in *GetOrganizationGroupRequest, opts ...grpc.CallOption) (*GetOrganizationGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_GetOrganizationGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetCanvasGroup(ctx context.Context, in *GetCanvasGroupRequest, opts ...grpc.CallOption) (*GetCanvasGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCanvasGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_GetCanvasGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetOrganizationUsers(ctx context.Context, in *GetOrganizationUsersRequest, opts ...grpc.CallOption) (*GetOrganizationUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationUsersResponse)
	err := c.cc.Invoke(ctx, Authorization_GetOrganizationUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetCanvasUsers(ctx context.Context, in *GetCanvasUsersRequest, opts ...grpc.CallOption) (*GetCanvasUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCanvasUsersResponse)
	err := c.cc.Invoke(ctx, Authorization_GetCanvasUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, Authorization_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, Authorization_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, Authorization_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateOrganizationGroup(ctx context.Context, in *UpdateOrganizationGroupRequest, opts ...grpc.CallOption) (*UpdateOrganizationGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_UpdateOrganizationGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteOrganizationGroup(ctx context.Context, in *DeleteOrganizationGroupRequest, opts ...grpc.CallOption) (*DeleteOrganizationGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_DeleteOrganizationGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateCanvasGroup(ctx context.Context, in *UpdateCanvasGroupRequest, opts ...grpc.CallOption) (*UpdateCanvasGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCanvasGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_UpdateCanvasGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteCanvasGroup(ctx context.Context, in *DeleteCanvasGroupRequest, opts ...grpc.CallOption) (*DeleteCanvasGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCanvasGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_DeleteCanvasGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations should embed UnimplementedAuthorizationServer
// for forward compatibility.
type AuthorizationServer interface {
	// Endpoint for listing all user permissions within a domain
	// Operation is synchronous and idempotent.
	ListUserPermissions(context.Context, *ListUserPermissionsRequest) (*ListUserPermissionsResponse, error)
	// Endpoint for assigning a role to a user in an organization or canvas
	// Operation is synchronous and idempotent.
	AssignRole(context.Context, *AssignRoleRequest) (*AssignRoleResponse, error)
	// Endpoint for removing a role from a user in an organization or canvas
	// Operation is synchronous and idempotent.
	RemoveRole(context.Context, *RemoveRoleRequest) (*RemoveRoleResponse, error)
	// Endpoint for listing available roles within a domain
	// Operation is synchronous and idempotent.
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// Endpoint for describing a specific role
	// Operation is synchronous and idempotent.
	DescribeRole(context.Context, *DescribeRoleRequest) (*DescribeRoleResponse, error)
	// Endpoint for getting user roles within a domain
	// Operation is synchronous and idempotent.
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	// Endpoint for creating a group within an organization
	// Operation is synchronous and idempotent.
	CreateOrganizationGroup(context.Context, *CreateOrganizationGroupRequest) (*CreateOrganizationGroupResponse, error)
	// Endpoint for creating a group within a canvas
	// Operation is synchronous and idempotent.
	CreateCanvasGroup(context.Context, *CreateCanvasGroupRequest) (*CreateCanvasGroupResponse, error)
	// Endpoint for adding a user to an organization group
	// Operation is synchronous and idempotent.
	AddUserToOrganizationGroup(context.Context, *AddUserToOrganizationGroupRequest) (*AddUserToOrganizationGroupResponse, error)
	// Endpoint for adding a user to a canvas group
	// Operation is synchronous and idempotent.
	AddUserToCanvasGroup(context.Context, *AddUserToCanvasGroupRequest) (*AddUserToCanvasGroupResponse, error)
	// Endpoint for removing a user from an organization group
	// Operation is synchronous and idempotent.
	RemoveUserFromOrganizationGroup(context.Context, *RemoveUserFromOrganizationGroupRequest) (*RemoveUserFromOrganizationGroupResponse, error)
	// Endpoint for removing a user from a canvas group
	// Operation is synchronous and idempotent.
	RemoveUserFromCanvasGroup(context.Context, *RemoveUserFromCanvasGroupRequest) (*RemoveUserFromCanvasGroupResponse, error)
	// Endpoint for listing groups within an organization
	// Operation is synchronous and idempotent.
	ListOrganizationGroups(context.Context, *ListOrganizationGroupsRequest) (*ListOrganizationGroupsResponse, error)
	// Endpoint for listing groups within a canvas
	// Operation is synchronous and idempotent.
	ListCanvasGroups(context.Context, *ListCanvasGroupsRequest) (*ListCanvasGroupsResponse, error)
	// Endpoint for getting users in a specific organization group
	// Operation is synchronous and idempotent.
	GetOrganizationGroupUsers(context.Context, *GetOrganizationGroupUsersRequest) (*GetOrganizationGroupUsersResponse, error)
	// Endpoint for getting users in a specific canvas group
	// Operation is synchronous and idempotent.
	GetCanvasGroupUsers(context.Context, *GetCanvasGroupUsersRequest) (*GetCanvasGroupUsersResponse, error)
	// Endpoint for getting details of a specific organization group
	// Operation is synchronous and idempotent.
	GetOrganizationGroup(context.Context, *GetOrganizationGroupRequest) (*GetOrganizationGroupResponse, error)
	// Endpoint for getting details of a specific canvas group
	// Operation is synchronous and idempotent.
	GetCanvasGroup(context.Context, *GetCanvasGroupRequest) (*GetCanvasGroupResponse, error)
	// Endpoint for getting all users in an organization
	// Operation is synchronous and idempotent.
	GetOrganizationUsers(context.Context, *GetOrganizationUsersRequest) (*GetOrganizationUsersResponse, error)
	// Endpoint for getting all users in a canvas
	// Operation is synchronous and idempotent.
	GetCanvasUsers(context.Context, *GetCanvasUsersRequest) (*GetCanvasUsersResponse, error)
	// Endpoint for creating a custom role
	// Operation is synchronous and idempotent.
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// Endpoint for updating a custom role
	// Operation is synchronous and idempotent.
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// Endpoint for deleting a custom role
	// Operation is synchronous and idempotent.
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// Endpoint for updating an organization group
	// Operation is synchronous and idempotent.
	UpdateOrganizationGroup(context.Context, *UpdateOrganizationGroupRequest) (*UpdateOrganizationGroupResponse, error)
	// Endpoint for deleting an organization group
	// Operation is synchronous and idempotent.
	DeleteOrganizationGroup(context.Context, *DeleteOrganizationGroupRequest) (*DeleteOrganizationGroupResponse, error)
	// Endpoint for updating a canvas group
	// Operation is synchronous and idempotent.
	UpdateCanvasGroup(context.Context, *UpdateCanvasGroupRequest) (*UpdateCanvasGroupResponse, error)
	// Endpoint for deleting a canvas group
	// Operation is synchronous and idempotent.
	DeleteCanvasGroup(context.Context, *DeleteCanvasGroupRequest) (*DeleteCanvasGroupResponse, error)
}

// UnimplementedAuthorizationServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorizationServer struct{}

func (UnimplementedAuthorizationServer) ListUserPermissions(context.Context, *ListUserPermissionsRequest) (*ListUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPermissions not implemented")
}
func (UnimplementedAuthorizationServer) AssignRole(context.Context, *AssignRoleRequest) (*AssignRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRole not implemented")
}
func (UnimplementedAuthorizationServer) RemoveRole(context.Context, *RemoveRoleRequest) (*RemoveRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRole not implemented")
}
func (UnimplementedAuthorizationServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedAuthorizationServer) DescribeRole(context.Context, *DescribeRoleRequest) (*DescribeRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRole not implemented")
}
func (UnimplementedAuthorizationServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedAuthorizationServer) CreateOrganizationGroup(context.Context, *CreateOrganizationGroupRequest) (*CreateOrganizationGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationGroup not implemented")
}
func (UnimplementedAuthorizationServer) CreateCanvasGroup(context.Context, *CreateCanvasGroupRequest) (*CreateCanvasGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCanvasGroup not implemented")
}
func (UnimplementedAuthorizationServer) AddUserToOrganizationGroup(context.Context, *AddUserToOrganizationGroupRequest) (*AddUserToOrganizationGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToOrganizationGroup not implemented")
}
func (UnimplementedAuthorizationServer) AddUserToCanvasGroup(context.Context, *AddUserToCanvasGroupRequest) (*AddUserToCanvasGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToCanvasGroup not implemented")
}
func (UnimplementedAuthorizationServer) RemoveUserFromOrganizationGroup(context.Context, *RemoveUserFromOrganizationGroupRequest) (*RemoveUserFromOrganizationGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromOrganizationGroup not implemented")
}
func (UnimplementedAuthorizationServer) RemoveUserFromCanvasGroup(context.Context, *RemoveUserFromCanvasGroupRequest) (*RemoveUserFromCanvasGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromCanvasGroup not implemented")
}
func (UnimplementedAuthorizationServer) ListOrganizationGroups(context.Context, *ListOrganizationGroupsRequest) (*ListOrganizationGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationGroups not implemented")
}
func (UnimplementedAuthorizationServer) ListCanvasGroups(context.Context, *ListCanvasGroupsRequest) (*ListCanvasGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCanvasGroups not implemented")
}
func (UnimplementedAuthorizationServer) GetOrganizationGroupUsers(context.Context, *GetOrganizationGroupUsersRequest) (*GetOrganizationGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationGroupUsers not implemented")
}
func (UnimplementedAuthorizationServer) GetCanvasGroupUsers(context.Context, *GetCanvasGroupUsersRequest) (*GetCanvasGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanvasGroupUsers not implemented")
}
func (UnimplementedAuthorizationServer) GetOrganizationGroup(context.Context, *GetOrganizationGroupRequest) (*GetOrganizationGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationGroup not implemented")
}
func (UnimplementedAuthorizationServer) GetCanvasGroup(context.Context, *GetCanvasGroupRequest) (*GetCanvasGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanvasGroup not implemented")
}
func (UnimplementedAuthorizationServer) GetOrganizationUsers(context.Context, *GetOrganizationUsersRequest) (*GetOrganizationUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationUsers not implemented")
}
func (UnimplementedAuthorizationServer) GetCanvasUsers(context.Context, *GetCanvasUsersRequest) (*GetCanvasUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanvasUsers not implemented")
}
func (UnimplementedAuthorizationServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthorizationServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthorizationServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthorizationServer) UpdateOrganizationGroup(context.Context, *UpdateOrganizationGroupRequest) (*UpdateOrganizationGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationGroup not implemented")
}
func (UnimplementedAuthorizationServer) DeleteOrganizationGroup(context.Context, *DeleteOrganizationGroupRequest) (*DeleteOrganizationGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationGroup not implemented")
}
func (UnimplementedAuthorizationServer) UpdateCanvasGroup(context.Context, *UpdateCanvasGroupRequest) (*UpdateCanvasGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCanvasGroup not implemented")
}
func (UnimplementedAuthorizationServer) DeleteCanvasGroup(context.Context, *DeleteCanvasGroupRequest) (*DeleteCanvasGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCanvasGroup not implemented")
}
func (UnimplementedAuthorizationServer) testEmbeddedByValue() {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s grpc.ServiceRegistrar, srv AuthorizationServer) {
	// If the following call pancis, it indicates UnimplementedAuthorizationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Authorization_ServiceDesc, srv)
}

func _Authorization_ListUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListUserPermissions(ctx, req.(*ListUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_AssignRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AssignRole(ctx, req.(*AssignRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RemoveRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RemoveRole(ctx, req.(*RemoveRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DescribeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DescribeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_DescribeRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DescribeRole(ctx, req.(*DescribeRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreateOrganizationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreateOrganizationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_CreateOrganizationGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreateOrganizationGroup(ctx, req.(*CreateOrganizationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreateCanvasGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCanvasGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreateCanvasGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_CreateCanvasGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreateCanvasGroup(ctx, req.(*CreateCanvasGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AddUserToOrganizationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToOrganizationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddUserToOrganizationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_AddUserToOrganizationGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddUserToOrganizationGroup(ctx, req.(*AddUserToOrganizationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AddUserToCanvasGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToCanvasGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddUserToCanvasGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_AddUserToCanvasGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddUserToCanvasGroup(ctx, req.(*AddUserToCanvasGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RemoveUserFromOrganizationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromOrganizationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RemoveUserFromOrganizationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RemoveUserFromOrganizationGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RemoveUserFromOrganizationGroup(ctx, req.(*RemoveUserFromOrganizationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RemoveUserFromCanvasGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromCanvasGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RemoveUserFromCanvasGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RemoveUserFromCanvasGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RemoveUserFromCanvasGroup(ctx, req.(*RemoveUserFromCanvasGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListOrganizationGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListOrganizationGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListOrganizationGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListOrganizationGroups(ctx, req.(*ListOrganizationGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListCanvasGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCanvasGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListCanvasGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListCanvasGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListCanvasGroups(ctx, req.(*ListCanvasGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetOrganizationGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetOrganizationGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_GetOrganizationGroupUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetOrganizationGroupUsers(ctx, req.(*GetOrganizationGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetCanvasGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCanvasGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetCanvasGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_GetCanvasGroupUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetCanvasGroupUsers(ctx, req.(*GetCanvasGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetOrganizationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetOrganizationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_GetOrganizationGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetOrganizationGroup(ctx, req.(*GetOrganizationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetCanvasGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCanvasGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetCanvasGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_GetCanvasGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetCanvasGroup(ctx, req.(*GetCanvasGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetOrganizationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetOrganizationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_GetOrganizationUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetOrganizationUsers(ctx, req.(*GetOrganizationUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetCanvasUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCanvasUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetCanvasUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_GetCanvasUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetCanvasUsers(ctx, req.(*GetCanvasUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateOrganizationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateOrganizationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UpdateOrganizationGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateOrganizationGroup(ctx, req.(*UpdateOrganizationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteOrganizationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteOrganizationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_DeleteOrganizationGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteOrganizationGroup(ctx, req.(*DeleteOrganizationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateCanvasGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCanvasGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateCanvasGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UpdateCanvasGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateCanvasGroup(ctx, req.(*UpdateCanvasGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteCanvasGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCanvasGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteCanvasGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_DeleteCanvasGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteCanvasGroup(ctx, req.(*DeleteCanvasGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorization_ServiceDesc is the grpc.ServiceDesc for Authorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Superplane.Authorization.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserPermissions",
			Handler:    _Authorization_ListUserPermissions_Handler,
		},
		{
			MethodName: "AssignRole",
			Handler:    _Authorization_AssignRole_Handler,
		},
		{
			MethodName: "RemoveRole",
			Handler:    _Authorization_RemoveRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Authorization_ListRoles_Handler,
		},
		{
			MethodName: "DescribeRole",
			Handler:    _Authorization_DescribeRole_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _Authorization_GetUserRoles_Handler,
		},
		{
			MethodName: "CreateOrganizationGroup",
			Handler:    _Authorization_CreateOrganizationGroup_Handler,
		},
		{
			MethodName: "CreateCanvasGroup",
			Handler:    _Authorization_CreateCanvasGroup_Handler,
		},
		{
			MethodName: "AddUserToOrganizationGroup",
			Handler:    _Authorization_AddUserToOrganizationGroup_Handler,
		},
		{
			MethodName: "AddUserToCanvasGroup",
			Handler:    _Authorization_AddUserToCanvasGroup_Handler,
		},
		{
			MethodName: "RemoveUserFromOrganizationGroup",
			Handler:    _Authorization_RemoveUserFromOrganizationGroup_Handler,
		},
		{
			MethodName: "RemoveUserFromCanvasGroup",
			Handler:    _Authorization_RemoveUserFromCanvasGroup_Handler,
		},
		{
			MethodName: "ListOrganizationGroups",
			Handler:    _Authorization_ListOrganizationGroups_Handler,
		},
		{
			MethodName: "ListCanvasGroups",
			Handler:    _Authorization_ListCanvasGroups_Handler,
		},
		{
			MethodName: "GetOrganizationGroupUsers",
			Handler:    _Authorization_GetOrganizationGroupUsers_Handler,
		},
		{
			MethodName: "GetCanvasGroupUsers",
			Handler:    _Authorization_GetCanvasGroupUsers_Handler,
		},
		{
			MethodName: "GetOrganizationGroup",
			Handler:    _Authorization_GetOrganizationGroup_Handler,
		},
		{
			MethodName: "GetCanvasGroup",
			Handler:    _Authorization_GetCanvasGroup_Handler,
		},
		{
			MethodName: "GetOrganizationUsers",
			Handler:    _Authorization_GetOrganizationUsers_Handler,
		},
		{
			MethodName: "GetCanvasUsers",
			Handler:    _Authorization_GetCanvasUsers_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Authorization_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Authorization_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Authorization_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateOrganizationGroup",
			Handler:    _Authorization_UpdateOrganizationGroup_Handler,
		},
		{
			MethodName: "DeleteOrganizationGroup",
			Handler:    _Authorization_DeleteOrganizationGroup_Handler,
		},
		{
			MethodName: "UpdateCanvasGroup",
			Handler:    _Authorization_UpdateCanvasGroup_Handler,
		},
		{
			MethodName: "DeleteCanvasGroup",
			Handler:    _Authorization_DeleteCanvasGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization.proto",
}
