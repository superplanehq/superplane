// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.8
// source: organizations.proto

package organizations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Organizations_DescribeOrganization_FullMethodName = "/Superplane.Organizations.Organizations/DescribeOrganization"
	Organizations_UpdateOrganization_FullMethodName   = "/Superplane.Organizations.Organizations/UpdateOrganization"
	Organizations_DeleteOrganization_FullMethodName   = "/Superplane.Organizations.Organizations/DeleteOrganization"
	Organizations_CreateInvitation_FullMethodName     = "/Superplane.Organizations.Organizations/CreateInvitation"
	Organizations_ListInvitations_FullMethodName      = "/Superplane.Organizations.Organizations/ListInvitations"
)

// OrganizationsClient is the client API for Organizations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsClient interface {
	DescribeOrganization(ctx context.Context, in *DescribeOrganizationRequest, opts ...grpc.CallOption) (*DescribeOrganizationResponse, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error)
	ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error)
}

type organizationsClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsClient(cc grpc.ClientConnInterface) OrganizationsClient {
	return &organizationsClient{cc}
}

func (c *organizationsClient) DescribeOrganization(ctx context.Context, in *DescribeOrganizationRequest, opts ...grpc.CallOption) (*DescribeOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeOrganizationResponse)
	err := c.cc.Invoke(ctx, Organizations_DescribeOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, Organizations_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, Organizations_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsClient) CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvitationResponse)
	err := c.cc.Invoke(ctx, Organizations_CreateInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsClient) ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvitationsResponse)
	err := c.cc.Invoke(ctx, Organizations_ListInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsServer is the server API for Organizations service.
// All implementations should embed UnimplementedOrganizationsServer
// for forward compatibility.
type OrganizationsServer interface {
	DescribeOrganization(context.Context, *DescribeOrganizationRequest) (*DescribeOrganizationResponse, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error)
	ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error)
}

// UnimplementedOrganizationsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrganizationsServer struct{}

func (UnimplementedOrganizationsServer) DescribeOrganization(context.Context, *DescribeOrganizationRequest) (*DescribeOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeOrganization not implemented")
}
func (UnimplementedOrganizationsServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedOrganizationsServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedOrganizationsServer) CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}
func (UnimplementedOrganizationsServer) ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitations not implemented")
}
func (UnimplementedOrganizationsServer) testEmbeddedByValue() {}

// UnsafeOrganizationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsServer will
// result in compilation errors.
type UnsafeOrganizationsServer interface {
	mustEmbedUnimplementedOrganizationsServer()
}

func RegisterOrganizationsServer(s grpc.ServiceRegistrar, srv OrganizationsServer) {
	// If the following call pancis, it indicates UnimplementedOrganizationsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Organizations_ServiceDesc, srv)
}

func _Organizations_DescribeOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServer).DescribeOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organizations_DescribeOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServer).DescribeOrganization(ctx, req.(*DescribeOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organizations_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organizations_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organizations_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organizations_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organizations_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organizations_CreateInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServer).CreateInvitation(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organizations_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organizations_ListInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServer).ListInvitations(ctx, req.(*ListInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Organizations_ServiceDesc is the grpc.ServiceDesc for Organizations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Organizations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Superplane.Organizations.Organizations",
	HandlerType: (*OrganizationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeOrganization",
			Handler:    _Organizations_DescribeOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _Organizations_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _Organizations_DeleteOrganization_Handler,
		},
		{
			MethodName: "CreateInvitation",
			Handler:    _Organizations_CreateInvitation_Handler,
		},
		{
			MethodName: "ListInvitations",
			Handler:    _Organizations_ListInvitations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organizations.proto",
}
