// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.3.0
// source: plumber.pipeline.proto

package plumber_pipeline

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	plumber_w_f_workflow "github.com/superplanehq/superplane/pkg/protos/plumber_w_f.workflow"
	user "github.com/superplanehq/superplane/pkg/protos/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of queues which(which pipelines) are returned in
// ListQueues(ListGrouped)Response
type QueueType int32

const (
	QueueType_IMPLICIT       QueueType = 0
	QueueType_USER_GENERATED QueueType = 1
)

// Enum value maps for QueueType.
var (
	QueueType_name = map[int32]string{
		0: "IMPLICIT",
		1: "USER_GENERATED",
	}
	QueueType_value = map[string]int32{
		"IMPLICIT":       0,
		"USER_GENERATED": 1,
	}
)

func (x QueueType) Enum() *QueueType {
	p := new(QueueType)
	*p = x
	return p
}

func (x QueueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueueType) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[0].Descriptor()
}

func (QueueType) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[0]
}

func (x QueueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueueType.Descriptor instead.
func (QueueType) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{0}
}

// Type of git reference for which pipeline is initiated.
type GitRefType int32

const (
	GitRefType_BRANCH GitRefType = 0
	GitRefType_TAG    GitRefType = 1
	GitRefType_PR     GitRefType = 2
)

// Enum value maps for GitRefType.
var (
	GitRefType_name = map[int32]string{
		0: "BRANCH",
		1: "TAG",
		2: "PR",
	}
	GitRefType_value = map[string]int32{
		"BRANCH": 0,
		"TAG":    1,
		"PR":     2,
	}
)

func (x GitRefType) Enum() *GitRefType {
	p := new(GitRefType)
	*p = x
	return p
}

func (x GitRefType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitRefType) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[1].Descriptor()
}

func (GitRefType) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[1]
}

func (x GitRefType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitRefType.Descriptor instead.
func (GitRefType) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{1}
}

// Pipeline trigger source
//
// - WORKFLOW          = Pipeline was triggered by workflow - it's an initial pipeline
// - PROMOTION  = Pipeline was triggered by manual promotion
// - AUTO_PROMOTION    = Pipeline was triggered by auto promotion
// - PARTIAL_RE_RUN    = Pipeline was triggered by partial re-run of a pipeline
type TriggeredBy int32

const (
	TriggeredBy_WORKFLOW       TriggeredBy = 0
	TriggeredBy_PROMOTION      TriggeredBy = 1
	TriggeredBy_AUTO_PROMOTION TriggeredBy = 2
	TriggeredBy_PARTIAL_RE_RUN TriggeredBy = 3
)

// Enum value maps for TriggeredBy.
var (
	TriggeredBy_name = map[int32]string{
		0: "WORKFLOW",
		1: "PROMOTION",
		2: "AUTO_PROMOTION",
		3: "PARTIAL_RE_RUN",
	}
	TriggeredBy_value = map[string]int32{
		"WORKFLOW":       0,
		"PROMOTION":      1,
		"AUTO_PROMOTION": 2,
		"PARTIAL_RE_RUN": 3,
	}
)

func (x TriggeredBy) Enum() *TriggeredBy {
	p := new(TriggeredBy)
	*p = x
	return p
}

func (x TriggeredBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggeredBy) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[2].Descriptor()
}

func (TriggeredBy) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[2]
}

func (x TriggeredBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggeredBy.Descriptor instead.
func (TriggeredBy) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{2}
}

type ScheduleRequest_ServiceType int32

const (
	ScheduleRequest_GIT_HUB  ScheduleRequest_ServiceType = 0
	ScheduleRequest_LOCAL    ScheduleRequest_ServiceType = 1
	ScheduleRequest_SNAPSHOT ScheduleRequest_ServiceType = 2
)

// Enum value maps for ScheduleRequest_ServiceType.
var (
	ScheduleRequest_ServiceType_name = map[int32]string{
		0: "GIT_HUB",
		1: "LOCAL",
		2: "SNAPSHOT",
	}
	ScheduleRequest_ServiceType_value = map[string]int32{
		"GIT_HUB":  0,
		"LOCAL":    1,
		"SNAPSHOT": 2,
	}
)

func (x ScheduleRequest_ServiceType) Enum() *ScheduleRequest_ServiceType {
	p := new(ScheduleRequest_ServiceType)
	*p = x
	return p
}

func (x ScheduleRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[3].Descriptor()
}

func (ScheduleRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[3]
}

func (x ScheduleRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleRequest_ServiceType.Descriptor instead.
func (ScheduleRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{0, 0}
}

// States that describe blocks's execution
//
// Normal block state transition looks like:
//
//	INITIALIZING -> WAITING -> RUNNING -> DONE
//
// If block's termination is requested while block is in RUNNING it goes to STOPPING
// and than to DONE(STOPPED), otherwise it goes straight to DONE(CANCELED).
type Block_State int32

const (
	Block_WAITING      Block_State = 0
	Block_RUNNING      Block_State = 1
	Block_STOPPING     Block_State = 2
	Block_DONE         Block_State = 3
	Block_INITIALIZING Block_State = 4
)

// Enum value maps for Block_State.
var (
	Block_State_name = map[int32]string{
		0: "WAITING",
		1: "RUNNING",
		2: "STOPPING",
		3: "DONE",
		4: "INITIALIZING",
	}
	Block_State_value = map[string]int32{
		"WAITING":      0,
		"RUNNING":      1,
		"STOPPING":     2,
		"DONE":         3,
		"INITIALIZING": 4,
	}
)

func (x Block_State) Enum() *Block_State {
	p := new(Block_State)
	*p = x
	return p
}

func (x Block_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Block_State) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[4].Descriptor()
}

func (Block_State) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[4]
}

func (x Block_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Block_State.Descriptor instead.
func (Block_State) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{4, 0}
}

type Block_Result int32

const (
	Block_PASSED   Block_Result = 0
	Block_STOPPED  Block_Result = 1
	Block_CANCELED Block_Result = 2
	Block_FAILED   Block_Result = 3
)

// Enum value maps for Block_Result.
var (
	Block_Result_name = map[int32]string{
		0: "PASSED",
		1: "STOPPED",
		2: "CANCELED",
		3: "FAILED",
	}
	Block_Result_value = map[string]int32{
		"PASSED":   0,
		"STOPPED":  1,
		"CANCELED": 2,
		"FAILED":   3,
	}
)

func (x Block_Result) Enum() *Block_Result {
	p := new(Block_Result)
	*p = x
	return p
}

func (x Block_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Block_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[5].Descriptor()
}

func (Block_Result) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[5]
}

func (x Block_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Block_Result.Descriptor instead.
func (Block_Result) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{4, 1}
}

// Reasons for result different from PASSED
//
// FAILED:
//   - TEST - one or more of user tests failed
//   - MALFORMED - Block failed due to one of next:
//   - missing cmd_file, malformed job_matrix or multiple blocks with same name
//   - STUCK  - Block was stuck for some internal reason and then aborted
//
// STOPPED or CANCELED:
//   - USER - terminated on users requests
//   - INTERNAL - terminated for internal reasons (probably something was stuck)
//   - STRATEGY - terminated based on selected cancelation strategy
//   - FAST_FAILING - terminated because something other failed (other block run in parallel)
//   - DELETED - terminated because branch was deleted while blocks's build was running
//   - TIMEOUT - Block run longer than execution_time_limit and was stopped
//   - SKIPPED - Filtered out (not executed because did not satisfy filter conditions)
type Block_ResultReason int32

const (
	Block_TEST         Block_ResultReason = 0
	Block_MALFORMED    Block_ResultReason = 1
	Block_STUCK        Block_ResultReason = 2
	Block_USER         Block_ResultReason = 3
	Block_INTERNAL     Block_ResultReason = 4
	Block_STRATEGY     Block_ResultReason = 5
	Block_FAST_FAILING Block_ResultReason = 6
	Block_DELETED      Block_ResultReason = 7
	Block_TIMEOUT      Block_ResultReason = 8
	Block_SKIPPED      Block_ResultReason = 9
)

// Enum value maps for Block_ResultReason.
var (
	Block_ResultReason_name = map[int32]string{
		0: "TEST",
		1: "MALFORMED",
		2: "STUCK",
		3: "USER",
		4: "INTERNAL",
		5: "STRATEGY",
		6: "FAST_FAILING",
		7: "DELETED",
		8: "TIMEOUT",
		9: "SKIPPED",
	}
	Block_ResultReason_value = map[string]int32{
		"TEST":         0,
		"MALFORMED":    1,
		"STUCK":        2,
		"USER":         3,
		"INTERNAL":     4,
		"STRATEGY":     5,
		"FAST_FAILING": 6,
		"DELETED":      7,
		"TIMEOUT":      8,
		"SKIPPED":      9,
	}
)

func (x Block_ResultReason) Enum() *Block_ResultReason {
	p := new(Block_ResultReason)
	*p = x
	return p
}

func (x Block_ResultReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Block_ResultReason) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[6].Descriptor()
}

func (Block_ResultReason) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[6]
}

func (x Block_ResultReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Block_ResultReason.Descriptor instead.
func (Block_ResultReason) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{4, 2}
}

type ListKeysetRequest_Order int32

const (
	ListKeysetRequest_BY_CREATION_TIME_DESC ListKeysetRequest_Order = 0
)

// Enum value maps for ListKeysetRequest_Order.
var (
	ListKeysetRequest_Order_name = map[int32]string{
		0: "BY_CREATION_TIME_DESC",
	}
	ListKeysetRequest_Order_value = map[string]int32{
		"BY_CREATION_TIME_DESC": 0,
	}
)

func (x ListKeysetRequest_Order) Enum() *ListKeysetRequest_Order {
	p := new(ListKeysetRequest_Order)
	*p = x
	return p
}

func (x ListKeysetRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListKeysetRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[7].Descriptor()
}

func (ListKeysetRequest_Order) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[7]
}

func (x ListKeysetRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListKeysetRequest_Order.Descriptor instead.
func (ListKeysetRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{15, 0}
}

type ListKeysetRequest_Direction int32

const (
	ListKeysetRequest_NEXT     ListKeysetRequest_Direction = 0
	ListKeysetRequest_PREVIOUS ListKeysetRequest_Direction = 1
)

// Enum value maps for ListKeysetRequest_Direction.
var (
	ListKeysetRequest_Direction_name = map[int32]string{
		0: "NEXT",
		1: "PREVIOUS",
	}
	ListKeysetRequest_Direction_value = map[string]int32{
		"NEXT":     0,
		"PREVIOUS": 1,
	}
)

func (x ListKeysetRequest_Direction) Enum() *ListKeysetRequest_Direction {
	p := new(ListKeysetRequest_Direction)
	*p = x
	return p
}

func (x ListKeysetRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListKeysetRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[8].Descriptor()
}

func (ListKeysetRequest_Direction) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[8]
}

func (x ListKeysetRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListKeysetRequest_Direction.Descriptor instead.
func (ListKeysetRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{15, 1}
}

// States that describe pipeline's execution
//
// Normal pipeline state transition looks like:
//
//	INITIALIZING -> PENDING -> RUNNING -> DONE
//
// If there are older pipelines from same branch in RUNNING state than it's like:
//
//	INITIALIZING -> PENDING -> QUEUING (until older finishes) -> RUNNING -> DONE
//
// If termination is requested while pipeline is in RUNNING it goes to STOPPING
// and than to DONE(STOPPED), otherwise it goes straight to DONE(CANCELED).
type Pipeline_State int32

const (
	Pipeline_INITIALIZING Pipeline_State = 0
	Pipeline_PENDING      Pipeline_State = 1
	Pipeline_QUEUING      Pipeline_State = 2
	Pipeline_RUNNING      Pipeline_State = 3
	Pipeline_STOPPING     Pipeline_State = 4
	Pipeline_DONE         Pipeline_State = 5
)

// Enum value maps for Pipeline_State.
var (
	Pipeline_State_name = map[int32]string{
		0: "INITIALIZING",
		1: "PENDING",
		2: "QUEUING",
		3: "RUNNING",
		4: "STOPPING",
		5: "DONE",
	}
	Pipeline_State_value = map[string]int32{
		"INITIALIZING": 0,
		"PENDING":      1,
		"QUEUING":      2,
		"RUNNING":      3,
		"STOPPING":     4,
		"DONE":         5,
	}
)

func (x Pipeline_State) Enum() *Pipeline_State {
	p := new(Pipeline_State)
	*p = x
	return p
}

func (x Pipeline_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pipeline_State) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[9].Descriptor()
}

func (Pipeline_State) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[9]
}

func (x Pipeline_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pipeline_State.Descriptor instead.
func (Pipeline_State) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{20, 0}
}

type Pipeline_Result int32

const (
	Pipeline_PASSED   Pipeline_Result = 0
	Pipeline_STOPPED  Pipeline_Result = 1
	Pipeline_CANCELED Pipeline_Result = 2
	Pipeline_FAILED   Pipeline_Result = 3
)

// Enum value maps for Pipeline_Result.
var (
	Pipeline_Result_name = map[int32]string{
		0: "PASSED",
		1: "STOPPED",
		2: "CANCELED",
		3: "FAILED",
	}
	Pipeline_Result_value = map[string]int32{
		"PASSED":   0,
		"STOPPED":  1,
		"CANCELED": 2,
		"FAILED":   3,
	}
)

func (x Pipeline_Result) Enum() *Pipeline_Result {
	p := new(Pipeline_Result)
	*p = x
	return p
}

func (x Pipeline_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pipeline_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[10].Descriptor()
}

func (Pipeline_Result) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[10]
}

func (x Pipeline_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pipeline_Result.Descriptor instead.
func (Pipeline_Result) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{20, 1}
}

// Reasons for result different from PASSED
//
// FAILED:
//   - TEST - one or more of user tests failed
//   - MALFORMED - Pipeline failed because YAML definition is malformed
//   - STUCK  - Pipeline was stuck for some internal reason and then aborted
//
// STOPPED or CANCELED:
//   - USER - terminated on users requests
//   - INTERNAL - terminated for internal reasons (probably something was stuck)
//   - STRATEGY - terminated based on selected cancelation strategy
//   - FAST_FAILING - terminated because something other failed (in case of multiple subpipelines)
//   - DELETED - terminated because branch was deleted while pipeline's build was running
//   - TIMEOUT - Pipeline run longer than execution_time_limit and was terminated
type Pipeline_ResultReason int32

const (
	Pipeline_TEST         Pipeline_ResultReason = 0
	Pipeline_MALFORMED    Pipeline_ResultReason = 1
	Pipeline_STUCK        Pipeline_ResultReason = 2
	Pipeline_USER         Pipeline_ResultReason = 3
	Pipeline_INTERNAL     Pipeline_ResultReason = 4
	Pipeline_STRATEGY     Pipeline_ResultReason = 5
	Pipeline_FAST_FAILING Pipeline_ResultReason = 6
	Pipeline_DELETED      Pipeline_ResultReason = 7
	Pipeline_TIMEOUT      Pipeline_ResultReason = 8
)

// Enum value maps for Pipeline_ResultReason.
var (
	Pipeline_ResultReason_name = map[int32]string{
		0: "TEST",
		1: "MALFORMED",
		2: "STUCK",
		3: "USER",
		4: "INTERNAL",
		5: "STRATEGY",
		6: "FAST_FAILING",
		7: "DELETED",
		8: "TIMEOUT",
	}
	Pipeline_ResultReason_value = map[string]int32{
		"TEST":         0,
		"MALFORMED":    1,
		"STUCK":        2,
		"USER":         3,
		"INTERNAL":     4,
		"STRATEGY":     5,
		"FAST_FAILING": 6,
		"DELETED":      7,
		"TIMEOUT":      8,
	}
)

func (x Pipeline_ResultReason) Enum() *Pipeline_ResultReason {
	p := new(Pipeline_ResultReason)
	*p = x
	return p
}

func (x Pipeline_ResultReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pipeline_ResultReason) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[11].Descriptor()
}

func (Pipeline_ResultReason) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[11]
}

func (x Pipeline_ResultReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pipeline_ResultReason.Descriptor instead.
func (Pipeline_ResultReason) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{20, 2}
}

type ListActivityRequest_Order int32

const (
	ListActivityRequest_BY_CREATION_TIME_DESC ListActivityRequest_Order = 0
)

// Enum value maps for ListActivityRequest_Order.
var (
	ListActivityRequest_Order_name = map[int32]string{
		0: "BY_CREATION_TIME_DESC",
	}
	ListActivityRequest_Order_value = map[string]int32{
		"BY_CREATION_TIME_DESC": 0,
	}
)

func (x ListActivityRequest_Order) Enum() *ListActivityRequest_Order {
	p := new(ListActivityRequest_Order)
	*p = x
	return p
}

func (x ListActivityRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListActivityRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[12].Descriptor()
}

func (ListActivityRequest_Order) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[12]
}

func (x ListActivityRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListActivityRequest_Order.Descriptor instead.
func (ListActivityRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{22, 0}
}

type ListActivityRequest_Direction int32

const (
	ListActivityRequest_NEXT     ListActivityRequest_Direction = 0
	ListActivityRequest_PREVIOUS ListActivityRequest_Direction = 1
)

// Enum value maps for ListActivityRequest_Direction.
var (
	ListActivityRequest_Direction_name = map[int32]string{
		0: "NEXT",
		1: "PREVIOUS",
	}
	ListActivityRequest_Direction_value = map[string]int32{
		"NEXT":     0,
		"PREVIOUS": 1,
	}
)

func (x ListActivityRequest_Direction) Enum() *ListActivityRequest_Direction {
	p := new(ListActivityRequest_Direction)
	*p = x
	return p
}

func (x ListActivityRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListActivityRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[13].Descriptor()
}

func (ListActivityRequest_Direction) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[13]
}

func (x ListActivityRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListActivityRequest_Direction.Descriptor instead.
func (ListActivityRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{22, 1}
}

type RunNowRequest_Type int32

const (
	RunNowRequest_PIPELINE RunNowRequest_Type = 0
	RunNowRequest_BLOCK    RunNowRequest_Type = 1
	RunNowRequest_JOB      RunNowRequest_Type = 2
)

// Enum value maps for RunNowRequest_Type.
var (
	RunNowRequest_Type_name = map[int32]string{
		0: "PIPELINE",
		1: "BLOCK",
		2: "JOB",
	}
	RunNowRequest_Type_value = map[string]int32{
		"PIPELINE": 0,
		"BLOCK":    1,
		"JOB":      2,
	}
)

func (x RunNowRequest_Type) Enum() *RunNowRequest_Type {
	p := new(RunNowRequest_Type)
	*p = x
	return p
}

func (x RunNowRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunNowRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[14].Descriptor()
}

func (RunNowRequest_Type) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[14]
}

func (x RunNowRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunNowRequest_Type.Descriptor instead.
func (RunNowRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{29, 0}
}

// Codes serve to determin result of Request processing and wether to interpret the
// other fields in Response
//
//   - OK             = Request was processed sucessfully and other fields in response are valid
//   - BAD_PARAM      = Request processing failed due to bad params in request.
//     Other fields in response should be disregarded.
//   - LIMIT_EXCEEDED = Request is rejected because some resource(s) exceeded allowed limit(s)
//     Other fields in response should be disregarded
//   - REFUSED        = Request is refused and reason is given in message field.
//     Other fields in response should be disregarded.
type ResponseStatus_ResponseCode int32

const (
	ResponseStatus_OK             ResponseStatus_ResponseCode = 0
	ResponseStatus_BAD_PARAM      ResponseStatus_ResponseCode = 1
	ResponseStatus_LIMIT_EXCEEDED ResponseStatus_ResponseCode = 2
	ResponseStatus_REFUSED        ResponseStatus_ResponseCode = 3
)

// Enum value maps for ResponseStatus_ResponseCode.
var (
	ResponseStatus_ResponseCode_name = map[int32]string{
		0: "OK",
		1: "BAD_PARAM",
		2: "LIMIT_EXCEEDED",
		3: "REFUSED",
	}
	ResponseStatus_ResponseCode_value = map[string]int32{
		"OK":             0,
		"BAD_PARAM":      1,
		"LIMIT_EXCEEDED": 2,
		"REFUSED":        3,
	}
)

func (x ResponseStatus_ResponseCode) Enum() *ResponseStatus_ResponseCode {
	p := new(ResponseStatus_ResponseCode)
	*p = x
	return p
}

func (x ResponseStatus_ResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus_ResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[15].Descriptor()
}

func (ResponseStatus_ResponseCode) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[15]
}

func (x ResponseStatus_ResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus_ResponseCode.Descriptor instead.
func (ResponseStatus_ResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{44, 0}
}

// States that describe after pipeline execution
//
// Normal after pipeline state transition looks like:
//
//	WAITING (for pipeline to finish) -> PENDING -> RUNNING -> DONE
type AfterPipeline_State int32

const (
	AfterPipeline_WAITING AfterPipeline_State = 0
	AfterPipeline_PENDING AfterPipeline_State = 1
	AfterPipeline_RUNNING AfterPipeline_State = 2
	AfterPipeline_DONE    AfterPipeline_State = 3
)

// Enum value maps for AfterPipeline_State.
var (
	AfterPipeline_State_name = map[int32]string{
		0: "WAITING",
		1: "PENDING",
		2: "RUNNING",
		3: "DONE",
	}
	AfterPipeline_State_value = map[string]int32{
		"WAITING": 0,
		"PENDING": 1,
		"RUNNING": 2,
		"DONE":    3,
	}
)

func (x AfterPipeline_State) Enum() *AfterPipeline_State {
	p := new(AfterPipeline_State)
	*p = x
	return p
}

func (x AfterPipeline_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AfterPipeline_State) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[16].Descriptor()
}

func (AfterPipeline_State) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[16]
}

func (x AfterPipeline_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AfterPipeline_State.Descriptor instead.
func (AfterPipeline_State) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{47, 0}
}

type AfterPipeline_Result int32

const (
	AfterPipeline_PASSED  AfterPipeline_Result = 0
	AfterPipeline_STOPPED AfterPipeline_Result = 1
	AfterPipeline_FAILED  AfterPipeline_Result = 2
)

// Enum value maps for AfterPipeline_Result.
var (
	AfterPipeline_Result_name = map[int32]string{
		0: "PASSED",
		1: "STOPPED",
		2: "FAILED",
	}
	AfterPipeline_Result_value = map[string]int32{
		"PASSED":  0,
		"STOPPED": 1,
		"FAILED":  2,
	}
)

func (x AfterPipeline_Result) Enum() *AfterPipeline_Result {
	p := new(AfterPipeline_Result)
	*p = x
	return p
}

func (x AfterPipeline_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AfterPipeline_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[17].Descriptor()
}

func (AfterPipeline_Result) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[17]
}

func (x AfterPipeline_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AfterPipeline_Result.Descriptor instead.
func (AfterPipeline_Result) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{47, 1}
}

// Reasons for result different from PASSED
//
// FAILED:
//   - TEST - one or more of user tests failed
//   - STUCK  - After pipeline was stuck for some internal reason and then aborted
type AfterPipeline_ResultReason int32

const (
	AfterPipeline_TEST  AfterPipeline_ResultReason = 0
	AfterPipeline_STUCK AfterPipeline_ResultReason = 1
)

// Enum value maps for AfterPipeline_ResultReason.
var (
	AfterPipeline_ResultReason_name = map[int32]string{
		0: "TEST",
		1: "STUCK",
	}
	AfterPipeline_ResultReason_value = map[string]int32{
		"TEST":  0,
		"STUCK": 1,
	}
)

func (x AfterPipeline_ResultReason) Enum() *AfterPipeline_ResultReason {
	p := new(AfterPipeline_ResultReason)
	*p = x
	return p
}

func (x AfterPipeline_ResultReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AfterPipeline_ResultReason) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_pipeline_proto_enumTypes[18].Descriptor()
}

func (AfterPipeline_ResultReason) Type() protoreflect.EnumType {
	return &file_plumber_pipeline_proto_enumTypes[18]
}

func (x AfterPipeline_ResultReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AfterPipeline_ResultReason.Descriptor instead.
func (AfterPipeline_ResultReason) EnumDescriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{47, 2}
}

// Schedule call request
//
// Arguments:
//   - service          = [required] Repo host provider (GitHub etc.)
//   - repo             = [required if service == GIT_HUB] Data about repository
//   - auth             = [required if service == GIT_HUB]
//     Data used for authentication when accessing repo
//   - project_id       = [required] Id of project on Semaphore
//   - branch_id        = [required] UUID of project's branch on Semaphore
//   - hook_id          = [required] Originally generated by repo-host.
//     Ties the schedule-request to repo post-commit hook.
//     Plumber has to pass it on, otherwise not used.
//   - request_token    = [required] unique string, see Idempotency
//   - snapshot_id      = [required if service == SANPSHOT] Snapshot id
//   - definition_file  = [optional] Full path to file containing pipeline definition.
//
// Preconditions:
// - service, repo and auth fields have valid values
// - hook_id value is previously generated by repo-host
// - request_token has to be unique for every pipeline execution, see Idempotency
//
// Postconditions:
//   - ResponseCode = OK => Pipeline with request_token is scheduled or
//     was previously scheduled.
//     ppl_id is returned.
//   - otherwise         => Pipeline with request_token is NOT scheduled.
//     Error is returned.
//
// Idempotency:
//   - When schedule request is received, request_token is checked first.
//     If pipeline with the same request_token is already scheduled:
//   - OK and previously generated ppl_id are returned,
//     without scheduling new pipeline.
//   - Other parameters are not checked; they are assumed to be the same.
type ScheduleRequest struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	Service        ScheduleRequest_ServiceType `protobuf:"varint,2,opt,name=service,proto3,enum=InternalApi.Plumber.ScheduleRequest_ServiceType" json:"service,omitempty"`
	Repo           *ScheduleRequest_Repo       `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	Auth           *ScheduleRequest_Auth       `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	ProjectId      string                      `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BranchId       string                      `protobuf:"bytes,7,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	HookId         string                      `protobuf:"bytes,8,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	RequestToken   string                      `protobuf:"bytes,9,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
	SnapshotId     string                      `protobuf:"bytes,10,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	DefinitionFile string                      `protobuf:"bytes,11,opt,name=definition_file,json=definitionFile,proto3" json:"definition_file,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScheduleRequest) Reset() {
	*x = ScheduleRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest) ProtoMessage() {}

func (x *ScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest.ProtoReflect.Descriptor instead.
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleRequest) GetService() ScheduleRequest_ServiceType {
	if x != nil {
		return x.Service
	}
	return ScheduleRequest_GIT_HUB
}

func (x *ScheduleRequest) GetRepo() *ScheduleRequest_Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *ScheduleRequest) GetAuth() *ScheduleRequest_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ScheduleRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ScheduleRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *ScheduleRequest) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *ScheduleRequest) GetRequestToken() string {
	if x != nil {
		return x.RequestToken
	}
	return ""
}

func (x *ScheduleRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *ScheduleRequest) GetDefinitionFile() string {
	if x != nil {
		return x.DefinitionFile
	}
	return ""
}

// Schedule call response
//
// Response:
//   - response_status  = [required] contains ResponseCode:
//     OK             = Pipeline is scheduled.
//     Pipeline has to be available for Describe call.
//     BAD_PARAM      = Pipeline request is rejected because of
//     malformed request.
//     LIMIT_EXCEEDED = Schedule request is rejected because some resource(s) exceeded allowed limit(s)
//   - ppl_id           = [required] id of newly scheduled pipeline
type ScheduleResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	PplId          string                 `protobuf:"bytes,2,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *ScheduleResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *ScheduleResponse) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

// Describe call request
//
// Synchronous operation.
// Returns status of the pipeline.
//
// Arguments:
// - ppl_id   = [required] Pipeline to describe.
// - detailed = [optional] Return block details? Default is false.
//
// Preconditions:
// - Pipeline with ppl_id was previously scheduled.
//
// Postconditions:
//
// Idempotency:
type DescribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PplId         string                 `protobuf:"bytes,1,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	Detailed      bool                   `protobuf:"varint,2,opt,name=detailed,proto3" json:"detailed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *DescribeRequest) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

func (x *DescribeRequest) GetDetailed() bool {
	if x != nil {
		return x.Detailed
	}
	return false
}

// Describe call response
//
// Response:
//   - pipeline         = [required] Pipeline's description.
//   - response_status  = [required] contains ResponseCode:
//     OK        = Response contains valid data in other fields
//     BAD_PARAM = Pipeline with given ppl_id was not found.
//   - blocks           = [required if detailed == true; list] blocks description
type DescribeResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	Pipeline       *Pipeline              `protobuf:"bytes,3,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Blocks         []*Block               `protobuf:"bytes,4,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DescribeResponse) Reset() {
	*x = DescribeResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResponse) ProtoMessage() {}

func (x *DescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResponse.ProtoReflect.Descriptor instead.
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *DescribeResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *DescribeResponse) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// Block description
//
// Fields:
//   - block_id      = [required] unique block identifier
//   - name          = [required] Block name
//   - build_req_id  = [required if build is scheduled] build request identifier
//   - state         = [required] Current state of given block
//   - result        = [optional] Block execution result, only valid if state = DONE
//   - result_reason = [optional] Reason for result of blocks's execution different from PASSED
//     It can be:
//   - TEST, MALFORMED or STUCK - when result is FAILED
//   - USER, INTERNAL, STRATEGY, FAST_FAILING or DELETED - when result is STOPPED or CANCELED
//   - error_description = [optional] Stores error description when block is MALFORMED
//   - jobs          = [list, if there are any jobs] Jobs belonging to the block
type Block struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BlockId          string                 `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BuildReqId       string                 `protobuf:"bytes,3,opt,name=build_req_id,json=buildReqId,proto3" json:"build_req_id,omitempty"`
	State            Block_State            `protobuf:"varint,4,opt,name=state,proto3,enum=InternalApi.Plumber.Block_State" json:"state,omitempty"`
	Result           Block_Result           `protobuf:"varint,5,opt,name=result,proto3,enum=InternalApi.Plumber.Block_Result" json:"result,omitempty"`
	ResultReason     Block_ResultReason     `protobuf:"varint,6,opt,name=result_reason,json=resultReason,proto3,enum=InternalApi.Plumber.Block_ResultReason" json:"result_reason,omitempty"`
	ErrorDescription string                 `protobuf:"bytes,7,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	Jobs             []*Block_Job           `protobuf:"bytes,8,rep,name=jobs,proto3" json:"jobs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_plumber_pipeline_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *Block) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *Block) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Block) GetBuildReqId() string {
	if x != nil {
		return x.BuildReqId
	}
	return ""
}

func (x *Block) GetState() Block_State {
	if x != nil {
		return x.State
	}
	return Block_WAITING
}

func (x *Block) GetResult() Block_Result {
	if x != nil {
		return x.Result
	}
	return Block_PASSED
}

func (x *Block) GetResultReason() Block_ResultReason {
	if x != nil {
		return x.ResultReason
	}
	return Block_TEST
}

func (x *Block) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *Block) GetJobs() []*Block_Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

// DescribeMany call request
//
// Synchronous operation.
// Returns status of the pipelines.
//
// Arguments:
// - ppl_ids   = [required] Pipelines to describe.
//
// Preconditions:
// - Pipelines with ppl_ids was previously scheduled.
//
// Postconditions:
//
// Idempotency:
type DescribeManyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PplIds        []string               `protobuf:"bytes,1,rep,name=ppl_ids,json=pplIds,proto3" json:"ppl_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeManyRequest) Reset() {
	*x = DescribeManyRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeManyRequest) ProtoMessage() {}

func (x *DescribeManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeManyRequest.ProtoReflect.Descriptor instead.
func (*DescribeManyRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *DescribeManyRequest) GetPplIds() []string {
	if x != nil {
		return x.PplIds
	}
	return nil
}

// DescribeMany call response
//
// Response:
//   - pipelines        = [required] Pipeline's description.
//   - response_status  = [required] contains ResponseCode:
//     OK        = Response contains valid data in other fields
//     BAD_PARAM = Pipeline with given ppl_id was not found.
type DescribeManyResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	Pipelines      []*Pipeline            `protobuf:"bytes,2,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DescribeManyResponse) Reset() {
	*x = DescribeManyResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeManyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeManyResponse) ProtoMessage() {}

func (x *DescribeManyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeManyResponse.ProtoReflect.Descriptor instead.
func (*DescribeManyResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeManyResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *DescribeManyResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

// DescribeTopology call request
//
// Synchronous operation.
// Returns the topology of the pipeline.
//
// Arguments:
// - ppl_id = [required] Pipeline which topology to describe.
//
// Preconditions:
// - Pipeline with ppl_id was previously scheduled.
//
// Postconditions:
//
// Idempotency:
type DescribeTopologyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PplId         string                 `protobuf:"bytes,1,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeTopologyRequest) Reset() {
	*x = DescribeTopologyRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeTopologyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopologyRequest) ProtoMessage() {}

func (x *DescribeTopologyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopologyRequest.ProtoReflect.Descriptor instead.
func (*DescribeTopologyRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeTopologyRequest) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

// DescribeTopology call response
//
// Response:
//   - blocks           = [required] Block topologies
//   - status           = [required] contains ResponseCode:
//     OK        = Response contains valid data in other fields
//     BAD_PARAM = Pipeline with given ppl_id was not found.
type DescribeTopologyResponse struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Status        *ResponseStatus                         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Blocks        []*DescribeTopologyResponse_Block       `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	AfterPipeline *DescribeTopologyResponse_AfterPipeline `protobuf:"bytes,3,opt,name=after_pipeline,json=afterPipeline,proto3" json:"after_pipeline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeTopologyResponse) Reset() {
	*x = DescribeTopologyResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeTopologyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopologyResponse) ProtoMessage() {}

func (x *DescribeTopologyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopologyResponse.ProtoReflect.Descriptor instead.
func (*DescribeTopologyResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeTopologyResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DescribeTopologyResponse) GetBlocks() []*DescribeTopologyResponse_Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *DescribeTopologyResponse) GetAfterPipeline() *DescribeTopologyResponse_AfterPipeline {
	if x != nil {
		return x.AfterPipeline
	}
	return nil
}

// Terminate call request
//
// When this request is received, pipeline service terminates the pipeline as
// soon as possible on the best effort basis.
//
// Arguments:
// - ppl_id  = [required] Pipeline to terminate.
// - requester_id = [required] The user who authored termination.
//
// Preconditions:
// - Pipeline with ppl_id was previously scheduled.
//
// Postconditions:
// Pipeline is terminated if it is not already in terminal state.
// If the pipeline is already in terminal state, request is accepted and ignored.
//
// Idempotency:
// Response for existing ppl_id is always OK.
type TerminateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PplId         string                 `protobuf:"bytes,1,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	RequesterId   string                 `protobuf:"bytes,2,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminateRequest) Reset() {
	*x = TerminateRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateRequest) ProtoMessage() {}

func (x *TerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateRequest.ProtoReflect.Descriptor instead.
func (*TerminateRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{9}
}

func (x *TerminateRequest) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

func (x *TerminateRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

// Terminate call response
//
// Response:
//   - response_status  = [required] contains ResponseCode:
//     OK        = Pipeline exists. Will be terminated if possible.
//     BAD_PARAM = Pipeline with given ppl_id was not found.
type TerminateResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TerminateResponse) Reset() {
	*x = TerminateResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateResponse) ProtoMessage() {}

func (x *TerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateResponse.ProtoReflect.Descriptor instead.
func (*TerminateResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{10}
}

func (x *TerminateResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

// ListQueues call request
//
// Synchronous operation.
// Returns paginated details of all queues for given project or organization.
//
// Arguments:
//   - page            = [optional, default =  1] Serial number of wanted results page
//   - page_size       = [optional, default = 30] Number of queue per page
//   - project_id      = [optional if organization_id is given] Id of project which
//     queues should be returned.
//   - organization_id = [optional if project_id is given] Id of organization for
//     which queues should be returned
//   - queue_types     = [required] The types of queues which should be returned
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type ListQueuesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Page           int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ProjectId      string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId string                 `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	QueueTypes     []QueueType            `protobuf:"varint,5,rep,packed,name=queue_types,json=queueTypes,proto3,enum=InternalApi.Plumber.QueueType" json:"queue_types,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListQueuesRequest) Reset() {
	*x = ListQueuesRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQueuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueuesRequest) ProtoMessage() {}

func (x *ListQueuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueuesRequest.ProtoReflect.Descriptor instead.
func (*ListQueuesRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{11}
}

func (x *ListQueuesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListQueuesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListQueuesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListQueuesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListQueuesRequest) GetQueueTypes() []QueueType {
	if x != nil {
		return x.QueueTypes
	}
	return nil
}

// ListQueues call response
//
// Response:
//   - response_status  = [required] contains ResponseCode:
//     OK        = Response contains valid data in other fields
//     BAD_PARAM = One of the params from ListQueuesRequest is invalid
//   - labels           = [required] list of queues
//   - page_number      = [required] Serial number of returned page with queue search results
//   - page_size        = [required] Number of queues per page
//   - total_entries    = [required] Total number of queues that are result of search
//   - total_pages      = [required] Total number of pages with queue search results
type ListQueuesResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	Queues         []*Queue               `protobuf:"bytes,2,rep,name=queues,proto3" json:"queues,omitempty"`
	PageNumber     int32                  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize       int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalEntries   int32                  `protobuf:"varint,5,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	TotalPages     int32                  `protobuf:"varint,6,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListQueuesResponse) Reset() {
	*x = ListQueuesResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQueuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueuesResponse) ProtoMessage() {}

func (x *ListQueuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueuesResponse.ProtoReflect.Descriptor instead.
func (*ListQueuesResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{12}
}

func (x *ListQueuesResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *ListQueuesResponse) GetQueues() []*Queue {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *ListQueuesResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListQueuesResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListQueuesResponse) GetTotalEntries() int32 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *ListQueuesResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// ListGrouped call request
//
// Synchronous operation.
// Returns paginated details of one latest pipeline for each queue that matches
// the given search parameters.
//
// Arguments:
//   - page             = [optional, default =  1] Serial number of wanted results page
//   - page_size        = [optional, default = 30] Number of pipelines per page
//   - project_id       = [optional if organization_id is given] Id of project for
//     which latest pipelines from queues should be returned
//   - organization_id  = [optional if project_id is given] Id of organization for
//     which latest pipelines from queues should be returned
//   - queue_types      = [required] The types of queues for which latest pipelines
//     should be returned
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type ListGroupedRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Page           int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ProjectId      string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId string                 `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	QueueType      []QueueType            `protobuf:"varint,5,rep,packed,name=queue_type,json=queueType,proto3,enum=InternalApi.Plumber.QueueType" json:"queue_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListGroupedRequest) Reset() {
	*x = ListGroupedRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupedRequest) ProtoMessage() {}

func (x *ListGroupedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupedRequest.ProtoReflect.Descriptor instead.
func (*ListGroupedRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{13}
}

func (x *ListGroupedRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListGroupedRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGroupedRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListGroupedRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListGroupedRequest) GetQueueType() []QueueType {
	if x != nil {
		return x.QueueType
	}
	return nil
}

// ListGrouped call response
//
// Response:
//   - pipelines        = [required] Pipelines which match search params in ListGroupedRequest
//   - response_status  = [required] contains ResponseCode:
//     OK        = Response contains valid data in other fields
//     BAD_PARAM = One of the params from ListGroupedRequest is invalid
//   - page_number      = [required] Serial number of returned page with pipeline search results
//   - page_size        = [required] Number of pipelines per page
//   - total_entries    = [required] Total number of pipelines for given project and branch
//   - total_pages      = [required] Total number of pages with pipeline search results
type ListGroupedResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	Pipelines      []*Pipeline            `protobuf:"bytes,2,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	PageNumber     int32                  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize       int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalEntries   int32                  `protobuf:"varint,5,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	TotalPages     int32                  `protobuf:"varint,6,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListGroupedResponse) Reset() {
	*x = ListGroupedResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupedResponse) ProtoMessage() {}

func (x *ListGroupedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupedResponse.ProtoReflect.Descriptor instead.
func (*ListGroupedResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{14}
}

func (x *ListGroupedResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *ListGroupedResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListGroupedResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListGroupedResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGroupedResponse) GetTotalEntries() int32 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *ListGroupedResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// ListKeyset call request
//
// Synchronous operation.
// Returns paginated details of all pipelines for given project or workflow which
// match the other search parameters if they are given.
//
// Arguments:
//   - page_size            = [required] Number of pipelines per page of List call result.
//   - page_token           = [required] Starting point for listing, tokens for next and previous
//     page are returned in response. If you are fetching first page
//     leave it empty and set direction to NEXT
//   - order                = [required] Sorting order direction
//   - direction            = [required] Listing direction. Use NEXT with value of 'next_page_token'
//     from ListKeyset response as 'page_token' to fetch next page
//     of results, or use PREVIOUS with value of 'previous_page_token'
//     as 'page_token' to fetch the previous page.
//   - project_id           = [required, optional if wf_id is given] Id of project which
//     pipelines should be returned.
//   - yml_file_path        = [optional] path within GitHub repository to yml file from
//     which pipeline originated
//   - wf_id                = [required, optional if project_id is given] Workflow for which
//     pipelines should be returned.
//   - created_before       = [optional] Return only pipelines created before this timestamp
//   - created_after        = [optional] Return only pipelines created after this timestamp
//   - done_before          = [optional] Return only pipelines which finished before this timestamp
//   - done_after           = [optional] Return only pipelines which finished after this timestamp
//   - label                = [optional] Return only pipeline with given label
//     (label is branch/tag name, PR number, snapshot generated label etc.)
//   - git_ref_types        = [optional] Return only pipelines which originated from one of given git refs
//   - queue_id             = [optional] Return only pipelines from queue with given id
//   - pr_head_branch       = [optional] Return only pipelines with given PR head branch
//   - pr_target_branch     = [optional] Return only pipelines with given PR target branch
//
// Preconditions:
//
// Postconditions:
//   - gRPC status: OK                 = Response contains valid data in other fields.
//   - gRPC status: INVALID_ARGUMENT   = Pipelines list request is rejected because
//     of malformed request.
//   - gRPC status: RESOURCE_EXHAUSTED = Too many requests, server is overloaded,
//     try again later.
//
// Idempotency:
type ListKeysetRequest struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	PageSize       int32                       `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken      string                      `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Order          ListKeysetRequest_Order     `protobuf:"varint,3,opt,name=order,proto3,enum=InternalApi.Plumber.ListKeysetRequest_Order" json:"order,omitempty"`
	Direction      ListKeysetRequest_Direction `protobuf:"varint,4,opt,name=direction,proto3,enum=InternalApi.Plumber.ListKeysetRequest_Direction" json:"direction,omitempty"`
	ProjectId      string                      `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	YmlFilePath    string                      `protobuf:"bytes,6,opt,name=yml_file_path,json=ymlFilePath,proto3" json:"yml_file_path,omitempty"`
	WfId           string                      `protobuf:"bytes,7,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	CreatedBefore  *timestamp.Timestamp        `protobuf:"bytes,8,opt,name=created_before,json=createdBefore,proto3" json:"created_before,omitempty"`
	CreatedAfter   *timestamp.Timestamp        `protobuf:"bytes,9,opt,name=created_after,json=createdAfter,proto3" json:"created_after,omitempty"`
	DoneBefore     *timestamp.Timestamp        `protobuf:"bytes,10,opt,name=done_before,json=doneBefore,proto3" json:"done_before,omitempty"`
	DoneAfter      *timestamp.Timestamp        `protobuf:"bytes,11,opt,name=done_after,json=doneAfter,proto3" json:"done_after,omitempty"`
	Label          string                      `protobuf:"bytes,12,opt,name=label,proto3" json:"label,omitempty"`
	GitRefTypes    []GitRefType                `protobuf:"varint,13,rep,packed,name=git_ref_types,json=gitRefTypes,proto3,enum=InternalApi.Plumber.GitRefType" json:"git_ref_types,omitempty"`
	QueueId        string                      `protobuf:"bytes,14,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	PrHeadBranch   string                      `protobuf:"bytes,15,opt,name=pr_head_branch,json=prHeadBranch,proto3" json:"pr_head_branch,omitempty"`
	PrTargetBranch string                      `protobuf:"bytes,16,opt,name=pr_target_branch,json=prTargetBranch,proto3" json:"pr_target_branch,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListKeysetRequest) Reset() {
	*x = ListKeysetRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKeysetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysetRequest) ProtoMessage() {}

func (x *ListKeysetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysetRequest.ProtoReflect.Descriptor instead.
func (*ListKeysetRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{15}
}

func (x *ListKeysetRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKeysetRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListKeysetRequest) GetOrder() ListKeysetRequest_Order {
	if x != nil {
		return x.Order
	}
	return ListKeysetRequest_BY_CREATION_TIME_DESC
}

func (x *ListKeysetRequest) GetDirection() ListKeysetRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return ListKeysetRequest_NEXT
}

func (x *ListKeysetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListKeysetRequest) GetYmlFilePath() string {
	if x != nil {
		return x.YmlFilePath
	}
	return ""
}

func (x *ListKeysetRequest) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *ListKeysetRequest) GetCreatedBefore() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedBefore
	}
	return nil
}

func (x *ListKeysetRequest) GetCreatedAfter() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAfter
	}
	return nil
}

func (x *ListKeysetRequest) GetDoneBefore() *timestamp.Timestamp {
	if x != nil {
		return x.DoneBefore
	}
	return nil
}

func (x *ListKeysetRequest) GetDoneAfter() *timestamp.Timestamp {
	if x != nil {
		return x.DoneAfter
	}
	return nil
}

func (x *ListKeysetRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ListKeysetRequest) GetGitRefTypes() []GitRefType {
	if x != nil {
		return x.GitRefTypes
	}
	return nil
}

func (x *ListKeysetRequest) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *ListKeysetRequest) GetPrHeadBranch() string {
	if x != nil {
		return x.PrHeadBranch
	}
	return ""
}

func (x *ListKeysetRequest) GetPrTargetBranch() string {
	if x != nil {
		return x.PrTargetBranch
	}
	return ""
}

// ListKeyset call response
//
// Response:
//   - pipelines           = [required] Pipelines which match search params in request
//   - next_page_token     = [required] Token which should be passed in ListKeysetRequest
//     to fetch the next page of pipelines
//   - previous_page_token = [required] Token which should be passed in ListKeysetRequest
//     to fetch the previous page of pipelines
type ListKeysetResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Pipelines         []*Pipeline            `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	NextPageToken     string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PreviousPageToken string                 `protobuf:"bytes,3,opt,name=previous_page_token,json=previousPageToken,proto3" json:"previous_page_token,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListKeysetResponse) Reset() {
	*x = ListKeysetResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKeysetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysetResponse) ProtoMessage() {}

func (x *ListKeysetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysetResponse.ProtoReflect.Descriptor instead.
func (*ListKeysetResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{16}
}

func (x *ListKeysetResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListKeysetResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListKeysetResponse) GetPreviousPageToken() string {
	if x != nil {
		return x.PreviousPageToken
	}
	return ""
}

// List call request
//
// Synchronous operation.
// Returns paginated ids of all pipelines for given project or workflow which match
// other search parameters if they are given.
//
// Arguments:
//   - project_id           = [required, optional if wf_id is given] Id of project which
//     pipelines should be returned.
//     # DEPRECATED - instead use: label + git_ref_types = [BRANCH]
//   - branch_name          = [optional] Name of branch which pipelines should be returned.
//
//   - page                 = [required] Serial number of wanted page with List call result.
//   - page_size            = [required] Number of pipelines per page of List call result.
//   - yml_file_path        = [optional] path within GitHub repository to yml file from
//     which pipeline originated
//   - wf_id                = [required, optional if project_id is given] Workflow for which
//     pipelines should be returned.
//   - created_before       = [optional] Return only pipelines created before this timestamp
//   - created_after        = [optional] Return only pipelines created after this timestamp
//   - done_before          = [optional] Return only pipelines which finished before this timestamp
//   - done_after           = [optional] Return only pipelines which finished after this timestamp
//   - label                = [optional] Return only pipeline with given label
//     (label is branch/tag name, PR number, snapshot generated label etc.)
//   - git_ref_types        = [optional] Return only pipelines which originated from one of given git refs
//   - queue_id             = [optional] Return only pipelines from queue with given id
//   - pr_head_branch       = [optional] Return only pipelines with given PR head branch
//   - pr_target_branch     = [optional] Return only pipelines with given PR target branch
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type ListRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProjectId      string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BranchName     string                 `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"` // DEPRECATED
	Page           int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	YmlFilePath    string                 `protobuf:"bytes,5,opt,name=yml_file_path,json=ymlFilePath,proto3" json:"yml_file_path,omitempty"`
	WfId           string                 `protobuf:"bytes,6,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	CreatedBefore  *timestamp.Timestamp   `protobuf:"bytes,7,opt,name=created_before,json=createdBefore,proto3" json:"created_before,omitempty"`
	CreatedAfter   *timestamp.Timestamp   `protobuf:"bytes,8,opt,name=created_after,json=createdAfter,proto3" json:"created_after,omitempty"`
	DoneBefore     *timestamp.Timestamp   `protobuf:"bytes,9,opt,name=done_before,json=doneBefore,proto3" json:"done_before,omitempty"`
	DoneAfter      *timestamp.Timestamp   `protobuf:"bytes,10,opt,name=done_after,json=doneAfter,proto3" json:"done_after,omitempty"`
	Label          string                 `protobuf:"bytes,11,opt,name=label,proto3" json:"label,omitempty"`
	GitRefTypes    []GitRefType           `protobuf:"varint,12,rep,packed,name=git_ref_types,json=gitRefTypes,proto3,enum=InternalApi.Plumber.GitRefType" json:"git_ref_types,omitempty"`
	QueueId        string                 `protobuf:"bytes,13,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	PrHeadBranch   string                 `protobuf:"bytes,14,opt,name=pr_head_branch,json=prHeadBranch,proto3" json:"pr_head_branch,omitempty"`
	PrTargetBranch string                 `protobuf:"bytes,15,opt,name=pr_target_branch,json=prTargetBranch,proto3" json:"pr_target_branch,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{17}
}

func (x *ListRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRequest) GetYmlFilePath() string {
	if x != nil {
		return x.YmlFilePath
	}
	return ""
}

func (x *ListRequest) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *ListRequest) GetCreatedBefore() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedBefore
	}
	return nil
}

func (x *ListRequest) GetCreatedAfter() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAfter
	}
	return nil
}

func (x *ListRequest) GetDoneBefore() *timestamp.Timestamp {
	if x != nil {
		return x.DoneBefore
	}
	return nil
}

func (x *ListRequest) GetDoneAfter() *timestamp.Timestamp {
	if x != nil {
		return x.DoneAfter
	}
	return nil
}

func (x *ListRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ListRequest) GetGitRefTypes() []GitRefType {
	if x != nil {
		return x.GitRefTypes
	}
	return nil
}

func (x *ListRequest) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *ListRequest) GetPrHeadBranch() string {
	if x != nil {
		return x.PrHeadBranch
	}
	return ""
}

func (x *ListRequest) GetPrTargetBranch() string {
	if x != nil {
		return x.PrTargetBranch
	}
	return ""
}

// List call response
//
// Response:
//   - pipelines        = [required] Pipelines which match search params in ListRequest
//   - response_status  = [required] contains ResponseCode:
//     OK        = Response contains valid data in other fields
//     BAD_PARAM = One of the params from ListRequest is invalid
//   - page_number      = [required] Serial number of returned page with pipeline search results
//   - page_size        = [required] Number of pipelines per page
//   - total_entries    = [required] Total number of pipelines for given project and branch
//   - total_pages      = [required] Total number of pages with pipeline search results
type ListResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	Pipelines      []*Pipeline            `protobuf:"bytes,2,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	PageNumber     int32                  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize       int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalEntries   int32                  `protobuf:"varint,5,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	TotalPages     int32                  `protobuf:"varint,6,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{18}
}

func (x *ListResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *ListResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListResponse) GetTotalEntries() int32 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *ListResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// Queue entity details - each pipeline belongs to exactly one queue
//
//   - queue_id        = [required] Unique Queue identifier
//   - name            = [required] Name of the queue
//   - scope           = [required] Queue scope - either 'project' or 'organization'
//   - project_id      = [valid if scope = 'project'] Id of project to which given
//     queue belongs
//   - organization_id = [required] Id of organization to which given queue belongs
//   - type            = [required] The type of the given queue
type Queue struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	QueueId        string                 `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Scope          string                 `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	ProjectId      string                 `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId string                 `protobuf:"bytes,5,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Type           QueueType              `protobuf:"varint,6,opt,name=type,proto3,enum=InternalApi.Plumber.QueueType" json:"type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Queue) Reset() {
	*x = Queue{}
	mi := &file_plumber_pipeline_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue) ProtoMessage() {}

func (x *Queue) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue.ProtoReflect.Descriptor instead.
func (*Queue) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{19}
}

func (x *Queue) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *Queue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Queue) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Queue) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Queue) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Queue) GetType() QueueType {
	if x != nil {
		return x.Type
	}
	return QueueType_IMPLICIT
}

// Pipeline entity details
//
//   - ppl_id            = [required] Unique Pipeline identifier
//
//   - name              = [required] User specific (or auto-generated) name for given pipeline
//
//   - project_id        = [required] Id of project to which given pipeline belongs
//
//   - branch_name       = [required] Name of git branch for which pipeline was scheduled
//
//   - commit_sha        = [required] Git commit sha for which pipeline was scheduled
//
//   - created_at        = [required] Timestamp when pipeline schedule request was recorded
//
//   - pending_at        = [required] Timestamp when pipeline transitioned to pending state
//
//   - queuing_at        = [required] Timestamp when pipeline transitioned to queuing state
//
//   - running_at        = [required] Timestamp when pipeline transitioned to running state
//
//   - stopping_at       = [required] Timestamp when pipeline transitioned to stopping state
//
//   - done_at           = [required] Timestamp when pipeline execution was finished
//
//   - state             = [required] Current state of given pipeline
//
//   - result            = [optional] Pipeline execution result, only valid if state = DONE
//
//   - result_reason     = [optional] Reason for result of pipeline's execution different from PASSED
//     It can be:
//
//   - TEST, MALFORMED or STUCK - when result is FAILED
//
//   - USER, INTERNAL, STRATEGY, FAST_FAILING or DELETED - when result is STOPPED or CANCELED
//
//   - terminate_request = [required] It is empty string if there is no need for termination.
//     Otherwise, it contains desired termination action (stop or cancel)
//
//   - hook_id           = [required] Received in schedule request
//
//   - branch_id         = [required] Received in schedule request
//
//   - error_description = [optional] Stores error description when pipeline is MALFORMED
//
//   - switch_id         = [optional] Id from Gofer service of the switch connected to this pipeline
//     (only valid if switch was defined for this pipeline in yaml definition)
//
//   - working_directory = [required] Full path within git repo to folder which is set as a working dir for this pipeline
//
//   - yaml_file_name    = [required] Name of yaml file within git repo which contains definition of this pipeline
//
//   - terminated_by     = [optional] Id of user which requested termination (only valid if termination was requested)
//
//   - wf_id             = [required] Workflow to which given pipeline belongs
//
//   - snapshot_id       = [optional] Id of snapshot if the snapshot service was called
//
//   - queue             = [required] Details of queue to which pipeline belongs
//
//   - promotion_of      = [optional] Id of the pipeline that triggered the promotion to this pipeline.
//
//     It can be:
//
//   - Empty (""), if the pipeline is the first one in the chain.
//
//   - Non-empty, if the pipeline was a promotion of another pipeline.
//
//     Example:
//
//     If we have a chain of pipelines, like in the bellow diagram:
//
//     p1 -> p2 -> [p3] -> p4
//
//     When we describe pipeline p3, the value of the p3.promotion_of will be p2.
//
// - partial_rerun_of  = [optional] Id of the pipeline from which this pipeline was partially rerun.
//
//	It can be:
//	   - Empty (""), if the pipeline is the original (first) run.
//	   - Non-empty, if the pipeline was a partial rerun of a previous pipeline.
//
//   - commit_message     = [optional] Git commit message, only present if pipeline has passed initialization
//   - partially_rerun_by = [optional] The ID of the user that requested partial rerun.
//     Only available for pipelines created since 06/2020
//   - compile_task_id    = [optional] The ID of the compilation task on Zebra service
//     Only available if compilation was initiated for a given pipeline
//   - with_after_task    = [required] Indicates if pipeline has after task. This field is set before after_task_id
//     and should be used to indicate if pipeline contains after task. It's set after compilation
//     task is done.
//   - after_task_id      = [optional] The ID of the after pipeline task on Zebra service
//     Only available if after pipeline task was initiated for a given pipeline
//
// -repository_id       = [optional] The ID of the repository from which pipeline was initialized
//
//	Only available if related hook was processed by hooks-receiver/processor (only BitBucket currently)
//
// - env_vars           = [optional] Environment variables that were set for the pipeline (via extension request)
// - triggerer          = [required] Who and how triggered the pipeline
// - organization_id   = [required] Id of organization to which given pipeline belongs
type Pipeline struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PplId            string                 `protobuf:"bytes,1,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId        string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BranchName       string                 `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CommitSha        string                 `protobuf:"bytes,5,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	CreatedAt        *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PendingAt        *timestamp.Timestamp   `protobuf:"bytes,7,opt,name=pending_at,json=pendingAt,proto3" json:"pending_at,omitempty"`
	QueuingAt        *timestamp.Timestamp   `protobuf:"bytes,8,opt,name=queuing_at,json=queuingAt,proto3" json:"queuing_at,omitempty"`
	RunningAt        *timestamp.Timestamp   `protobuf:"bytes,9,opt,name=running_at,json=runningAt,proto3" json:"running_at,omitempty"`
	StoppingAt       *timestamp.Timestamp   `protobuf:"bytes,10,opt,name=stopping_at,json=stoppingAt,proto3" json:"stopping_at,omitempty"`
	DoneAt           *timestamp.Timestamp   `protobuf:"bytes,11,opt,name=done_at,json=doneAt,proto3" json:"done_at,omitempty"`
	State            Pipeline_State         `protobuf:"varint,12,opt,name=state,proto3,enum=InternalApi.Plumber.Pipeline_State" json:"state,omitempty"`
	Result           Pipeline_Result        `protobuf:"varint,13,opt,name=result,proto3,enum=InternalApi.Plumber.Pipeline_Result" json:"result,omitempty"`
	ResultReason     Pipeline_ResultReason  `protobuf:"varint,14,opt,name=result_reason,json=resultReason,proto3,enum=InternalApi.Plumber.Pipeline_ResultReason" json:"result_reason,omitempty"`
	TerminateRequest string                 `protobuf:"bytes,15,opt,name=terminate_request,json=terminateRequest,proto3" json:"terminate_request,omitempty"`
	HookId           string                 `protobuf:"bytes,16,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	BranchId         string                 `protobuf:"bytes,17,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	ErrorDescription string                 `protobuf:"bytes,18,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	SwitchId         string                 `protobuf:"bytes,19,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	WorkingDirectory string                 `protobuf:"bytes,20,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	YamlFileName     string                 `protobuf:"bytes,21,opt,name=yaml_file_name,json=yamlFileName,proto3" json:"yaml_file_name,omitempty"`
	TerminatedBy     string                 `protobuf:"bytes,22,opt,name=terminated_by,json=terminatedBy,proto3" json:"terminated_by,omitempty"`
	WfId             string                 `protobuf:"bytes,23,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	SnapshotId       string                 `protobuf:"bytes,24,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	Queue            *Queue                 `protobuf:"bytes,25,opt,name=queue,proto3" json:"queue,omitempty"`
	PromotionOf      string                 `protobuf:"bytes,26,opt,name=promotion_of,json=promotionOf,proto3" json:"promotion_of,omitempty"`
	PartialRerunOf   string                 `protobuf:"bytes,27,opt,name=partial_rerun_of,json=partialRerunOf,proto3" json:"partial_rerun_of,omitempty"`
	CommitMessage    string                 `protobuf:"bytes,28,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	PartiallyRerunBy string                 `protobuf:"bytes,29,opt,name=partially_rerun_by,json=partiallyRerunBy,proto3" json:"partially_rerun_by,omitempty"`
	CompileTaskId    string                 `protobuf:"bytes,30,opt,name=compile_task_id,json=compileTaskId,proto3" json:"compile_task_id,omitempty"`
	WithAfterTask    bool                   `protobuf:"varint,31,opt,name=with_after_task,json=withAfterTask,proto3" json:"with_after_task,omitempty"`
	AfterTaskId      string                 `protobuf:"bytes,32,opt,name=after_task_id,json=afterTaskId,proto3" json:"after_task_id,omitempty"`
	RepositoryId     string                 `protobuf:"bytes,33,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	EnvVars          []*EnvVariable         `protobuf:"bytes,34,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	Triggerer        *Triggerer             `protobuf:"bytes,35,opt,name=triggerer,proto3" json:"triggerer,omitempty"`
	OrganizationId   string                 `protobuf:"bytes,36,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	mi := &file_plumber_pipeline_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{20}
}

func (x *Pipeline) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pipeline) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Pipeline) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *Pipeline) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *Pipeline) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Pipeline) GetPendingAt() *timestamp.Timestamp {
	if x != nil {
		return x.PendingAt
	}
	return nil
}

func (x *Pipeline) GetQueuingAt() *timestamp.Timestamp {
	if x != nil {
		return x.QueuingAt
	}
	return nil
}

func (x *Pipeline) GetRunningAt() *timestamp.Timestamp {
	if x != nil {
		return x.RunningAt
	}
	return nil
}

func (x *Pipeline) GetStoppingAt() *timestamp.Timestamp {
	if x != nil {
		return x.StoppingAt
	}
	return nil
}

func (x *Pipeline) GetDoneAt() *timestamp.Timestamp {
	if x != nil {
		return x.DoneAt
	}
	return nil
}

func (x *Pipeline) GetState() Pipeline_State {
	if x != nil {
		return x.State
	}
	return Pipeline_INITIALIZING
}

func (x *Pipeline) GetResult() Pipeline_Result {
	if x != nil {
		return x.Result
	}
	return Pipeline_PASSED
}

func (x *Pipeline) GetResultReason() Pipeline_ResultReason {
	if x != nil {
		return x.ResultReason
	}
	return Pipeline_TEST
}

func (x *Pipeline) GetTerminateRequest() string {
	if x != nil {
		return x.TerminateRequest
	}
	return ""
}

func (x *Pipeline) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *Pipeline) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *Pipeline) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *Pipeline) GetSwitchId() string {
	if x != nil {
		return x.SwitchId
	}
	return ""
}

func (x *Pipeline) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *Pipeline) GetYamlFileName() string {
	if x != nil {
		return x.YamlFileName
	}
	return ""
}

func (x *Pipeline) GetTerminatedBy() string {
	if x != nil {
		return x.TerminatedBy
	}
	return ""
}

func (x *Pipeline) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *Pipeline) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *Pipeline) GetQueue() *Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *Pipeline) GetPromotionOf() string {
	if x != nil {
		return x.PromotionOf
	}
	return ""
}

func (x *Pipeline) GetPartialRerunOf() string {
	if x != nil {
		return x.PartialRerunOf
	}
	return ""
}

func (x *Pipeline) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *Pipeline) GetPartiallyRerunBy() string {
	if x != nil {
		return x.PartiallyRerunBy
	}
	return ""
}

func (x *Pipeline) GetCompileTaskId() string {
	if x != nil {
		return x.CompileTaskId
	}
	return ""
}

func (x *Pipeline) GetWithAfterTask() bool {
	if x != nil {
		return x.WithAfterTask
	}
	return false
}

func (x *Pipeline) GetAfterTaskId() string {
	if x != nil {
		return x.AfterTaskId
	}
	return ""
}

func (x *Pipeline) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *Pipeline) GetEnvVars() []*EnvVariable {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *Pipeline) GetTriggerer() *Triggerer {
	if x != nil {
		return x.Triggerer
	}
	return nil
}

func (x *Pipeline) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type Triggerer struct {
	state                     protoimpl.MessageState           `protogen:"open.v1"`
	WfTriggeredBy             plumber_w_f_workflow.TriggeredBy `protobuf:"varint,1,opt,name=wf_triggered_by,json=wfTriggeredBy,proto3,enum=InternalApi.PlumberWF.TriggeredBy" json:"wf_triggered_by,omitempty"`
	WfTriggererId             string                           `protobuf:"bytes,2,opt,name=wf_triggerer_id,json=wfTriggererId,proto3" json:"wf_triggerer_id,omitempty"`
	WfTriggererUserId         string                           `protobuf:"bytes,3,opt,name=wf_triggerer_user_id,json=wfTriggererUserId,proto3" json:"wf_triggerer_user_id,omitempty"`
	WfTriggererProviderLogin  string                           `protobuf:"bytes,4,opt,name=wf_triggerer_provider_login,json=wfTriggererProviderLogin,proto3" json:"wf_triggerer_provider_login,omitempty"`
	WfTriggererProviderUid    string                           `protobuf:"bytes,5,opt,name=wf_triggerer_provider_uid,json=wfTriggererProviderUid,proto3" json:"wf_triggerer_provider_uid,omitempty"`
	WfTriggererProviderAvatar string                           `protobuf:"bytes,6,opt,name=wf_triggerer_provider_avatar,json=wfTriggererProviderAvatar,proto3" json:"wf_triggerer_provider_avatar,omitempty"`
	PplTriggeredBy            TriggeredBy                      `protobuf:"varint,7,opt,name=ppl_triggered_by,json=pplTriggeredBy,proto3,enum=InternalApi.Plumber.TriggeredBy" json:"ppl_triggered_by,omitempty"`
	PplTriggererId            string                           `protobuf:"bytes,8,opt,name=ppl_triggerer_id,json=pplTriggererId,proto3" json:"ppl_triggerer_id,omitempty"`
	PplTriggererUserId        string                           `protobuf:"bytes,9,opt,name=ppl_triggerer_user_id,json=pplTriggererUserId,proto3" json:"ppl_triggerer_user_id,omitempty"`
	WorkflowRerunOf           string                           `protobuf:"bytes,10,opt,name=workflow_rerun_of,json=workflowRerunOf,proto3" json:"workflow_rerun_of,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Triggerer) Reset() {
	*x = Triggerer{}
	mi := &file_plumber_pipeline_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Triggerer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triggerer) ProtoMessage() {}

func (x *Triggerer) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triggerer.ProtoReflect.Descriptor instead.
func (*Triggerer) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{21}
}

func (x *Triggerer) GetWfTriggeredBy() plumber_w_f_workflow.TriggeredBy {
	if x != nil {
		return x.WfTriggeredBy
	}
	return plumber_w_f_workflow.TriggeredBy(0)
}

func (x *Triggerer) GetWfTriggererId() string {
	if x != nil {
		return x.WfTriggererId
	}
	return ""
}

func (x *Triggerer) GetWfTriggererUserId() string {
	if x != nil {
		return x.WfTriggererUserId
	}
	return ""
}

func (x *Triggerer) GetWfTriggererProviderLogin() string {
	if x != nil {
		return x.WfTriggererProviderLogin
	}
	return ""
}

func (x *Triggerer) GetWfTriggererProviderUid() string {
	if x != nil {
		return x.WfTriggererProviderUid
	}
	return ""
}

func (x *Triggerer) GetWfTriggererProviderAvatar() string {
	if x != nil {
		return x.WfTriggererProviderAvatar
	}
	return ""
}

func (x *Triggerer) GetPplTriggeredBy() TriggeredBy {
	if x != nil {
		return x.PplTriggeredBy
	}
	return TriggeredBy_WORKFLOW
}

func (x *Triggerer) GetPplTriggererId() string {
	if x != nil {
		return x.PplTriggererId
	}
	return ""
}

func (x *Triggerer) GetPplTriggererUserId() string {
	if x != nil {
		return x.PplTriggererUserId
	}
	return ""
}

func (x *Triggerer) GetWorkflowRerunOf() string {
	if x != nil {
		return x.WorkflowRerunOf
	}
	return ""
}

// ListActivity call request
//
// Synchronous operation.
// Returns paginated details for all currently running or queuing pipelines in organization
//
// Arguments:
//   - page_size        = [optional, default = 30] Number of pipelines per page of response
//   - page_token       = [required] Starting point for listing, tokens for next and previous
//     page are returned in response. If you are fetching first
//     page leave it empty and set direction to NEXT
//   - direction        = [required] Listing direction. Use NEXT with value of 'next_page_token'
//     from ListActivity response as 'page_token' to fetch next page
//     of results, or use PREVIOUS with value of 'previous_page_token'
//     as 'page_token' to fetch the previous page.
//   - order            = [required] Sorting order direction
//   - organization_id  = [required] Id of organization which pipelines should be returned.
//
// Preconditions:
//
// Postconditions:
//   - gRPC status: OK               => Response contains list of currently active pipelines
//   - gRPC status: INVALID_ARGUMENT => An invalid argument is passed.
//     The error message contains a description.
//   - gPRC status: INTERNAL         => An unknown error happened while processing this request.
//
// Idempotency:
type ListActivityRequest struct {
	state          protoimpl.MessageState        `protogen:"open.v1"`
	PageSize       int32                         `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken      string                        `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Order          ListActivityRequest_Order     `protobuf:"varint,3,opt,name=order,proto3,enum=InternalApi.Plumber.ListActivityRequest_Order" json:"order,omitempty"`
	OrganizationId string                        `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Direction      ListActivityRequest_Direction `protobuf:"varint,5,opt,name=direction,proto3,enum=InternalApi.Plumber.ListActivityRequest_Direction" json:"direction,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListActivityRequest) Reset() {
	*x = ListActivityRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivityRequest) ProtoMessage() {}

func (x *ListActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivityRequest.ProtoReflect.Descriptor instead.
func (*ListActivityRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{22}
}

func (x *ListActivityRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListActivityRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListActivityRequest) GetOrder() ListActivityRequest_Order {
	if x != nil {
		return x.Order
	}
	return ListActivityRequest_BY_CREATION_TIME_DESC
}

func (x *ListActivityRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListActivityRequest) GetDirection() ListActivityRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return ListActivityRequest_NEXT
}

// ListActivity call response
//
// Response:
//   - next_page_token     = [required] Token which should be passed in list request
//     to fetch the next page of workflows
//   - previous_page_token = [required] Token which should be passed in list request
//     to fetch the previous page of workflows
//   - pipelines           = [required] Pipelines which match search params in request
type ListActivityResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NextPageToken     string                 `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PreviousPageToken string                 `protobuf:"bytes,2,opt,name=previous_page_token,json=previousPageToken,proto3" json:"previous_page_token,omitempty"`
	Pipelines         []*ActivePipeline      `protobuf:"bytes,3,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListActivityResponse) Reset() {
	*x = ListActivityResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivityResponse) ProtoMessage() {}

func (x *ListActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivityResponse.ProtoReflect.Descriptor instead.
func (*ListActivityResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{23}
}

func (x *ListActivityResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListActivityResponse) GetPreviousPageToken() string {
	if x != nil {
		return x.PreviousPageToken
	}
	return ""
}

func (x *ListActivityResponse) GetPipelines() []*ActivePipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

// ListRequesters call request
//
// Synchronous operation.
// Returns paginated list of requesters.
// This endpoint supports two modes of operation:
// - if page_token is provided, other parameters are ignored as the parameters are embedded within the token itself
// - if page_token is not provided, one needs to supply required parameters
//
// - organization_id  = [required] Id of organization which requesters should be returned
// - requested_at_gt  = [required] returns requesters from this timestamp
// - requested_at_lte = [required] returns requesters to this timestamp
// - page_token       = [optional] If set, returns the next page of results ignoring other parameters
// - page_size        = [optional, default = 100] Number of requesters per page
type ListRequestersRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PageToken      string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize       int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	RequestedAtGt  *timestamp.Timestamp   `protobuf:"bytes,4,opt,name=requested_at_gt,json=requestedAtGt,proto3" json:"requested_at_gt,omitempty"`
	RequestedAtLte *timestamp.Timestamp   `protobuf:"bytes,5,opt,name=requested_at_lte,json=requestedAtLte,proto3" json:"requested_at_lte,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListRequestersRequest) Reset() {
	*x = ListRequestersRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequestersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequestersRequest) ProtoMessage() {}

func (x *ListRequestersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequestersRequest.ProtoReflect.Descriptor instead.
func (*ListRequestersRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{24}
}

func (x *ListRequestersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListRequestersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRequestersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRequestersRequest) GetRequestedAtGt() *timestamp.Timestamp {
	if x != nil {
		return x.RequestedAtGt
	}
	return nil
}

func (x *ListRequestersRequest) GetRequestedAtLte() *timestamp.Timestamp {
	if x != nil {
		return x.RequestedAtLte
	}
	return nil
}

// ListRequesters response
//
// Response:
// - requesters           = [required] List of requesters matching the request criteria
// - next_page_token      = [required] Token used for retrieving next page. If empty, there are no more pages.
type ListRequestersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requesters    []*Requester           `protobuf:"bytes,1,rep,name=requesters,proto3" json:"requesters,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequestersResponse) Reset() {
	*x = ListRequestersResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequestersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequestersResponse) ProtoMessage() {}

func (x *ListRequestersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequestersResponse.ProtoReflect.Descriptor instead.
func (*ListRequestersResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{25}
}

func (x *ListRequestersResponse) GetRequesters() []*Requester {
	if x != nil {
		return x.Requesters
	}
	return nil
}

func (x *ListRequestersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Details about the requester
//
// organization_id = [required] Id of the organization
// project_id      = [required] Id of the project
// ppl_id          = [required] Id of the pipeline
// user_id         = [optional] Id of the user, can be empty - then the username is required
// provider_login  = [optional] Login of the user in the git service
// provider_uid    = [optional] ID of the user in the git service
// provider        = [required] Which git service requested the pipeline
// triggerer       = [required] How the request was triggered
type Requester struct {
	state          protoimpl.MessageState           `protogen:"open.v1"`
	OrganizationId string                           `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      string                           `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PplId          string                           `protobuf:"bytes,3,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	UserId         string                           `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProviderLogin  string                           `protobuf:"bytes,5,opt,name=provider_login,json=providerLogin,proto3" json:"provider_login,omitempty"`
	ProviderUid    string                           `protobuf:"bytes,6,opt,name=provider_uid,json=providerUid,proto3" json:"provider_uid,omitempty"`
	Provider       user.RepositoryProvider_Type     `protobuf:"varint,7,opt,name=provider,proto3,enum=InternalApi.User.RepositoryProvider_Type" json:"provider,omitempty"`
	Triggerer      plumber_w_f_workflow.TriggeredBy `protobuf:"varint,8,opt,name=triggerer,proto3,enum=InternalApi.PlumberWF.TriggeredBy" json:"triggerer,omitempty"`
	RequestedAt    *timestamp.Timestamp             `protobuf:"bytes,9,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Requester) Reset() {
	*x = Requester{}
	mi := &file_plumber_pipeline_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Requester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Requester) ProtoMessage() {}

func (x *Requester) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Requester.ProtoReflect.Descriptor instead.
func (*Requester) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{26}
}

func (x *Requester) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Requester) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Requester) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

func (x *Requester) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Requester) GetProviderLogin() string {
	if x != nil {
		return x.ProviderLogin
	}
	return ""
}

func (x *Requester) GetProviderUid() string {
	if x != nil {
		return x.ProviderUid
	}
	return ""
}

func (x *Requester) GetProvider() user.RepositoryProvider_Type {
	if x != nil {
		return x.Provider
	}
	return user.RepositoryProvider_Type(0)
}

func (x *Requester) GetTriggerer() plumber_w_f_workflow.TriggeredBy {
	if x != nil {
		return x.Triggerer
	}
	return plumber_w_f_workflow.TriggeredBy(0)
}

func (x *Requester) GetRequestedAt() *timestamp.Timestamp {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

// Details of Active pipelines (pipelines in running or queuing state)
//
//   - organization_id  = [required] The organization to which pipeline belongs
//   - project_id       = [required] Id of project to which pipeline belongs
//   - wf_id            = [required] Workflow to which pipeline belongs
//   - wf_number        = [required] Ordinal number of the workflow to which pipeline belongs
//   - name             = [required] User specific (or auto-generated) name for given pipeline
//   - ppl_id           = [required] Unique Pipeline identifier
//   - hook_id          = [required] ID of the hook that triggered the workflow
//   - switch_id        = [optional] Id from Gofer service of the switch connected to this pipeline
//     (only valid if promotions were defined for this pipeline in yaml definition)
//   - definition_file  = [required] Full path within git repo to file which contains definition of this pipeline
//   - priority         = [required] Execution priority for all job of this pipeline (can be overridden in block or job)
//   - triggered_by     = [required] Event that triggered workflow (hook, schedule, API call..)
//   - requester_id     = [required] The user who initiated workflow
//   - partial_rerun_of = [optional] Id of the pipeline from which this pipeline was partially rerun.
//   - promotion_of     = [optional] Id of the pipeline that triggered the promotion to this pipeline.
//   - promoter_id      = [optional] The user who promoted this pipeline (only valid if pipeline is promotion)
//   - auto_promoted    = [optional] True if pipeline was auto-promoted
//   - git_ref          = [required] Branch name, tag, or pull request for which pipeline was initiated
//   - commit_sha       = [required] Git commit sha for which pipeline was initiated
//   - branch_id        = [required] ID of the branch in Front service
//   - created_at       = [required] Timestamp when pipeline schedule request was recorded
//   - pending_at       = [required] Timestamp when pipeline transitioned to pending state
//   - queuing_at       = [required] Timestamp when pipeline transitioned to queuing state
//   - running_at       = [required] Timestamp when pipeline transitioned to running state
//   - queue            = [required] Details of queue to which pipeline belongs
//   - blocks           = [required] Details of pipeline's blocks
//   - state            = [required] Pipeline's state (running or queuing)
//   - git_ref_type     = [required] Type of gif reference for which pipeline was initiated
//   - commit_message   = [required] Git commit message of th commit for which pipeline was initiated
//   - commiter_username   = [required] GitHub username of the person that authored given commit
//   - commiter_avatar_url = [required] URL to GitHub avatar of the author of the given commit
//   - triggerer           = [required] Who and how triggered the pipeline
type ActivePipeline struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// various IDs and basic data
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	WfId           string `protobuf:"bytes,3,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	WfNumber       uint32 `protobuf:"varint,4,opt,name=wf_number,json=wfNumber,proto3" json:"wf_number,omitempty"`
	Name           string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	PplId          string `protobuf:"bytes,6,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	HookId         string `protobuf:"bytes,7,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	SwitchId       string `protobuf:"bytes,8,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	DefinitionFile string `protobuf:"bytes,9,opt,name=definition_file,json=definitionFile,proto3" json:"definition_file,omitempty"`
	Priority       uint32 `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
	// Trigger related data
	WfTriggeredBy  plumber_w_f_workflow.TriggeredBy `protobuf:"varint,11,opt,name=wf_triggered_by,json=wfTriggeredBy,proto3,enum=InternalApi.PlumberWF.TriggeredBy" json:"wf_triggered_by,omitempty"`
	RequesterId    string                           `protobuf:"bytes,12,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	PartialRerunOf string                           `protobuf:"bytes,13,opt,name=partial_rerun_of,json=partialRerunOf,proto3" json:"partial_rerun_of,omitempty"`
	PromotionOf    string                           `protobuf:"bytes,14,opt,name=promotion_of,json=promotionOf,proto3" json:"promotion_of,omitempty"`
	PromoterId     string                           `protobuf:"bytes,15,opt,name=promoter_id,json=promoterId,proto3" json:"promoter_id,omitempty"`
	AutoPromoted   bool                             `protobuf:"varint,16,opt,name=auto_promoted,json=autoPromoted,proto3" json:"auto_promoted,omitempty"`
	// Git related data
	GitRef    string `protobuf:"bytes,17,opt,name=git_ref,json=gitRef,proto3" json:"git_ref,omitempty"`
	CommitSha string `protobuf:"bytes,18,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	BranchId  string `protobuf:"bytes,19,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	// Timeline
	CreatedAt     *timestamp.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PendingAt     *timestamp.Timestamp `protobuf:"bytes,21,opt,name=pending_at,json=pendingAt,proto3" json:"pending_at,omitempty"`
	QueuingAt     *timestamp.Timestamp `protobuf:"bytes,22,opt,name=queuing_at,json=queuingAt,proto3" json:"queuing_at,omitempty"`
	RunningAt     *timestamp.Timestamp `protobuf:"bytes,23,opt,name=running_at,json=runningAt,proto3" json:"running_at,omitempty"`
	Queue         *Queue               `protobuf:"bytes,24,opt,name=queue,proto3" json:"queue,omitempty"`
	Blocks        []*BlockDetails      `protobuf:"bytes,25,rep,name=blocks,proto3" json:"blocks,omitempty"`
	State         Pipeline_State       `protobuf:"varint,26,opt,name=state,proto3,enum=InternalApi.Plumber.Pipeline_State" json:"state,omitempty"`
	GitRefType    GitRefType           `protobuf:"varint,27,opt,name=git_ref_type,json=gitRefType,proto3,enum=InternalApi.Plumber.GitRefType" json:"git_ref_type,omitempty"`
	CommitMessage string               `protobuf:"bytes,28,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	// Commiter data used when they are not Semaphore users
	CommiterUsername  string     `protobuf:"bytes,29,opt,name=commiter_username,json=commiterUsername,proto3" json:"commiter_username,omitempty"`
	CommiterAvatarUrl string     `protobuf:"bytes,30,opt,name=commiter_avatar_url,json=commiterAvatarUrl,proto3" json:"commiter_avatar_url,omitempty"`
	Triggerer         *Triggerer `protobuf:"bytes,31,opt,name=triggerer,proto3" json:"triggerer,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ActivePipeline) Reset() {
	*x = ActivePipeline{}
	mi := &file_plumber_pipeline_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivePipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePipeline) ProtoMessage() {}

func (x *ActivePipeline) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePipeline.ProtoReflect.Descriptor instead.
func (*ActivePipeline) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{27}
}

func (x *ActivePipeline) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ActivePipeline) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ActivePipeline) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *ActivePipeline) GetWfNumber() uint32 {
	if x != nil {
		return x.WfNumber
	}
	return 0
}

func (x *ActivePipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivePipeline) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

func (x *ActivePipeline) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *ActivePipeline) GetSwitchId() string {
	if x != nil {
		return x.SwitchId
	}
	return ""
}

func (x *ActivePipeline) GetDefinitionFile() string {
	if x != nil {
		return x.DefinitionFile
	}
	return ""
}

func (x *ActivePipeline) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ActivePipeline) GetWfTriggeredBy() plumber_w_f_workflow.TriggeredBy {
	if x != nil {
		return x.WfTriggeredBy
	}
	return plumber_w_f_workflow.TriggeredBy(0)
}

func (x *ActivePipeline) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *ActivePipeline) GetPartialRerunOf() string {
	if x != nil {
		return x.PartialRerunOf
	}
	return ""
}

func (x *ActivePipeline) GetPromotionOf() string {
	if x != nil {
		return x.PromotionOf
	}
	return ""
}

func (x *ActivePipeline) GetPromoterId() string {
	if x != nil {
		return x.PromoterId
	}
	return ""
}

func (x *ActivePipeline) GetAutoPromoted() bool {
	if x != nil {
		return x.AutoPromoted
	}
	return false
}

func (x *ActivePipeline) GetGitRef() string {
	if x != nil {
		return x.GitRef
	}
	return ""
}

func (x *ActivePipeline) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *ActivePipeline) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *ActivePipeline) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ActivePipeline) GetPendingAt() *timestamp.Timestamp {
	if x != nil {
		return x.PendingAt
	}
	return nil
}

func (x *ActivePipeline) GetQueuingAt() *timestamp.Timestamp {
	if x != nil {
		return x.QueuingAt
	}
	return nil
}

func (x *ActivePipeline) GetRunningAt() *timestamp.Timestamp {
	if x != nil {
		return x.RunningAt
	}
	return nil
}

func (x *ActivePipeline) GetQueue() *Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *ActivePipeline) GetBlocks() []*BlockDetails {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *ActivePipeline) GetState() Pipeline_State {
	if x != nil {
		return x.State
	}
	return Pipeline_INITIALIZING
}

func (x *ActivePipeline) GetGitRefType() GitRefType {
	if x != nil {
		return x.GitRefType
	}
	return GitRefType_BRANCH
}

func (x *ActivePipeline) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *ActivePipeline) GetCommiterUsername() string {
	if x != nil {
		return x.CommiterUsername
	}
	return ""
}

func (x *ActivePipeline) GetCommiterAvatarUrl() string {
	if x != nil {
		return x.CommiterAvatarUrl
	}
	return ""
}

func (x *ActivePipeline) GetTriggerer() *Triggerer {
	if x != nil {
		return x.Triggerer
	}
	return nil
}

// Block details
//
// Fields:
//   - block_id      = [required] unique block identifier
//   - name          = [required] Block name
//   - priority      = [required] Execution priority for all job of this block
//     (can be overridden for a particular job)
//   - dependencies  = [required] Names of the blocks that are dependencies of the current block
//   - state         = [required] Current state of given block
//   - result        = [optional] Block execution result, only valid if state = DONE
//   - result_reason = [optional] Reason for result of block's execution different from PASSED
//     It can be:
//   - TEST, MALFORMED or STUCK - when result is FAILED
//   - USER, INTERNAL, STRATEGY, FAST_FAILING or DELETED - when result is STOPPED or CANCELED
//   - error_description = [optional] Stores error description when block is MALFORMED
//   - jobs          = [required] Jobs belonging to the block
type BlockDetails struct {
	state            protoimpl.MessageState     `protogen:"open.v1"`
	BlockId          string                     `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Name             string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Priority         uint32                     `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Dependencies     []string                   `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	State            Block_State                `protobuf:"varint,5,opt,name=state,proto3,enum=InternalApi.Plumber.Block_State" json:"state,omitempty"`
	Result           Block_Result               `protobuf:"varint,6,opt,name=result,proto3,enum=InternalApi.Plumber.Block_Result" json:"result,omitempty"`
	ResultReason     Block_ResultReason         `protobuf:"varint,7,opt,name=result_reason,json=resultReason,proto3,enum=InternalApi.Plumber.Block_ResultReason" json:"result_reason,omitempty"`
	ErrorDescription string                     `protobuf:"bytes,8,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	Jobs             []*BlockDetails_JobDetails `protobuf:"bytes,9,rep,name=jobs,proto3" json:"jobs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BlockDetails) Reset() {
	*x = BlockDetails{}
	mi := &file_plumber_pipeline_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDetails) ProtoMessage() {}

func (x *BlockDetails) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDetails.ProtoReflect.Descriptor instead.
func (*BlockDetails) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{28}
}

func (x *BlockDetails) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *BlockDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockDetails) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *BlockDetails) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *BlockDetails) GetState() Block_State {
	if x != nil {
		return x.State
	}
	return Block_WAITING
}

func (x *BlockDetails) GetResult() Block_Result {
	if x != nil {
		return x.Result
	}
	return Block_PASSED
}

func (x *BlockDetails) GetResultReason() Block_ResultReason {
	if x != nil {
		return x.ResultReason
	}
	return Block_TEST
}

func (x *BlockDetails) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *BlockDetails) GetJobs() []*BlockDetails_JobDetails {
	if x != nil {
		return x.Jobs
	}
	return nil
}

// RunNow call request
//
// Asynchronous operation.
// The request is recorded and priorities are increased as soon as possible.
//
// Arguments:
// - requester_id = [required] ID of the user that requested priority increase.
// - type         = [required] Pipeline, block or job
// - ppl_id       = [required] ID of the pipeline
// - block_id     = [required if type is block or job] ID of the block
// - job_id       = [required if type is job] ID of the job
//
// Preconditions:
// - Pipeline exists and it is in running state.
//
// Postconditions:
// - gRPC status: OK => Request is recorded and priorities will be increased as soon as possible.
// - gRPC status: INVALID_ARGUMENT => An invalid argument is passed. The error message contains a description.
// - gPRC status: INTERNAL => An unknown error happened while processing this request.
//
// Idempotency:
// - Operation is idempotent on its own since priority is always set to the same value.
type RunNowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequesterId   string                 `protobuf:"bytes,1,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	Type          RunNowRequest_Type     `protobuf:"varint,2,opt,name=type,proto3,enum=InternalApi.Plumber.RunNowRequest_Type" json:"type,omitempty"`
	PplId         string                 `protobuf:"bytes,3,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	BlockId       string                 `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	JobId         string                 `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunNowRequest) Reset() {
	*x = RunNowRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunNowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunNowRequest) ProtoMessage() {}

func (x *RunNowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunNowRequest.ProtoReflect.Descriptor instead.
func (*RunNowRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{29}
}

func (x *RunNowRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *RunNowRequest) GetType() RunNowRequest_Type {
	if x != nil {
		return x.Type
	}
	return RunNowRequest_PIPELINE
}

func (x *RunNowRequest) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

func (x *RunNowRequest) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *RunNowRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// RunNow call response
//
// Response:
type RunNowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunNowResponse) Reset() {
	*x = RunNowResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunNowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunNowResponse) ProtoMessage() {}

func (x *RunNowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunNowResponse.ProtoReflect.Descriptor instead.
func (*RunNowResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{30}
}

// GetProjectId call request
//
// Synchronous operation.
// Returns project_id for pipeline with given ppl_id.
// That project_id can later be used for authorization etc.
//
// Arguments:
//   - ppl_id  = [required] Pipeline for which project_id is needed.
//
// Preconditions:
// - Pipeline scheduling request for 'ppl_id' was accepted.
//
// Postconditions:
//
// Idempotency:
type GetProjectIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PplId         string                 `protobuf:"bytes,1,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectIdRequest) Reset() {
	*x = GetProjectIdRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectIdRequest) ProtoMessage() {}

func (x *GetProjectIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectIdRequest.ProtoReflect.Descriptor instead.
func (*GetProjectIdRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{31}
}

func (x *GetProjectIdRequest) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

// GetProjectId call response
//
// Response:
//   - project_id      = [required] Id of project on Semaphore.
//   - response_status = [required] contains ResponseCode:
//     OK        = Response contains valid data in 'project_id' field
//     BAD_PARAM = Invalid 'ppl_id'
type GetProjectIdResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	ProjectId      string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetProjectIdResponse) Reset() {
	*x = GetProjectIdResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectIdResponse) ProtoMessage() {}

func (x *GetProjectIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectIdResponse.ProtoReflect.Descriptor instead.
func (*GetProjectIdResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{32}
}

func (x *GetProjectIdResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *GetProjectIdResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// ValidateYaml call request
//
// Synchronous operation if called without ppl_id field.
// It is called to validate passed yaml definition against yaml schema.
//
// Asynchronous operation if
// - validation passes and
// - called with ppl_id field.
// If valid ppl_id is given, after yaml definition passes validation, pipeline
// based on that definition will be scheduled and any additional data (repo,
// auth etc.) will be copied from the pipeline with given ppl_id.
//
// Arguments:
//
//   - yaml_definition = [required] YAML definition which should be verified
//   - ppl_id          = [optional] Id of pipeline from which repo and auth data
//     will be used for scheduling
//
// Preconditions:
// - If ppl_id is given, pipeline with that id must already be scheduled
//
// Postconditions:
//   - If ppl_id is given and yaml_definition passed validation, pipeline based on
//     that definition should be scheduled
//
// Idempotency:
//   - Since this is intended for manual testing and not automated continuous
//     calls, to avoid user pain in having to change some token on every call
//     decision was made to omit idempotency for this call
type ValidateYamlRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	YamlDefinition string                 `protobuf:"bytes,1,opt,name=yaml_definition,json=yamlDefinition,proto3" json:"yaml_definition,omitempty"`
	PplId          string                 `protobuf:"bytes,2,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidateYamlRequest) Reset() {
	*x = ValidateYamlRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateYamlRequest) ProtoMessage() {}

func (x *ValidateYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateYamlRequest.ProtoReflect.Descriptor instead.
func (*ValidateYamlRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{33}
}

func (x *ValidateYamlRequest) GetYamlDefinition() string {
	if x != nil {
		return x.YamlDefinition
	}
	return ""
}

func (x *ValidateYamlRequest) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

// ValidateYaml call response
//
// Response:
//   - response_status = [required] contains ResponseCode:
//     OK        = 'yaml_definition' is valid and pipeline is
//     scheduled if 'ppl_id' param was given in request
//     BAD_PARAM = Invalid 'ppl_id' or 'yaml_definition' param
//   - ppl_id          = [optional] Id of newly scheduled pipeline, only valid and present if
//     yaml_definition was valid and ppl_id was given in request
type ValidateYamlResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	PplId          string                 `protobuf:"bytes,2,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidateYamlResponse) Reset() {
	*x = ValidateYamlResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateYamlResponse) ProtoMessage() {}

func (x *ValidateYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateYamlResponse.ProtoReflect.Descriptor instead.
func (*ValidateYamlResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{34}
}

func (x *ValidateYamlResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *ValidateYamlResponse) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

// ScheduleExtension call request
//
// Synchronous operation.
// It is called to schedule pipeline based on definition from given yml config file.
// Any additional data (repo, auth etc.) needed for scheduling will be copied from
// the pipeline with given ppl_id.
//
// Arguments:
//
//   - file_path               = [required] Path inside repo of YAML file containing pipeline
//     definition
//   - ppl_id                  = [required] Id of pipeline from which repo and auth data
//     will be used for scheduling
//   - request_token           = [required] Unique string, see Idempotency
//   - env_variables           = [optional] Env vars which will be added to ppl_env_vars
//     in this pipeline's jobs
//   - prev_ppl_artefact_ids    = [required] ppl_artefact_ids of previous pipelines in workflow
//   - promoted_by              = [required] ID of the user that triggered this
//     (the value is 'auto' for auto-promoted pipelines)
//   - auto_promoted            = [required] true if extension was auto-promoted, otherwise it is false
//   - secret_names             = [optional] Secret names that will be added to global job configuration
//   - deployment_target_id     = [optional] Deployment Target ID that guarded promoted pipeline
//
// Preconditions:
// - Pipeline with given ppl_id must already be scheduled
//
// Postconditions:
// - Pipeline based on definition from given yaml file is scheduled
//
// Idempotency:
//   - When ScheduleExtension request is received, request_token is checked first.
//     If pipeline with the same request_token is already scheduled:
//   - OK and previously generated ppl_id are returned,
//     without scheduling new pipeline.
//   - Other parameters are not checked; they are assumed to be the same.
type ScheduleExtensionRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	FilePath           string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	PplId              string                 `protobuf:"bytes,2,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	RequestToken       string                 `protobuf:"bytes,3,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
	EnvVariables       []*EnvVariable         `protobuf:"bytes,4,rep,name=env_variables,json=envVariables,proto3" json:"env_variables,omitempty"`
	PrevPplArtefactIds []string               `protobuf:"bytes,6,rep,name=prev_ppl_artefact_ids,json=prevPplArtefactIds,proto3" json:"prev_ppl_artefact_ids,omitempty"`
	PromotedBy         string                 `protobuf:"bytes,7,opt,name=promoted_by,json=promotedBy,proto3" json:"promoted_by,omitempty"`
	AutoPromoted       bool                   `protobuf:"varint,8,opt,name=auto_promoted,json=autoPromoted,proto3" json:"auto_promoted,omitempty"`
	SecretNames        []string               `protobuf:"bytes,9,rep,name=secret_names,json=secretNames,proto3" json:"secret_names,omitempty"`
	DeploymentTargetId string                 `protobuf:"bytes,10,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ScheduleExtensionRequest) Reset() {
	*x = ScheduleExtensionRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleExtensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleExtensionRequest) ProtoMessage() {}

func (x *ScheduleExtensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleExtensionRequest.ProtoReflect.Descriptor instead.
func (*ScheduleExtensionRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{35}
}

func (x *ScheduleExtensionRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ScheduleExtensionRequest) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

func (x *ScheduleExtensionRequest) GetRequestToken() string {
	if x != nil {
		return x.RequestToken
	}
	return ""
}

func (x *ScheduleExtensionRequest) GetEnvVariables() []*EnvVariable {
	if x != nil {
		return x.EnvVariables
	}
	return nil
}

func (x *ScheduleExtensionRequest) GetPrevPplArtefactIds() []string {
	if x != nil {
		return x.PrevPplArtefactIds
	}
	return nil
}

func (x *ScheduleExtensionRequest) GetPromotedBy() string {
	if x != nil {
		return x.PromotedBy
	}
	return ""
}

func (x *ScheduleExtensionRequest) GetAutoPromoted() bool {
	if x != nil {
		return x.AutoPromoted
	}
	return false
}

func (x *ScheduleExtensionRequest) GetSecretNames() []string {
	if x != nil {
		return x.SecretNames
	}
	return nil
}

func (x *ScheduleExtensionRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

// Type which models environment variables with name and string value
type EnvVariable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnvVariable) Reset() {
	*x = EnvVariable{}
	mi := &file_plumber_pipeline_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVariable) ProtoMessage() {}

func (x *EnvVariable) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVariable.ProtoReflect.Descriptor instead.
func (*EnvVariable) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{36}
}

func (x *EnvVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// ScheduleExtension call response
//
// Response:
//   - response_status  = [required] contains ResponseCode:
//     OK        = Pipeline is scheduled.
//     Pipeline has to be available for Describe call.
//     BAD_PARAM = Pipeline request is rejected because of
//     malformed request.
//   - ppl_id           = [required] id of newly scheduled pipeline
type ScheduleExtensionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	PplId          string                 `protobuf:"bytes,2,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScheduleExtensionResponse) Reset() {
	*x = ScheduleExtensionResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleExtensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleExtensionResponse) ProtoMessage() {}

func (x *ScheduleExtensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleExtensionResponse.ProtoReflect.Descriptor instead.
func (*ScheduleExtensionResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{37}
}

func (x *ScheduleExtensionResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *ScheduleExtensionResponse) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

// Delete call request
//
// Asynchronous operation.
// Delete request is persisted and actual deletion is conducted on internal schedule.
//
// Arguments:
//   - project_id  = [required] all pipelines from the specified project
//     will to be deleted.
//   - requester   = [required] user who requested deletion
//
// Preconditions:
//
// Postconditions:
// - Deletion request is persisted
//
// Idempotency:
// Deletion is idempotent on its own.
// If same request is received twice it will be executed twice, no harm done.
type DeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectId     string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Requester     string                 `protobuf:"bytes,3,opt,name=requester,proto3" json:"requester,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteRequest) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

// Delete call response
//
// Response:
//   - response_status = [required] contains ResponseCode:
//     OK        = delete request persisted
type DeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *ResponseStatus        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// PartialRebuild call request
//
// Arguments:
// - ppl_id        = [required] Id of pipeline which partial rebuild is requested
// - request_token = [required] unique string, see Idempotency
// - user_id       = [required] The ID of the user that requested partial rebuild
//
// Preconditions:
// - Pipeline with given ppl_id has to exist and to be in state 'done' with result 'failed'
// - request_token has to be unique for every partial rebuild execution, see Idempotency
//
// Postconditions:
//   - ResponseCode = OK => Pipeline with request_token which is partial rebuild of
//     given pipeline is scheduled or was previously scheduled.
//     ppl_id is returned.
//   - otherwise         => Pipeline with request_token is NOT scheduled.
//     Error is returned.
//
// Idempotency:
//   - When partial rebuild request is received, request_token is checked first.
//     If pipeline's partial rebuild with the same request_token is already scheduled:
//   - OK and previously generated ppl_id are returned,
//     without scheduling new partial rebuild of pipeline.
//   - Other parameters are not checked; they are assumed to be the same.
type PartialRebuildRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PplId         string                 `protobuf:"bytes,1,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	RequestToken  string                 `protobuf:"bytes,2,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartialRebuildRequest) Reset() {
	*x = PartialRebuildRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartialRebuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialRebuildRequest) ProtoMessage() {}

func (x *PartialRebuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialRebuildRequest.ProtoReflect.Descriptor instead.
func (*PartialRebuildRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{40}
}

func (x *PartialRebuildRequest) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

func (x *PartialRebuildRequest) GetRequestToken() string {
	if x != nil {
		return x.RequestToken
	}
	return ""
}

func (x *PartialRebuildRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// PartialRebuild call response
//
// Response:
//   - response_status  = [required] contains ResponseCode:
//     OK        = Pipeline's partial rebuild is scheduled.
//     Pipeline has to be available for Describe call.
//     BAD_PARAM = PartialRebuild request is rejected because of
//     malformed request.
//   - ppl_id           = [required] id of newly scheduled pipeline which is partail
//     rebuild of pipeline with id given in request
type PartialRebuildResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseStatus *ResponseStatus        `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	PplId          string                 `protobuf:"bytes,2,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PartialRebuildResponse) Reset() {
	*x = PartialRebuildResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartialRebuildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialRebuildResponse) ProtoMessage() {}

func (x *PartialRebuildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialRebuildResponse.ProtoReflect.Descriptor instead.
func (*PartialRebuildResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{41}
}

func (x *PartialRebuildResponse) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *PartialRebuildResponse) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

// Version call request
//
// Synchronous operation.
// Returns pipelines service version.
// This call is often used as first step in troubleshooting client-server
// communication issues.
//
// Arguments:
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type VersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	mi := &file_plumber_pipeline_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{42}
}

// Version call response
//
// Response:
// - version  = [required] pipelines service version.
type VersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	mi := &file_plumber_pipeline_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{43}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ResponseStatus struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Code          ResponseStatus_ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=InternalApi.Plumber.ResponseStatus_ResponseCode" json:"code,omitempty"`
	Message       string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseStatus) Reset() {
	*x = ResponseStatus{}
	mi := &file_plumber_pipeline_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatus) ProtoMessage() {}

func (x *ResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatus.ProtoReflect.Descriptor instead.
func (*ResponseStatus) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{44}
}

func (x *ResponseStatus) GetCode() ResponseStatus_ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseStatus_OK
}

func (x *ResponseStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Cloud AMQP events. Published on: pipeline_state_exchange.
//
// Published with one of these routing keys:
//
//   - 'initializing' = Pipeline is initializing, no data about blocks on Describe
//     or DescribeTopology. Guaranteed to be published in regular
//     system and network state.
//
//   - 'pending'      = Pipeline is ready for scheduling, no data about blocks on
//     Describe, DescribeTopology works. No guarantees of publishing
//     (pipeline can go straight to done after previous state).
//
//   - 'queuing'      = Pipeline waits for previous one(s) to be done. No data about block on
//     Describe, DescribeTopology works. No guarantees of publishing
//     (pipeline can go straight to done or running after previous state).
//
//   - 'running'      = Pipeline is running. Both Describe and DescribeTopology will return
//     data about blocks. No guarantees of publishing (pipeline can go
//     straight to done from one of previous states).
//
//   - 'stopping'     = Pipeline is terminating. Both Describe and DescribeTopology
//     will return data about blocks. No guarantees of publishing
//     (termination(stop or cancel request) may not be requested).
//
//   - 'done'         = Pipeline's execution is finished. DescribeTopology will work if
//     pipeline didn't go to done straight from initializing, and Describe
//     will work if pipeline managed to enter running state prior to going to
//     done. Guaranteed to be published in regular system and network state.
//
// All fields are required.
type PipelineEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	State         Pipeline_State         `protobuf:"varint,2,opt,name=state,proto3,enum=InternalApi.Plumber.Pipeline_State" json:"state,omitempty"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineEvent) Reset() {
	*x = PipelineEvent{}
	mi := &file_plumber_pipeline_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineEvent) ProtoMessage() {}

func (x *PipelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineEvent.ProtoReflect.Descriptor instead.
func (*PipelineEvent) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{45}
}

func (x *PipelineEvent) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineEvent) GetState() Pipeline_State {
	if x != nil {
		return x.State
	}
	return Pipeline_INITIALIZING
}

func (x *PipelineEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Cloud AMQP events. Published on: pipeline_block_state_exchange.
//
// Published with one of these routing keys:
//
//   - 'running'  = PipelineBlock is running, build may or may not be started and it can
//     be already finished also. No guarantees of publishing (block can go
//     straight to done if there is some problem with it's initialization).
//
//   - 'stopping' = PipelineBlock is terminating. No guarantees of publishing
//     (termination(stop or cancel request) may not be requested).
//
//   - 'done'     = PipelineBlock's execution is finished. Guaranteed to be published
//     in regular system and network state.
//
// All fields are required.
type PipelineBlockEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	BlockId       string                 `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	State         Block_State            `protobuf:"varint,3,opt,name=state,proto3,enum=InternalApi.Plumber.Block_State" json:"state,omitempty"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineBlockEvent) Reset() {
	*x = PipelineBlockEvent{}
	mi := &file_plumber_pipeline_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineBlockEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineBlockEvent) ProtoMessage() {}

func (x *PipelineBlockEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineBlockEvent.ProtoReflect.Descriptor instead.
func (*PipelineBlockEvent) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{46}
}

func (x *PipelineBlockEvent) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineBlockEvent) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *PipelineBlockEvent) GetState() Block_State {
	if x != nil {
		return x.State
	}
	return Block_WAITING
}

func (x *PipelineBlockEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// AfterPipeline represents an after pipeline task
// NOTE: this message is not returned by any service yet, it's here for a documentation purpose
// and to serve enum values for the after pipeline event
//
// - pipeline_id    = [required] id of the pipeline that after pipeline is executed
// - state          = [required] state of the after pipeline
// - result         = [required] result of the after pipeline
// - result_reason  = [required] reason of the after pipeline failure (if RESULT != PASSED)
// - created_at     = [required] when the after pipeline was created
type AfterPipeline struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	PipelineId    string                     `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	State         AfterPipeline_State        `protobuf:"varint,2,opt,name=state,proto3,enum=InternalApi.Plumber.AfterPipeline_State" json:"state,omitempty"`
	Result        AfterPipeline_Result       `protobuf:"varint,3,opt,name=result,proto3,enum=InternalApi.Plumber.AfterPipeline_Result" json:"result,omitempty"`
	ResultReason  AfterPipeline_ResultReason `protobuf:"varint,4,opt,name=result_reason,json=resultReason,proto3,enum=InternalApi.Plumber.AfterPipeline_ResultReason" json:"result_reason,omitempty"`
	CreatedAt     *timestamp.Timestamp       `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AfterPipeline) Reset() {
	*x = AfterPipeline{}
	mi := &file_plumber_pipeline_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AfterPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfterPipeline) ProtoMessage() {}

func (x *AfterPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfterPipeline.ProtoReflect.Descriptor instead.
func (*AfterPipeline) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{47}
}

func (x *AfterPipeline) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *AfterPipeline) GetState() AfterPipeline_State {
	if x != nil {
		return x.State
	}
	return AfterPipeline_WAITING
}

func (x *AfterPipeline) GetResult() AfterPipeline_Result {
	if x != nil {
		return x.Result
	}
	return AfterPipeline_PASSED
}

func (x *AfterPipeline) GetResultReason() AfterPipeline_ResultReason {
	if x != nil {
		return x.ResultReason
	}
	return AfterPipeline_TEST
}

func (x *AfterPipeline) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Cloud AMQP events. Published on: after_pipeline_state_exchange.
//
// Published with one of these routing keys:
//
// - 'waiting'  = After pipeline is waiting for the pipeline to finish.
//
// - 'pending'  = After pipeline is pending.
//
// - 'running' = After pipeline is running.
//
// - 'done'    = After pipeline is done.
//
// All fields are required.
//
// - pipeline_id    = [required] id of the pipeline that after pipeline is executed
// - state          = [required] state of the after pipeline
// - timestamp      = [required] when the event was emitted
type AfterPipelineEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	State         AfterPipeline_State    `protobuf:"varint,2,opt,name=state,proto3,enum=InternalApi.Plumber.AfterPipeline_State" json:"state,omitempty"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AfterPipelineEvent) Reset() {
	*x = AfterPipelineEvent{}
	mi := &file_plumber_pipeline_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AfterPipelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfterPipelineEvent) ProtoMessage() {}

func (x *AfterPipelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfterPipelineEvent.ProtoReflect.Descriptor instead.
func (*AfterPipelineEvent) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{48}
}

func (x *AfterPipelineEvent) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *AfterPipelineEvent) GetState() AfterPipeline_State {
	if x != nil {
		return x.State
	}
	return AfterPipeline_WAITING
}

func (x *AfterPipelineEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ScheduleRequest_Repo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Owner         string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	RepoName      string                 `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	BranchName    string                 `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CommitSha     string                 `protobuf:"bytes,5,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleRequest_Repo) Reset() {
	*x = ScheduleRequest_Repo{}
	mi := &file_plumber_pipeline_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleRequest_Repo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest_Repo) ProtoMessage() {}

func (x *ScheduleRequest_Repo) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest_Repo.ProtoReflect.Descriptor instead.
func (*ScheduleRequest_Repo) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ScheduleRequest_Repo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ScheduleRequest_Repo) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ScheduleRequest_Repo) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ScheduleRequest_Repo) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

type ScheduleRequest_Auth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret  string                 `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	AccessToken   string                 `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleRequest_Auth) Reset() {
	*x = ScheduleRequest_Auth{}
	mi := &file_plumber_pipeline_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleRequest_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest_Auth) ProtoMessage() {}

func (x *ScheduleRequest_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest_Auth.ProtoReflect.Descriptor instead.
func (*ScheduleRequest_Auth) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ScheduleRequest_Auth) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ScheduleRequest_Auth) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ScheduleRequest_Auth) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// Job started within block
// Attributes:
// - name   = Job name
// - index  = Position in which it is definied in definition file within block
// - job_id = Job unique identifier wthin build system
// - status = Received from Build API
// - result = Received from Build API
type Block_Job struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Index         uint32                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	JobId         string                 `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Result        string                 `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block_Job) Reset() {
	*x = Block_Job{}
	mi := &file_plumber_pipeline_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block_Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Job) ProtoMessage() {}

func (x *Block_Job) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Job.ProtoReflect.Descriptor instead.
func (*Block_Job) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Block_Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Block_Job) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Block_Job) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Block_Job) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Block_Job) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// Block topology description
// Fields:
//   - name = [required] The name of the Block
//   - jobs = [required] The job names within the Block
//   - dependencies = [required] List of block names, this block depends on.
//     All listed blocks have to transition to done-passed
//     before this block can be scheduled.
type DescribeTopologyResponse_Block struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Jobs          []string               `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
	Dependencies  []string               `protobuf:"bytes,3,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeTopologyResponse_Block) Reset() {
	*x = DescribeTopologyResponse_Block{}
	mi := &file_plumber_pipeline_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeTopologyResponse_Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopologyResponse_Block) ProtoMessage() {}

func (x *DescribeTopologyResponse_Block) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopologyResponse_Block.ProtoReflect.Descriptor instead.
func (*DescribeTopologyResponse_Block) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DescribeTopologyResponse_Block) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeTopologyResponse_Block) GetJobs() []string {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *DescribeTopologyResponse_Block) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type DescribeTopologyResponse_AfterPipeline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Jobs          []string               `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeTopologyResponse_AfterPipeline) Reset() {
	*x = DescribeTopologyResponse_AfterPipeline{}
	mi := &file_plumber_pipeline_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeTopologyResponse_AfterPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopologyResponse_AfterPipeline) ProtoMessage() {}

func (x *DescribeTopologyResponse_AfterPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopologyResponse_AfterPipeline.ProtoReflect.Descriptor instead.
func (*DescribeTopologyResponse_AfterPipeline) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{8, 1}
}

func (x *DescribeTopologyResponse_AfterPipeline) GetJobs() []string {
	if x != nil {
		return x.Jobs
	}
	return nil
}

// Job started within block
// Attributes:
//   - name     = [required] Job name
//   - index    = [required] Position in which it is defined in definition file within block
//   - status   = [required] The status of the block from plumber perspective:
//     'pending'   - block is not running, job doesn't exist in Zebra
//     'scheduled' - block is running or done, job state should be read from Zebra
type BlockDetails_JobDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Index         uint32                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockDetails_JobDetails) Reset() {
	*x = BlockDetails_JobDetails{}
	mi := &file_plumber_pipeline_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockDetails_JobDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDetails_JobDetails) ProtoMessage() {}

func (x *BlockDetails_JobDetails) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_pipeline_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDetails_JobDetails.ProtoReflect.Descriptor instead.
func (*BlockDetails_JobDetails) Descriptor() ([]byte, []int) {
	return file_plumber_pipeline_proto_rawDescGZIP(), []int{28, 0}
}

func (x *BlockDetails_JobDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockDetails_JobDetails) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BlockDetails_JobDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_plumber_pipeline_proto protoreflect.FileDescriptor

const file_plumber_pipeline_proto_rawDesc = "" +
	"\n" +
	"\x16plumber.pipeline.proto\x12\x13InternalApi.Plumber\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1aplumber_w_f.workflow.proto\x1a\n" +
	"user.proto\"\xbc\x05\n" +
	"\x0fScheduleRequest\x12J\n" +
	"\aservice\x18\x02 \x01(\x0e20.InternalApi.Plumber.ScheduleRequest.ServiceTypeR\aservice\x12=\n" +
	"\x04repo\x18\x03 \x01(\v2).InternalApi.Plumber.ScheduleRequest.RepoR\x04repo\x12=\n" +
	"\x04auth\x18\x04 \x01(\v2).InternalApi.Plumber.ScheduleRequest.AuthR\x04auth\x12\x1d\n" +
	"\n" +
	"project_id\x18\x06 \x01(\tR\tprojectId\x12\x1b\n" +
	"\tbranch_id\x18\a \x01(\tR\bbranchId\x12\x17\n" +
	"\ahook_id\x18\b \x01(\tR\x06hookId\x12#\n" +
	"\rrequest_token\x18\t \x01(\tR\frequestToken\x12\x1f\n" +
	"\vsnapshot_id\x18\n" +
	" \x01(\tR\n" +
	"snapshotId\x12'\n" +
	"\x0fdefinition_file\x18\v \x01(\tR\x0edefinitionFile\x1ay\n" +
	"\x04Repo\x12\x14\n" +
	"\x05owner\x18\x01 \x01(\tR\x05owner\x12\x1b\n" +
	"\trepo_name\x18\x02 \x01(\tR\brepoName\x12\x1f\n" +
	"\vbranch_name\x18\x04 \x01(\tR\n" +
	"branchName\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x05 \x01(\tR\tcommitSha\x1ak\n" +
	"\x04Auth\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12#\n" +
	"\rclient_secret\x18\x02 \x01(\tR\fclientSecret\x12!\n" +
	"\faccess_token\x18\x03 \x01(\tR\vaccessToken\"3\n" +
	"\vServiceType\x12\v\n" +
	"\aGIT_HUB\x10\x00\x12\t\n" +
	"\x05LOCAL\x10\x01\x12\f\n" +
	"\bSNAPSHOT\x10\x02\"w\n" +
	"\x10ScheduleResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\x12\x15\n" +
	"\x06ppl_id\x18\x02 \x01(\tR\x05pplId\"D\n" +
	"\x0fDescribeRequest\x12\x15\n" +
	"\x06ppl_id\x18\x01 \x01(\tR\x05pplId\x12\x1a\n" +
	"\bdetailed\x18\x02 \x01(\bR\bdetailed\"\xcf\x01\n" +
	"\x10DescribeResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\x129\n" +
	"\bpipeline\x18\x03 \x01(\v2\x1d.InternalApi.Plumber.PipelineR\bpipeline\x122\n" +
	"\x06blocks\x18\x04 \x03(\v2\x1a.InternalApi.Plumber.BlockR\x06blocks\"\x90\x06\n" +
	"\x05Block\x12\x19\n" +
	"\bblock_id\x18\x01 \x01(\tR\ablockId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\fbuild_req_id\x18\x03 \x01(\tR\n" +
	"buildReqId\x126\n" +
	"\x05state\x18\x04 \x01(\x0e2 .InternalApi.Plumber.Block.StateR\x05state\x129\n" +
	"\x06result\x18\x05 \x01(\x0e2!.InternalApi.Plumber.Block.ResultR\x06result\x12L\n" +
	"\rresult_reason\x18\x06 \x01(\x0e2'.InternalApi.Plumber.Block.ResultReasonR\fresultReason\x12+\n" +
	"\x11error_description\x18\a \x01(\tR\x10errorDescription\x122\n" +
	"\x04jobs\x18\b \x03(\v2\x1e.InternalApi.Plumber.Block.JobR\x04jobs\x1av\n" +
	"\x03Job\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05index\x18\x02 \x01(\rR\x05index\x12\x15\n" +
	"\x06job_id\x18\x03 \x01(\tR\x05jobId\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\x12\x16\n" +
	"\x06result\x18\x05 \x01(\tR\x06result\"K\n" +
	"\x05State\x12\v\n" +
	"\aWAITING\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\f\n" +
	"\bSTOPPING\x10\x02\x12\b\n" +
	"\x04DONE\x10\x03\x12\x10\n" +
	"\fINITIALIZING\x10\x04\";\n" +
	"\x06Result\x12\n" +
	"\n" +
	"\x06PASSED\x10\x00\x12\v\n" +
	"\aSTOPPED\x10\x01\x12\f\n" +
	"\bCANCELED\x10\x02\x12\n" +
	"\n" +
	"\x06FAILED\x10\x03\"\x91\x01\n" +
	"\fResultReason\x12\b\n" +
	"\x04TEST\x10\x00\x12\r\n" +
	"\tMALFORMED\x10\x01\x12\t\n" +
	"\x05STUCK\x10\x02\x12\b\n" +
	"\x04USER\x10\x03\x12\f\n" +
	"\bINTERNAL\x10\x04\x12\f\n" +
	"\bSTRATEGY\x10\x05\x12\x10\n" +
	"\fFAST_FAILING\x10\x06\x12\v\n" +
	"\aDELETED\x10\a\x12\v\n" +
	"\aTIMEOUT\x10\b\x12\v\n" +
	"\aSKIPPED\x10\t\".\n" +
	"\x13DescribeManyRequest\x12\x17\n" +
	"\appl_ids\x18\x01 \x03(\tR\x06pplIds\"\xa1\x01\n" +
	"\x14DescribeManyResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\x12;\n" +
	"\tpipelines\x18\x02 \x03(\v2\x1d.InternalApi.Plumber.PipelineR\tpipelines\"0\n" +
	"\x17DescribeTopologyRequest\x12\x15\n" +
	"\x06ppl_id\x18\x01 \x01(\tR\x05pplId\"\x82\x03\n" +
	"\x18DescribeTopologyResponse\x12;\n" +
	"\x06status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x06status\x12K\n" +
	"\x06blocks\x18\x02 \x03(\v23.InternalApi.Plumber.DescribeTopologyResponse.BlockR\x06blocks\x12b\n" +
	"\x0eafter_pipeline\x18\x03 \x01(\v2;.InternalApi.Plumber.DescribeTopologyResponse.AfterPipelineR\rafterPipeline\x1aS\n" +
	"\x05Block\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04jobs\x18\x02 \x03(\tR\x04jobs\x12\"\n" +
	"\fdependencies\x18\x03 \x03(\tR\fdependencies\x1a#\n" +
	"\rAfterPipeline\x12\x12\n" +
	"\x04jobs\x18\x01 \x03(\tR\x04jobs\"L\n" +
	"\x10TerminateRequest\x12\x15\n" +
	"\x06ppl_id\x18\x01 \x01(\tR\x05pplId\x12!\n" +
	"\frequester_id\x18\x02 \x01(\tR\vrequesterId\"a\n" +
	"\x11TerminateResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\"\xcd\x01\n" +
	"\x11ListQueuesRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12'\n" +
	"\x0forganization_id\x18\x04 \x01(\tR\x0eorganizationId\x12?\n" +
	"\vqueue_types\x18\x05 \x03(\x0e2\x1e.InternalApi.Plumber.QueueTypeR\n" +
	"queueTypes\"\x9a\x02\n" +
	"\x12ListQueuesResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\x122\n" +
	"\x06queues\x18\x02 \x03(\v2\x1a.InternalApi.Plumber.QueueR\x06queues\x12\x1f\n" +
	"\vpage_number\x18\x03 \x01(\x05R\n" +
	"pageNumber\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12#\n" +
	"\rtotal_entries\x18\x05 \x01(\x05R\ftotalEntries\x12\x1f\n" +
	"\vtotal_pages\x18\x06 \x01(\x05R\n" +
	"totalPages\"\xcc\x01\n" +
	"\x12ListGroupedRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12'\n" +
	"\x0forganization_id\x18\x04 \x01(\tR\x0eorganizationId\x12=\n" +
	"\n" +
	"queue_type\x18\x05 \x03(\x0e2\x1e.InternalApi.Plumber.QueueTypeR\tqueueType\"\xa4\x02\n" +
	"\x13ListGroupedResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\x12;\n" +
	"\tpipelines\x18\x02 \x03(\v2\x1d.InternalApi.Plumber.PipelineR\tpipelines\x12\x1f\n" +
	"\vpage_number\x18\x03 \x01(\x05R\n" +
	"pageNumber\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12#\n" +
	"\rtotal_entries\x18\x05 \x01(\x05R\ftotalEntries\x12\x1f\n" +
	"\vtotal_pages\x18\x06 \x01(\x05R\n" +
	"totalPages\"\xc6\x06\n" +
	"\x11ListKeysetRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12B\n" +
	"\x05order\x18\x03 \x01(\x0e2,.InternalApi.Plumber.ListKeysetRequest.OrderR\x05order\x12N\n" +
	"\tdirection\x18\x04 \x01(\x0e20.InternalApi.Plumber.ListKeysetRequest.DirectionR\tdirection\x12\x1d\n" +
	"\n" +
	"project_id\x18\x05 \x01(\tR\tprojectId\x12\"\n" +
	"\ryml_file_path\x18\x06 \x01(\tR\vymlFilePath\x12\x13\n" +
	"\x05wf_id\x18\a \x01(\tR\x04wfId\x12A\n" +
	"\x0ecreated_before\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\rcreatedBefore\x12?\n" +
	"\rcreated_after\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\fcreatedAfter\x12;\n" +
	"\vdone_before\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"doneBefore\x129\n" +
	"\n" +
	"done_after\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tdoneAfter\x12\x14\n" +
	"\x05label\x18\f \x01(\tR\x05label\x12C\n" +
	"\rgit_ref_types\x18\r \x03(\x0e2\x1f.InternalApi.Plumber.GitRefTypeR\vgitRefTypes\x12\x19\n" +
	"\bqueue_id\x18\x0e \x01(\tR\aqueueId\x12$\n" +
	"\x0epr_head_branch\x18\x0f \x01(\tR\fprHeadBranch\x12(\n" +
	"\x10pr_target_branch\x18\x10 \x01(\tR\x0eprTargetBranch\"\"\n" +
	"\x05Order\x12\x19\n" +
	"\x15BY_CREATION_TIME_DESC\x10\x00\"#\n" +
	"\tDirection\x12\b\n" +
	"\x04NEXT\x10\x00\x12\f\n" +
	"\bPREVIOUS\x10\x01\"\xa9\x01\n" +
	"\x12ListKeysetResponse\x12;\n" +
	"\tpipelines\x18\x01 \x03(\v2\x1d.InternalApi.Plumber.PipelineR\tpipelines\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12.\n" +
	"\x13previous_page_token\x18\x03 \x01(\tR\x11previousPageToken\"\xf9\x04\n" +
	"\vListRequest\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12\x1f\n" +
	"\vbranch_name\x18\x02 \x01(\tR\n" +
	"branchName\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\"\n" +
	"\ryml_file_path\x18\x05 \x01(\tR\vymlFilePath\x12\x13\n" +
	"\x05wf_id\x18\x06 \x01(\tR\x04wfId\x12A\n" +
	"\x0ecreated_before\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\rcreatedBefore\x12?\n" +
	"\rcreated_after\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\fcreatedAfter\x12;\n" +
	"\vdone_before\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"doneBefore\x129\n" +
	"\n" +
	"done_after\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tdoneAfter\x12\x14\n" +
	"\x05label\x18\v \x01(\tR\x05label\x12C\n" +
	"\rgit_ref_types\x18\f \x03(\x0e2\x1f.InternalApi.Plumber.GitRefTypeR\vgitRefTypes\x12\x19\n" +
	"\bqueue_id\x18\r \x01(\tR\aqueueId\x12$\n" +
	"\x0epr_head_branch\x18\x0e \x01(\tR\fprHeadBranch\x12(\n" +
	"\x10pr_target_branch\x18\x0f \x01(\tR\x0eprTargetBranch\"\x9d\x02\n" +
	"\fListResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\x12;\n" +
	"\tpipelines\x18\x02 \x03(\v2\x1d.InternalApi.Plumber.PipelineR\tpipelines\x12\x1f\n" +
	"\vpage_number\x18\x03 \x01(\x05R\n" +
	"pageNumber\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12#\n" +
	"\rtotal_entries\x18\x05 \x01(\x05R\ftotalEntries\x12\x1f\n" +
	"\vtotal_pages\x18\x06 \x01(\x05R\n" +
	"totalPages\"\xc8\x01\n" +
	"\x05Queue\x12\x19\n" +
	"\bqueue_id\x18\x01 \x01(\tR\aqueueId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05scope\x18\x03 \x01(\tR\x05scope\x12\x1d\n" +
	"\n" +
	"project_id\x18\x04 \x01(\tR\tprojectId\x12'\n" +
	"\x0forganization_id\x18\x05 \x01(\tR\x0eorganizationId\x122\n" +
	"\x04type\x18\x06 \x01(\x0e2\x1e.InternalApi.Plumber.QueueTypeR\x04type\"\xc6\x0e\n" +
	"\bPipeline\x12\x15\n" +
	"\x06ppl_id\x18\x01 \x01(\tR\x05pplId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12\x1f\n" +
	"\vbranch_name\x18\x04 \x01(\tR\n" +
	"branchName\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x05 \x01(\tR\tcommitSha\x129\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"pending_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tpendingAt\x129\n" +
	"\n" +
	"queuing_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tqueuingAt\x129\n" +
	"\n" +
	"running_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\trunningAt\x12;\n" +
	"\vstopping_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"stoppingAt\x123\n" +
	"\adone_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\x06doneAt\x129\n" +
	"\x05state\x18\f \x01(\x0e2#.InternalApi.Plumber.Pipeline.StateR\x05state\x12<\n" +
	"\x06result\x18\r \x01(\x0e2$.InternalApi.Plumber.Pipeline.ResultR\x06result\x12O\n" +
	"\rresult_reason\x18\x0e \x01(\x0e2*.InternalApi.Plumber.Pipeline.ResultReasonR\fresultReason\x12+\n" +
	"\x11terminate_request\x18\x0f \x01(\tR\x10terminateRequest\x12\x17\n" +
	"\ahook_id\x18\x10 \x01(\tR\x06hookId\x12\x1b\n" +
	"\tbranch_id\x18\x11 \x01(\tR\bbranchId\x12+\n" +
	"\x11error_description\x18\x12 \x01(\tR\x10errorDescription\x12\x1b\n" +
	"\tswitch_id\x18\x13 \x01(\tR\bswitchId\x12+\n" +
	"\x11working_directory\x18\x14 \x01(\tR\x10workingDirectory\x12$\n" +
	"\x0eyaml_file_name\x18\x15 \x01(\tR\fyamlFileName\x12#\n" +
	"\rterminated_by\x18\x16 \x01(\tR\fterminatedBy\x12\x13\n" +
	"\x05wf_id\x18\x17 \x01(\tR\x04wfId\x12\x1f\n" +
	"\vsnapshot_id\x18\x18 \x01(\tR\n" +
	"snapshotId\x120\n" +
	"\x05queue\x18\x19 \x01(\v2\x1a.InternalApi.Plumber.QueueR\x05queue\x12!\n" +
	"\fpromotion_of\x18\x1a \x01(\tR\vpromotionOf\x12(\n" +
	"\x10partial_rerun_of\x18\x1b \x01(\tR\x0epartialRerunOf\x12%\n" +
	"\x0ecommit_message\x18\x1c \x01(\tR\rcommitMessage\x12,\n" +
	"\x12partially_rerun_by\x18\x1d \x01(\tR\x10partiallyRerunBy\x12&\n" +
	"\x0fcompile_task_id\x18\x1e \x01(\tR\rcompileTaskId\x12&\n" +
	"\x0fwith_after_task\x18\x1f \x01(\bR\rwithAfterTask\x12\"\n" +
	"\rafter_task_id\x18  \x01(\tR\vafterTaskId\x12#\n" +
	"\rrepository_id\x18! \x01(\tR\frepositoryId\x12;\n" +
	"\benv_vars\x18\" \x03(\v2 .InternalApi.Plumber.EnvVariableR\aenvVars\x12<\n" +
	"\ttriggerer\x18# \x01(\v2\x1e.InternalApi.Plumber.TriggererR\ttriggerer\x12'\n" +
	"\x0forganization_id\x18$ \x01(\tR\x0eorganizationId\"X\n" +
	"\x05State\x12\x10\n" +
	"\fINITIALIZING\x10\x00\x12\v\n" +
	"\aPENDING\x10\x01\x12\v\n" +
	"\aQUEUING\x10\x02\x12\v\n" +
	"\aRUNNING\x10\x03\x12\f\n" +
	"\bSTOPPING\x10\x04\x12\b\n" +
	"\x04DONE\x10\x05\";\n" +
	"\x06Result\x12\n" +
	"\n" +
	"\x06PASSED\x10\x00\x12\v\n" +
	"\aSTOPPED\x10\x01\x12\f\n" +
	"\bCANCELED\x10\x02\x12\n" +
	"\n" +
	"\x06FAILED\x10\x03\"\x84\x01\n" +
	"\fResultReason\x12\b\n" +
	"\x04TEST\x10\x00\x12\r\n" +
	"\tMALFORMED\x10\x01\x12\t\n" +
	"\x05STUCK\x10\x02\x12\b\n" +
	"\x04USER\x10\x03\x12\f\n" +
	"\bINTERNAL\x10\x04\x12\f\n" +
	"\bSTRATEGY\x10\x05\x12\x10\n" +
	"\fFAST_FAILING\x10\x06\x12\v\n" +
	"\aDELETED\x10\a\x12\v\n" +
	"\aTIMEOUT\x10\b\"\xc0\x04\n" +
	"\tTriggerer\x12J\n" +
	"\x0fwf_triggered_by\x18\x01 \x01(\x0e2\".InternalApi.PlumberWF.TriggeredByR\rwfTriggeredBy\x12&\n" +
	"\x0fwf_triggerer_id\x18\x02 \x01(\tR\rwfTriggererId\x12/\n" +
	"\x14wf_triggerer_user_id\x18\x03 \x01(\tR\x11wfTriggererUserId\x12=\n" +
	"\x1bwf_triggerer_provider_login\x18\x04 \x01(\tR\x18wfTriggererProviderLogin\x129\n" +
	"\x19wf_triggerer_provider_uid\x18\x05 \x01(\tR\x16wfTriggererProviderUid\x12?\n" +
	"\x1cwf_triggerer_provider_avatar\x18\x06 \x01(\tR\x19wfTriggererProviderAvatar\x12J\n" +
	"\x10ppl_triggered_by\x18\a \x01(\x0e2 .InternalApi.Plumber.TriggeredByR\x0epplTriggeredBy\x12(\n" +
	"\x10ppl_triggerer_id\x18\b \x01(\tR\x0epplTriggererId\x121\n" +
	"\x15ppl_triggerer_user_id\x18\t \x01(\tR\x12pplTriggererUserId\x12*\n" +
	"\x11workflow_rerun_of\x18\n" +
	" \x01(\tR\x0fworkflowRerunOf\"\xdb\x02\n" +
	"\x13ListActivityRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12D\n" +
	"\x05order\x18\x03 \x01(\x0e2..InternalApi.Plumber.ListActivityRequest.OrderR\x05order\x12'\n" +
	"\x0forganization_id\x18\x04 \x01(\tR\x0eorganizationId\x12P\n" +
	"\tdirection\x18\x05 \x01(\x0e22.InternalApi.Plumber.ListActivityRequest.DirectionR\tdirection\"\"\n" +
	"\x05Order\x12\x19\n" +
	"\x15BY_CREATION_TIME_DESC\x10\x00\"#\n" +
	"\tDirection\x12\b\n" +
	"\x04NEXT\x10\x00\x12\f\n" +
	"\bPREVIOUS\x10\x01\"\xb1\x01\n" +
	"\x14ListActivityResponse\x12&\n" +
	"\x0fnext_page_token\x18\x01 \x01(\tR\rnextPageToken\x12.\n" +
	"\x13previous_page_token\x18\x02 \x01(\tR\x11previousPageToken\x12A\n" +
	"\tpipelines\x18\x03 \x03(\v2#.InternalApi.Plumber.ActivePipelineR\tpipelines\"\x86\x02\n" +
	"\x15ListRequestersRequest\x12'\n" +
	"\x0forganization_id\x18\x01 \x01(\tR\x0eorganizationId\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12B\n" +
	"\x0frequested_at_gt\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\rrequestedAtGt\x12D\n" +
	"\x10requested_at_lte\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x0erequestedAtLte\"\x80\x01\n" +
	"\x16ListRequestersResponse\x12>\n" +
	"\n" +
	"requesters\x18\x01 \x03(\v2\x1e.InternalApi.Plumber.RequesterR\n" +
	"requesters\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x95\x03\n" +
	"\tRequester\x12'\n" +
	"\x0forganization_id\x18\x01 \x01(\tR\x0eorganizationId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12\x15\n" +
	"\x06ppl_id\x18\x03 \x01(\tR\x05pplId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12%\n" +
	"\x0eprovider_login\x18\x05 \x01(\tR\rproviderLogin\x12!\n" +
	"\fprovider_uid\x18\x06 \x01(\tR\vproviderUid\x12E\n" +
	"\bprovider\x18\a \x01(\x0e2).InternalApi.User.RepositoryProvider.TypeR\bprovider\x12@\n" +
	"\ttriggerer\x18\b \x01(\x0e2\".InternalApi.PlumberWF.TriggeredByR\ttriggerer\x12=\n" +
	"\frequested_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\vrequestedAt\"\xa0\n" +
	"\n" +
	"\x0eActivePipeline\x12'\n" +
	"\x0forganization_id\x18\x01 \x01(\tR\x0eorganizationId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12\x13\n" +
	"\x05wf_id\x18\x03 \x01(\tR\x04wfId\x12\x1b\n" +
	"\twf_number\x18\x04 \x01(\rR\bwfNumber\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\x15\n" +
	"\x06ppl_id\x18\x06 \x01(\tR\x05pplId\x12\x17\n" +
	"\ahook_id\x18\a \x01(\tR\x06hookId\x12\x1b\n" +
	"\tswitch_id\x18\b \x01(\tR\bswitchId\x12'\n" +
	"\x0fdefinition_file\x18\t \x01(\tR\x0edefinitionFile\x12\x1a\n" +
	"\bpriority\x18\n" +
	" \x01(\rR\bpriority\x12J\n" +
	"\x0fwf_triggered_by\x18\v \x01(\x0e2\".InternalApi.PlumberWF.TriggeredByR\rwfTriggeredBy\x12!\n" +
	"\frequester_id\x18\f \x01(\tR\vrequesterId\x12(\n" +
	"\x10partial_rerun_of\x18\r \x01(\tR\x0epartialRerunOf\x12!\n" +
	"\fpromotion_of\x18\x0e \x01(\tR\vpromotionOf\x12\x1f\n" +
	"\vpromoter_id\x18\x0f \x01(\tR\n" +
	"promoterId\x12#\n" +
	"\rauto_promoted\x18\x10 \x01(\bR\fautoPromoted\x12\x17\n" +
	"\agit_ref\x18\x11 \x01(\tR\x06gitRef\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x12 \x01(\tR\tcommitSha\x12\x1b\n" +
	"\tbranch_id\x18\x13 \x01(\tR\bbranchId\x129\n" +
	"\n" +
	"created_at\x18\x14 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"pending_at\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\tpendingAt\x129\n" +
	"\n" +
	"queuing_at\x18\x16 \x01(\v2\x1a.google.protobuf.TimestampR\tqueuingAt\x129\n" +
	"\n" +
	"running_at\x18\x17 \x01(\v2\x1a.google.protobuf.TimestampR\trunningAt\x120\n" +
	"\x05queue\x18\x18 \x01(\v2\x1a.InternalApi.Plumber.QueueR\x05queue\x129\n" +
	"\x06blocks\x18\x19 \x03(\v2!.InternalApi.Plumber.BlockDetailsR\x06blocks\x129\n" +
	"\x05state\x18\x1a \x01(\x0e2#.InternalApi.Plumber.Pipeline.StateR\x05state\x12A\n" +
	"\fgit_ref_type\x18\x1b \x01(\x0e2\x1f.InternalApi.Plumber.GitRefTypeR\n" +
	"gitRefType\x12%\n" +
	"\x0ecommit_message\x18\x1c \x01(\tR\rcommitMessage\x12+\n" +
	"\x11commiter_username\x18\x1d \x01(\tR\x10commiterUsername\x12.\n" +
	"\x13commiter_avatar_url\x18\x1e \x01(\tR\x11commiterAvatarUrl\x12<\n" +
	"\ttriggerer\x18\x1f \x01(\v2\x1e.InternalApi.Plumber.TriggererR\ttriggerer\"\xfd\x03\n" +
	"\fBlockDetails\x12\x19\n" +
	"\bblock_id\x18\x01 \x01(\tR\ablockId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bpriority\x18\x03 \x01(\rR\bpriority\x12\"\n" +
	"\fdependencies\x18\x04 \x03(\tR\fdependencies\x126\n" +
	"\x05state\x18\x05 \x01(\x0e2 .InternalApi.Plumber.Block.StateR\x05state\x129\n" +
	"\x06result\x18\x06 \x01(\x0e2!.InternalApi.Plumber.Block.ResultR\x06result\x12L\n" +
	"\rresult_reason\x18\a \x01(\x0e2'.InternalApi.Plumber.Block.ResultReasonR\fresultReason\x12+\n" +
	"\x11error_description\x18\b \x01(\tR\x10errorDescription\x12@\n" +
	"\x04jobs\x18\t \x03(\v2,.InternalApi.Plumber.BlockDetails.JobDetailsR\x04jobs\x1aN\n" +
	"\n" +
	"JobDetails\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05index\x18\x02 \x01(\rR\x05index\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\"\xe2\x01\n" +
	"\rRunNowRequest\x12!\n" +
	"\frequester_id\x18\x01 \x01(\tR\vrequesterId\x12;\n" +
	"\x04type\x18\x02 \x01(\x0e2'.InternalApi.Plumber.RunNowRequest.TypeR\x04type\x12\x15\n" +
	"\x06ppl_id\x18\x03 \x01(\tR\x05pplId\x12\x19\n" +
	"\bblock_id\x18\x04 \x01(\tR\ablockId\x12\x15\n" +
	"\x06job_id\x18\x05 \x01(\tR\x05jobId\"(\n" +
	"\x04Type\x12\f\n" +
	"\bPIPELINE\x10\x00\x12\t\n" +
	"\x05BLOCK\x10\x01\x12\a\n" +
	"\x03JOB\x10\x02\"\x10\n" +
	"\x0eRunNowResponse\",\n" +
	"\x13GetProjectIdRequest\x12\x15\n" +
	"\x06ppl_id\x18\x01 \x01(\tR\x05pplId\"\x83\x01\n" +
	"\x14GetProjectIdResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\"U\n" +
	"\x13ValidateYamlRequest\x12'\n" +
	"\x0fyaml_definition\x18\x01 \x01(\tR\x0eyamlDefinition\x12\x15\n" +
	"\x06ppl_id\x18\x02 \x01(\tR\x05pplId\"{\n" +
	"\x14ValidateYamlResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\x12\x15\n" +
	"\x06ppl_id\x18\x02 \x01(\tR\x05pplId\"\x88\x03\n" +
	"\x18ScheduleExtensionRequest\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x15\n" +
	"\x06ppl_id\x18\x02 \x01(\tR\x05pplId\x12#\n" +
	"\rrequest_token\x18\x03 \x01(\tR\frequestToken\x12E\n" +
	"\renv_variables\x18\x04 \x03(\v2 .InternalApi.Plumber.EnvVariableR\fenvVariables\x121\n" +
	"\x15prev_ppl_artefact_ids\x18\x06 \x03(\tR\x12prevPplArtefactIds\x12\x1f\n" +
	"\vpromoted_by\x18\a \x01(\tR\n" +
	"promotedBy\x12#\n" +
	"\rauto_promoted\x18\b \x01(\bR\fautoPromoted\x12!\n" +
	"\fsecret_names\x18\t \x03(\tR\vsecretNames\x120\n" +
	"\x14deployment_target_id\x18\n" +
	" \x01(\tR\x12deploymentTargetId\"7\n" +
	"\vEnvVariable\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\x80\x01\n" +
	"\x19ScheduleExtensionResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\x12\x15\n" +
	"\x06ppl_id\x18\x02 \x01(\tR\x05pplId\"L\n" +
	"\rDeleteRequest\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12\x1c\n" +
	"\trequester\x18\x03 \x01(\tR\trequester\"M\n" +
	"\x0eDeleteResponse\x12;\n" +
	"\x06status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x06status\"l\n" +
	"\x15PartialRebuildRequest\x12\x15\n" +
	"\x06ppl_id\x18\x01 \x01(\tR\x05pplId\x12#\n" +
	"\rrequest_token\x18\x02 \x01(\tR\frequestToken\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\"}\n" +
	"\x16PartialRebuildResponse\x12L\n" +
	"\x0fresponse_status\x18\x01 \x01(\v2#.InternalApi.Plumber.ResponseStatusR\x0eresponseStatus\x12\x15\n" +
	"\x06ppl_id\x18\x02 \x01(\tR\x05pplId\"\x10\n" +
	"\x0eVersionRequest\"+\n" +
	"\x0fVersionResponse\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\"\xb8\x01\n" +
	"\x0eResponseStatus\x12D\n" +
	"\x04code\x18\x01 \x01(\x0e20.InternalApi.Plumber.ResponseStatus.ResponseCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"F\n" +
	"\fResponseCode\x12\x06\n" +
	"\x02OK\x10\x00\x12\r\n" +
	"\tBAD_PARAM\x10\x01\x12\x12\n" +
	"\x0eLIMIT_EXCEEDED\x10\x02\x12\v\n" +
	"\aREFUSED\x10\x03\"\xa5\x01\n" +
	"\rPipelineEvent\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x129\n" +
	"\x05state\x18\x02 \x01(\x0e2#.InternalApi.Plumber.Pipeline.StateR\x05state\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\xc2\x01\n" +
	"\x12PipelineBlockEvent\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12\x19\n" +
	"\bblock_id\x18\x02 \x01(\tR\ablockId\x126\n" +
	"\x05state\x18\x03 \x01(\x0e2 .InternalApi.Plumber.Block.StateR\x05state\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\xd2\x03\n" +
	"\rAfterPipeline\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12>\n" +
	"\x05state\x18\x02 \x01(\x0e2(.InternalApi.Plumber.AfterPipeline.StateR\x05state\x12A\n" +
	"\x06result\x18\x03 \x01(\x0e2).InternalApi.Plumber.AfterPipeline.ResultR\x06result\x12T\n" +
	"\rresult_reason\x18\x04 \x01(\x0e2/.InternalApi.Plumber.AfterPipeline.ResultReasonR\fresultReason\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"8\n" +
	"\x05State\x12\v\n" +
	"\aWAITING\x10\x00\x12\v\n" +
	"\aPENDING\x10\x01\x12\v\n" +
	"\aRUNNING\x10\x02\x12\b\n" +
	"\x04DONE\x10\x03\"-\n" +
	"\x06Result\x12\n" +
	"\n" +
	"\x06PASSED\x10\x00\x12\v\n" +
	"\aSTOPPED\x10\x01\x12\n" +
	"\n" +
	"\x06FAILED\x10\x02\"#\n" +
	"\fResultReason\x12\b\n" +
	"\x04TEST\x10\x00\x12\t\n" +
	"\x05STUCK\x10\x01\"\xaf\x01\n" +
	"\x12AfterPipelineEvent\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12>\n" +
	"\x05state\x18\x02 \x01(\x0e2(.InternalApi.Plumber.AfterPipeline.StateR\x05state\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp*-\n" +
	"\tQueueType\x12\f\n" +
	"\bIMPLICIT\x10\x00\x12\x12\n" +
	"\x0eUSER_GENERATED\x10\x01*)\n" +
	"\n" +
	"GitRefType\x12\n" +
	"\n" +
	"\x06BRANCH\x10\x00\x12\a\n" +
	"\x03TAG\x10\x01\x12\x06\n" +
	"\x02PR\x10\x02*R\n" +
	"\vTriggeredBy\x12\f\n" +
	"\bWORKFLOW\x10\x00\x12\r\n" +
	"\tPROMOTION\x10\x01\x12\x12\n" +
	"\x0eAUTO_PROMOTION\x10\x02\x12\x12\n" +
	"\x0ePARTIAL_RE_RUN\x10\x032\xd7\r\n" +
	"\x0fPipelineService\x12W\n" +
	"\bSchedule\x12$.InternalApi.Plumber.ScheduleRequest\x1a%.InternalApi.Plumber.ScheduleResponse\x12W\n" +
	"\bDescribe\x12$.InternalApi.Plumber.DescribeRequest\x1a%.InternalApi.Plumber.DescribeResponse\x12c\n" +
	"\fDescribeMany\x12(.InternalApi.Plumber.DescribeManyRequest\x1a).InternalApi.Plumber.DescribeManyResponse\x12o\n" +
	"\x10DescribeTopology\x12,.InternalApi.Plumber.DescribeTopologyRequest\x1a-.InternalApi.Plumber.DescribeTopologyResponse\x12Z\n" +
	"\tTerminate\x12%.InternalApi.Plumber.TerminateRequest\x1a&.InternalApi.Plumber.TerminateResponse\x12]\n" +
	"\n" +
	"ListKeyset\x12&.InternalApi.Plumber.ListKeysetRequest\x1a'.InternalApi.Plumber.ListKeysetResponse\x12K\n" +
	"\x04List\x12 .InternalApi.Plumber.ListRequest\x1a!.InternalApi.Plumber.ListResponse\x12`\n" +
	"\vListGrouped\x12'.InternalApi.Plumber.ListGroupedRequest\x1a(.InternalApi.Plumber.ListGroupedResponse\x12]\n" +
	"\n" +
	"ListQueues\x12&.InternalApi.Plumber.ListQueuesRequest\x1a'.InternalApi.Plumber.ListQueuesResponse\x12c\n" +
	"\fListActivity\x12(.InternalApi.Plumber.ListActivityRequest\x1a).InternalApi.Plumber.ListActivityResponse\x12i\n" +
	"\x0eListRequesters\x12*.InternalApi.Plumber.ListRequestersRequest\x1a+.InternalApi.Plumber.ListRequestersResponse\x12Q\n" +
	"\x06RunNow\x12\".InternalApi.Plumber.RunNowRequest\x1a#.InternalApi.Plumber.RunNowResponse\x12c\n" +
	"\fGetProjectId\x12(.InternalApi.Plumber.GetProjectIdRequest\x1a).InternalApi.Plumber.GetProjectIdResponse\x12c\n" +
	"\fValidateYaml\x12(.InternalApi.Plumber.ValidateYamlRequest\x1a).InternalApi.Plumber.ValidateYamlResponse\x12r\n" +
	"\x11ScheduleExtension\x12-.InternalApi.Plumber.ScheduleExtensionRequest\x1a..InternalApi.Plumber.ScheduleExtensionResponse\x12Q\n" +
	"\x06Delete\x12\".InternalApi.Plumber.DeleteRequest\x1a#.InternalApi.Plumber.DeleteResponse\x12i\n" +
	"\x0ePartialRebuild\x12*.InternalApi.Plumber.PartialRebuildRequest\x1a+.InternalApi.Plumber.PartialRebuildResponse\x12T\n" +
	"\aVersion\x12#.InternalApi.Plumber.VersionRequest\x1a$.InternalApi.Plumber.VersionResponseBKZIgithub.com/superplanehq/superplane/pkg/protos/plumber.pipelineb\x06proto3"

var (
	file_plumber_pipeline_proto_rawDescOnce sync.Once
	file_plumber_pipeline_proto_rawDescData []byte
)

func file_plumber_pipeline_proto_rawDescGZIP() []byte {
	file_plumber_pipeline_proto_rawDescOnce.Do(func() {
		file_plumber_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plumber_pipeline_proto_rawDesc), len(file_plumber_pipeline_proto_rawDesc)))
	})
	return file_plumber_pipeline_proto_rawDescData
}

var file_plumber_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_plumber_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_plumber_pipeline_proto_goTypes = []any{
	(QueueType)(0),                                 // 0: InternalApi.Plumber.QueueType
	(GitRefType)(0),                                // 1: InternalApi.Plumber.GitRefType
	(TriggeredBy)(0),                               // 2: InternalApi.Plumber.TriggeredBy
	(ScheduleRequest_ServiceType)(0),               // 3: InternalApi.Plumber.ScheduleRequest.ServiceType
	(Block_State)(0),                               // 4: InternalApi.Plumber.Block.State
	(Block_Result)(0),                              // 5: InternalApi.Plumber.Block.Result
	(Block_ResultReason)(0),                        // 6: InternalApi.Plumber.Block.ResultReason
	(ListKeysetRequest_Order)(0),                   // 7: InternalApi.Plumber.ListKeysetRequest.Order
	(ListKeysetRequest_Direction)(0),               // 8: InternalApi.Plumber.ListKeysetRequest.Direction
	(Pipeline_State)(0),                            // 9: InternalApi.Plumber.Pipeline.State
	(Pipeline_Result)(0),                           // 10: InternalApi.Plumber.Pipeline.Result
	(Pipeline_ResultReason)(0),                     // 11: InternalApi.Plumber.Pipeline.ResultReason
	(ListActivityRequest_Order)(0),                 // 12: InternalApi.Plumber.ListActivityRequest.Order
	(ListActivityRequest_Direction)(0),             // 13: InternalApi.Plumber.ListActivityRequest.Direction
	(RunNowRequest_Type)(0),                        // 14: InternalApi.Plumber.RunNowRequest.Type
	(ResponseStatus_ResponseCode)(0),               // 15: InternalApi.Plumber.ResponseStatus.ResponseCode
	(AfterPipeline_State)(0),                       // 16: InternalApi.Plumber.AfterPipeline.State
	(AfterPipeline_Result)(0),                      // 17: InternalApi.Plumber.AfterPipeline.Result
	(AfterPipeline_ResultReason)(0),                // 18: InternalApi.Plumber.AfterPipeline.ResultReason
	(*ScheduleRequest)(nil),                        // 19: InternalApi.Plumber.ScheduleRequest
	(*ScheduleResponse)(nil),                       // 20: InternalApi.Plumber.ScheduleResponse
	(*DescribeRequest)(nil),                        // 21: InternalApi.Plumber.DescribeRequest
	(*DescribeResponse)(nil),                       // 22: InternalApi.Plumber.DescribeResponse
	(*Block)(nil),                                  // 23: InternalApi.Plumber.Block
	(*DescribeManyRequest)(nil),                    // 24: InternalApi.Plumber.DescribeManyRequest
	(*DescribeManyResponse)(nil),                   // 25: InternalApi.Plumber.DescribeManyResponse
	(*DescribeTopologyRequest)(nil),                // 26: InternalApi.Plumber.DescribeTopologyRequest
	(*DescribeTopologyResponse)(nil),               // 27: InternalApi.Plumber.DescribeTopologyResponse
	(*TerminateRequest)(nil),                       // 28: InternalApi.Plumber.TerminateRequest
	(*TerminateResponse)(nil),                      // 29: InternalApi.Plumber.TerminateResponse
	(*ListQueuesRequest)(nil),                      // 30: InternalApi.Plumber.ListQueuesRequest
	(*ListQueuesResponse)(nil),                     // 31: InternalApi.Plumber.ListQueuesResponse
	(*ListGroupedRequest)(nil),                     // 32: InternalApi.Plumber.ListGroupedRequest
	(*ListGroupedResponse)(nil),                    // 33: InternalApi.Plumber.ListGroupedResponse
	(*ListKeysetRequest)(nil),                      // 34: InternalApi.Plumber.ListKeysetRequest
	(*ListKeysetResponse)(nil),                     // 35: InternalApi.Plumber.ListKeysetResponse
	(*ListRequest)(nil),                            // 36: InternalApi.Plumber.ListRequest
	(*ListResponse)(nil),                           // 37: InternalApi.Plumber.ListResponse
	(*Queue)(nil),                                  // 38: InternalApi.Plumber.Queue
	(*Pipeline)(nil),                               // 39: InternalApi.Plumber.Pipeline
	(*Triggerer)(nil),                              // 40: InternalApi.Plumber.Triggerer
	(*ListActivityRequest)(nil),                    // 41: InternalApi.Plumber.ListActivityRequest
	(*ListActivityResponse)(nil),                   // 42: InternalApi.Plumber.ListActivityResponse
	(*ListRequestersRequest)(nil),                  // 43: InternalApi.Plumber.ListRequestersRequest
	(*ListRequestersResponse)(nil),                 // 44: InternalApi.Plumber.ListRequestersResponse
	(*Requester)(nil),                              // 45: InternalApi.Plumber.Requester
	(*ActivePipeline)(nil),                         // 46: InternalApi.Plumber.ActivePipeline
	(*BlockDetails)(nil),                           // 47: InternalApi.Plumber.BlockDetails
	(*RunNowRequest)(nil),                          // 48: InternalApi.Plumber.RunNowRequest
	(*RunNowResponse)(nil),                         // 49: InternalApi.Plumber.RunNowResponse
	(*GetProjectIdRequest)(nil),                    // 50: InternalApi.Plumber.GetProjectIdRequest
	(*GetProjectIdResponse)(nil),                   // 51: InternalApi.Plumber.GetProjectIdResponse
	(*ValidateYamlRequest)(nil),                    // 52: InternalApi.Plumber.ValidateYamlRequest
	(*ValidateYamlResponse)(nil),                   // 53: InternalApi.Plumber.ValidateYamlResponse
	(*ScheduleExtensionRequest)(nil),               // 54: InternalApi.Plumber.ScheduleExtensionRequest
	(*EnvVariable)(nil),                            // 55: InternalApi.Plumber.EnvVariable
	(*ScheduleExtensionResponse)(nil),              // 56: InternalApi.Plumber.ScheduleExtensionResponse
	(*DeleteRequest)(nil),                          // 57: InternalApi.Plumber.DeleteRequest
	(*DeleteResponse)(nil),                         // 58: InternalApi.Plumber.DeleteResponse
	(*PartialRebuildRequest)(nil),                  // 59: InternalApi.Plumber.PartialRebuildRequest
	(*PartialRebuildResponse)(nil),                 // 60: InternalApi.Plumber.PartialRebuildResponse
	(*VersionRequest)(nil),                         // 61: InternalApi.Plumber.VersionRequest
	(*VersionResponse)(nil),                        // 62: InternalApi.Plumber.VersionResponse
	(*ResponseStatus)(nil),                         // 63: InternalApi.Plumber.ResponseStatus
	(*PipelineEvent)(nil),                          // 64: InternalApi.Plumber.PipelineEvent
	(*PipelineBlockEvent)(nil),                     // 65: InternalApi.Plumber.PipelineBlockEvent
	(*AfterPipeline)(nil),                          // 66: InternalApi.Plumber.AfterPipeline
	(*AfterPipelineEvent)(nil),                     // 67: InternalApi.Plumber.AfterPipelineEvent
	(*ScheduleRequest_Repo)(nil),                   // 68: InternalApi.Plumber.ScheduleRequest.Repo
	(*ScheduleRequest_Auth)(nil),                   // 69: InternalApi.Plumber.ScheduleRequest.Auth
	(*Block_Job)(nil),                              // 70: InternalApi.Plumber.Block.Job
	(*DescribeTopologyResponse_Block)(nil),         // 71: InternalApi.Plumber.DescribeTopologyResponse.Block
	(*DescribeTopologyResponse_AfterPipeline)(nil), // 72: InternalApi.Plumber.DescribeTopologyResponse.AfterPipeline
	(*BlockDetails_JobDetails)(nil),                // 73: InternalApi.Plumber.BlockDetails.JobDetails
	(*timestamp.Timestamp)(nil),                    // 74: google.protobuf.Timestamp
	(plumber_w_f_workflow.TriggeredBy)(0),          // 75: InternalApi.PlumberWF.TriggeredBy
	(user.RepositoryProvider_Type)(0),              // 76: InternalApi.User.RepositoryProvider.Type
}
var file_plumber_pipeline_proto_depIdxs = []int32{
	3,   // 0: InternalApi.Plumber.ScheduleRequest.service:type_name -> InternalApi.Plumber.ScheduleRequest.ServiceType
	68,  // 1: InternalApi.Plumber.ScheduleRequest.repo:type_name -> InternalApi.Plumber.ScheduleRequest.Repo
	69,  // 2: InternalApi.Plumber.ScheduleRequest.auth:type_name -> InternalApi.Plumber.ScheduleRequest.Auth
	63,  // 3: InternalApi.Plumber.ScheduleResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	63,  // 4: InternalApi.Plumber.DescribeResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	39,  // 5: InternalApi.Plumber.DescribeResponse.pipeline:type_name -> InternalApi.Plumber.Pipeline
	23,  // 6: InternalApi.Plumber.DescribeResponse.blocks:type_name -> InternalApi.Plumber.Block
	4,   // 7: InternalApi.Plumber.Block.state:type_name -> InternalApi.Plumber.Block.State
	5,   // 8: InternalApi.Plumber.Block.result:type_name -> InternalApi.Plumber.Block.Result
	6,   // 9: InternalApi.Plumber.Block.result_reason:type_name -> InternalApi.Plumber.Block.ResultReason
	70,  // 10: InternalApi.Plumber.Block.jobs:type_name -> InternalApi.Plumber.Block.Job
	63,  // 11: InternalApi.Plumber.DescribeManyResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	39,  // 12: InternalApi.Plumber.DescribeManyResponse.pipelines:type_name -> InternalApi.Plumber.Pipeline
	63,  // 13: InternalApi.Plumber.DescribeTopologyResponse.status:type_name -> InternalApi.Plumber.ResponseStatus
	71,  // 14: InternalApi.Plumber.DescribeTopologyResponse.blocks:type_name -> InternalApi.Plumber.DescribeTopologyResponse.Block
	72,  // 15: InternalApi.Plumber.DescribeTopologyResponse.after_pipeline:type_name -> InternalApi.Plumber.DescribeTopologyResponse.AfterPipeline
	63,  // 16: InternalApi.Plumber.TerminateResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	0,   // 17: InternalApi.Plumber.ListQueuesRequest.queue_types:type_name -> InternalApi.Plumber.QueueType
	63,  // 18: InternalApi.Plumber.ListQueuesResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	38,  // 19: InternalApi.Plumber.ListQueuesResponse.queues:type_name -> InternalApi.Plumber.Queue
	0,   // 20: InternalApi.Plumber.ListGroupedRequest.queue_type:type_name -> InternalApi.Plumber.QueueType
	63,  // 21: InternalApi.Plumber.ListGroupedResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	39,  // 22: InternalApi.Plumber.ListGroupedResponse.pipelines:type_name -> InternalApi.Plumber.Pipeline
	7,   // 23: InternalApi.Plumber.ListKeysetRequest.order:type_name -> InternalApi.Plumber.ListKeysetRequest.Order
	8,   // 24: InternalApi.Plumber.ListKeysetRequest.direction:type_name -> InternalApi.Plumber.ListKeysetRequest.Direction
	74,  // 25: InternalApi.Plumber.ListKeysetRequest.created_before:type_name -> google.protobuf.Timestamp
	74,  // 26: InternalApi.Plumber.ListKeysetRequest.created_after:type_name -> google.protobuf.Timestamp
	74,  // 27: InternalApi.Plumber.ListKeysetRequest.done_before:type_name -> google.protobuf.Timestamp
	74,  // 28: InternalApi.Plumber.ListKeysetRequest.done_after:type_name -> google.protobuf.Timestamp
	1,   // 29: InternalApi.Plumber.ListKeysetRequest.git_ref_types:type_name -> InternalApi.Plumber.GitRefType
	39,  // 30: InternalApi.Plumber.ListKeysetResponse.pipelines:type_name -> InternalApi.Plumber.Pipeline
	74,  // 31: InternalApi.Plumber.ListRequest.created_before:type_name -> google.protobuf.Timestamp
	74,  // 32: InternalApi.Plumber.ListRequest.created_after:type_name -> google.protobuf.Timestamp
	74,  // 33: InternalApi.Plumber.ListRequest.done_before:type_name -> google.protobuf.Timestamp
	74,  // 34: InternalApi.Plumber.ListRequest.done_after:type_name -> google.protobuf.Timestamp
	1,   // 35: InternalApi.Plumber.ListRequest.git_ref_types:type_name -> InternalApi.Plumber.GitRefType
	63,  // 36: InternalApi.Plumber.ListResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	39,  // 37: InternalApi.Plumber.ListResponse.pipelines:type_name -> InternalApi.Plumber.Pipeline
	0,   // 38: InternalApi.Plumber.Queue.type:type_name -> InternalApi.Plumber.QueueType
	74,  // 39: InternalApi.Plumber.Pipeline.created_at:type_name -> google.protobuf.Timestamp
	74,  // 40: InternalApi.Plumber.Pipeline.pending_at:type_name -> google.protobuf.Timestamp
	74,  // 41: InternalApi.Plumber.Pipeline.queuing_at:type_name -> google.protobuf.Timestamp
	74,  // 42: InternalApi.Plumber.Pipeline.running_at:type_name -> google.protobuf.Timestamp
	74,  // 43: InternalApi.Plumber.Pipeline.stopping_at:type_name -> google.protobuf.Timestamp
	74,  // 44: InternalApi.Plumber.Pipeline.done_at:type_name -> google.protobuf.Timestamp
	9,   // 45: InternalApi.Plumber.Pipeline.state:type_name -> InternalApi.Plumber.Pipeline.State
	10,  // 46: InternalApi.Plumber.Pipeline.result:type_name -> InternalApi.Plumber.Pipeline.Result
	11,  // 47: InternalApi.Plumber.Pipeline.result_reason:type_name -> InternalApi.Plumber.Pipeline.ResultReason
	38,  // 48: InternalApi.Plumber.Pipeline.queue:type_name -> InternalApi.Plumber.Queue
	55,  // 49: InternalApi.Plumber.Pipeline.env_vars:type_name -> InternalApi.Plumber.EnvVariable
	40,  // 50: InternalApi.Plumber.Pipeline.triggerer:type_name -> InternalApi.Plumber.Triggerer
	75,  // 51: InternalApi.Plumber.Triggerer.wf_triggered_by:type_name -> InternalApi.PlumberWF.TriggeredBy
	2,   // 52: InternalApi.Plumber.Triggerer.ppl_triggered_by:type_name -> InternalApi.Plumber.TriggeredBy
	12,  // 53: InternalApi.Plumber.ListActivityRequest.order:type_name -> InternalApi.Plumber.ListActivityRequest.Order
	13,  // 54: InternalApi.Plumber.ListActivityRequest.direction:type_name -> InternalApi.Plumber.ListActivityRequest.Direction
	46,  // 55: InternalApi.Plumber.ListActivityResponse.pipelines:type_name -> InternalApi.Plumber.ActivePipeline
	74,  // 56: InternalApi.Plumber.ListRequestersRequest.requested_at_gt:type_name -> google.protobuf.Timestamp
	74,  // 57: InternalApi.Plumber.ListRequestersRequest.requested_at_lte:type_name -> google.protobuf.Timestamp
	45,  // 58: InternalApi.Plumber.ListRequestersResponse.requesters:type_name -> InternalApi.Plumber.Requester
	76,  // 59: InternalApi.Plumber.Requester.provider:type_name -> InternalApi.User.RepositoryProvider.Type
	75,  // 60: InternalApi.Plumber.Requester.triggerer:type_name -> InternalApi.PlumberWF.TriggeredBy
	74,  // 61: InternalApi.Plumber.Requester.requested_at:type_name -> google.protobuf.Timestamp
	75,  // 62: InternalApi.Plumber.ActivePipeline.wf_triggered_by:type_name -> InternalApi.PlumberWF.TriggeredBy
	74,  // 63: InternalApi.Plumber.ActivePipeline.created_at:type_name -> google.protobuf.Timestamp
	74,  // 64: InternalApi.Plumber.ActivePipeline.pending_at:type_name -> google.protobuf.Timestamp
	74,  // 65: InternalApi.Plumber.ActivePipeline.queuing_at:type_name -> google.protobuf.Timestamp
	74,  // 66: InternalApi.Plumber.ActivePipeline.running_at:type_name -> google.protobuf.Timestamp
	38,  // 67: InternalApi.Plumber.ActivePipeline.queue:type_name -> InternalApi.Plumber.Queue
	47,  // 68: InternalApi.Plumber.ActivePipeline.blocks:type_name -> InternalApi.Plumber.BlockDetails
	9,   // 69: InternalApi.Plumber.ActivePipeline.state:type_name -> InternalApi.Plumber.Pipeline.State
	1,   // 70: InternalApi.Plumber.ActivePipeline.git_ref_type:type_name -> InternalApi.Plumber.GitRefType
	40,  // 71: InternalApi.Plumber.ActivePipeline.triggerer:type_name -> InternalApi.Plumber.Triggerer
	4,   // 72: InternalApi.Plumber.BlockDetails.state:type_name -> InternalApi.Plumber.Block.State
	5,   // 73: InternalApi.Plumber.BlockDetails.result:type_name -> InternalApi.Plumber.Block.Result
	6,   // 74: InternalApi.Plumber.BlockDetails.result_reason:type_name -> InternalApi.Plumber.Block.ResultReason
	73,  // 75: InternalApi.Plumber.BlockDetails.jobs:type_name -> InternalApi.Plumber.BlockDetails.JobDetails
	14,  // 76: InternalApi.Plumber.RunNowRequest.type:type_name -> InternalApi.Plumber.RunNowRequest.Type
	63,  // 77: InternalApi.Plumber.GetProjectIdResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	63,  // 78: InternalApi.Plumber.ValidateYamlResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	55,  // 79: InternalApi.Plumber.ScheduleExtensionRequest.env_variables:type_name -> InternalApi.Plumber.EnvVariable
	63,  // 80: InternalApi.Plumber.ScheduleExtensionResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	63,  // 81: InternalApi.Plumber.DeleteResponse.status:type_name -> InternalApi.Plumber.ResponseStatus
	63,  // 82: InternalApi.Plumber.PartialRebuildResponse.response_status:type_name -> InternalApi.Plumber.ResponseStatus
	15,  // 83: InternalApi.Plumber.ResponseStatus.code:type_name -> InternalApi.Plumber.ResponseStatus.ResponseCode
	9,   // 84: InternalApi.Plumber.PipelineEvent.state:type_name -> InternalApi.Plumber.Pipeline.State
	74,  // 85: InternalApi.Plumber.PipelineEvent.timestamp:type_name -> google.protobuf.Timestamp
	4,   // 86: InternalApi.Plumber.PipelineBlockEvent.state:type_name -> InternalApi.Plumber.Block.State
	74,  // 87: InternalApi.Plumber.PipelineBlockEvent.timestamp:type_name -> google.protobuf.Timestamp
	16,  // 88: InternalApi.Plumber.AfterPipeline.state:type_name -> InternalApi.Plumber.AfterPipeline.State
	17,  // 89: InternalApi.Plumber.AfterPipeline.result:type_name -> InternalApi.Plumber.AfterPipeline.Result
	18,  // 90: InternalApi.Plumber.AfterPipeline.result_reason:type_name -> InternalApi.Plumber.AfterPipeline.ResultReason
	74,  // 91: InternalApi.Plumber.AfterPipeline.created_at:type_name -> google.protobuf.Timestamp
	16,  // 92: InternalApi.Plumber.AfterPipelineEvent.state:type_name -> InternalApi.Plumber.AfterPipeline.State
	74,  // 93: InternalApi.Plumber.AfterPipelineEvent.timestamp:type_name -> google.protobuf.Timestamp
	19,  // 94: InternalApi.Plumber.PipelineService.Schedule:input_type -> InternalApi.Plumber.ScheduleRequest
	21,  // 95: InternalApi.Plumber.PipelineService.Describe:input_type -> InternalApi.Plumber.DescribeRequest
	24,  // 96: InternalApi.Plumber.PipelineService.DescribeMany:input_type -> InternalApi.Plumber.DescribeManyRequest
	26,  // 97: InternalApi.Plumber.PipelineService.DescribeTopology:input_type -> InternalApi.Plumber.DescribeTopologyRequest
	28,  // 98: InternalApi.Plumber.PipelineService.Terminate:input_type -> InternalApi.Plumber.TerminateRequest
	34,  // 99: InternalApi.Plumber.PipelineService.ListKeyset:input_type -> InternalApi.Plumber.ListKeysetRequest
	36,  // 100: InternalApi.Plumber.PipelineService.List:input_type -> InternalApi.Plumber.ListRequest
	32,  // 101: InternalApi.Plumber.PipelineService.ListGrouped:input_type -> InternalApi.Plumber.ListGroupedRequest
	30,  // 102: InternalApi.Plumber.PipelineService.ListQueues:input_type -> InternalApi.Plumber.ListQueuesRequest
	41,  // 103: InternalApi.Plumber.PipelineService.ListActivity:input_type -> InternalApi.Plumber.ListActivityRequest
	43,  // 104: InternalApi.Plumber.PipelineService.ListRequesters:input_type -> InternalApi.Plumber.ListRequestersRequest
	48,  // 105: InternalApi.Plumber.PipelineService.RunNow:input_type -> InternalApi.Plumber.RunNowRequest
	50,  // 106: InternalApi.Plumber.PipelineService.GetProjectId:input_type -> InternalApi.Plumber.GetProjectIdRequest
	52,  // 107: InternalApi.Plumber.PipelineService.ValidateYaml:input_type -> InternalApi.Plumber.ValidateYamlRequest
	54,  // 108: InternalApi.Plumber.PipelineService.ScheduleExtension:input_type -> InternalApi.Plumber.ScheduleExtensionRequest
	57,  // 109: InternalApi.Plumber.PipelineService.Delete:input_type -> InternalApi.Plumber.DeleteRequest
	59,  // 110: InternalApi.Plumber.PipelineService.PartialRebuild:input_type -> InternalApi.Plumber.PartialRebuildRequest
	61,  // 111: InternalApi.Plumber.PipelineService.Version:input_type -> InternalApi.Plumber.VersionRequest
	20,  // 112: InternalApi.Plumber.PipelineService.Schedule:output_type -> InternalApi.Plumber.ScheduleResponse
	22,  // 113: InternalApi.Plumber.PipelineService.Describe:output_type -> InternalApi.Plumber.DescribeResponse
	25,  // 114: InternalApi.Plumber.PipelineService.DescribeMany:output_type -> InternalApi.Plumber.DescribeManyResponse
	27,  // 115: InternalApi.Plumber.PipelineService.DescribeTopology:output_type -> InternalApi.Plumber.DescribeTopologyResponse
	29,  // 116: InternalApi.Plumber.PipelineService.Terminate:output_type -> InternalApi.Plumber.TerminateResponse
	35,  // 117: InternalApi.Plumber.PipelineService.ListKeyset:output_type -> InternalApi.Plumber.ListKeysetResponse
	37,  // 118: InternalApi.Plumber.PipelineService.List:output_type -> InternalApi.Plumber.ListResponse
	33,  // 119: InternalApi.Plumber.PipelineService.ListGrouped:output_type -> InternalApi.Plumber.ListGroupedResponse
	31,  // 120: InternalApi.Plumber.PipelineService.ListQueues:output_type -> InternalApi.Plumber.ListQueuesResponse
	42,  // 121: InternalApi.Plumber.PipelineService.ListActivity:output_type -> InternalApi.Plumber.ListActivityResponse
	44,  // 122: InternalApi.Plumber.PipelineService.ListRequesters:output_type -> InternalApi.Plumber.ListRequestersResponse
	49,  // 123: InternalApi.Plumber.PipelineService.RunNow:output_type -> InternalApi.Plumber.RunNowResponse
	51,  // 124: InternalApi.Plumber.PipelineService.GetProjectId:output_type -> InternalApi.Plumber.GetProjectIdResponse
	53,  // 125: InternalApi.Plumber.PipelineService.ValidateYaml:output_type -> InternalApi.Plumber.ValidateYamlResponse
	56,  // 126: InternalApi.Plumber.PipelineService.ScheduleExtension:output_type -> InternalApi.Plumber.ScheduleExtensionResponse
	58,  // 127: InternalApi.Plumber.PipelineService.Delete:output_type -> InternalApi.Plumber.DeleteResponse
	60,  // 128: InternalApi.Plumber.PipelineService.PartialRebuild:output_type -> InternalApi.Plumber.PartialRebuildResponse
	62,  // 129: InternalApi.Plumber.PipelineService.Version:output_type -> InternalApi.Plumber.VersionResponse
	112, // [112:130] is the sub-list for method output_type
	94,  // [94:112] is the sub-list for method input_type
	94,  // [94:94] is the sub-list for extension type_name
	94,  // [94:94] is the sub-list for extension extendee
	0,   // [0:94] is the sub-list for field type_name
}

func init() { file_plumber_pipeline_proto_init() }
func file_plumber_pipeline_proto_init() {
	if File_plumber_pipeline_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plumber_pipeline_proto_rawDesc), len(file_plumber_pipeline_proto_rawDesc)),
			NumEnums:      19,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plumber_pipeline_proto_goTypes,
		DependencyIndexes: file_plumber_pipeline_proto_depIdxs,
		EnumInfos:         file_plumber_pipeline_proto_enumTypes,
		MessageInfos:      file_plumber_pipeline_proto_msgTypes,
	}.Build()
	File_plumber_pipeline_proto = out.File
	file_plumber_pipeline_proto_goTypes = nil
	file_plumber_pipeline_proto_depIdxs = nil
}
