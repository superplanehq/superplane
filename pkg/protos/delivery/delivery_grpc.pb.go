// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.3.0
// source: delivery.proto

package delivery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Delivery_CreateCanvas_FullMethodName        = "/InternalApi.Delivery.Delivery/CreateCanvas"
	Delivery_CreateEventSource_FullMethodName   = "/InternalApi.Delivery.Delivery/CreateEventSource"
	Delivery_CreateStage_FullMethodName         = "/InternalApi.Delivery.Delivery/CreateStage"
	Delivery_DescribeCanvas_FullMethodName      = "/InternalApi.Delivery.Delivery/DescribeCanvas"
	Delivery_DescribeStage_FullMethodName       = "/InternalApi.Delivery.Delivery/DescribeStage"
	Delivery_DescribeEventSource_FullMethodName = "/InternalApi.Delivery.Delivery/DescribeEventSource"
	Delivery_ListStages_FullMethodName          = "/InternalApi.Delivery.Delivery/ListStages"
	Delivery_ListEventSources_FullMethodName    = "/InternalApi.Delivery.Delivery/ListEventSources"
	Delivery_ListStageEvents_FullMethodName     = "/InternalApi.Delivery.Delivery/ListStageEvents"
	Delivery_UpdateStage_FullMethodName         = "/InternalApi.Delivery.Delivery/UpdateStage"
	Delivery_ApproveStageEvent_FullMethodName   = "/InternalApi.Delivery.Delivery/ApproveStageEvent"
	Delivery_ListTags_FullMethodName            = "/InternalApi.Delivery.Delivery/ListTags"
	Delivery_UpdateTagState_FullMethodName      = "/InternalApi.Delivery.Delivery/UpdateTagState"
)

// DeliveryClient is the client API for Delivery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryClient interface {
	CreateCanvas(ctx context.Context, in *CreateCanvasRequest, opts ...grpc.CallOption) (*CreateCanvasResponse, error)
	CreateEventSource(ctx context.Context, in *CreateEventSourceRequest, opts ...grpc.CallOption) (*CreateEventSourceResponse, error)
	CreateStage(ctx context.Context, in *CreateStageRequest, opts ...grpc.CallOption) (*CreateStageResponse, error)
	DescribeCanvas(ctx context.Context, in *DescribeCanvasRequest, opts ...grpc.CallOption) (*DescribeCanvasResponse, error)
	DescribeStage(ctx context.Context, in *DescribeStageRequest, opts ...grpc.CallOption) (*DescribeStageResponse, error)
	DescribeEventSource(ctx context.Context, in *DescribeEventSourceRequest, opts ...grpc.CallOption) (*DescribeEventSourceResponse, error)
	ListStages(ctx context.Context, in *ListStagesRequest, opts ...grpc.CallOption) (*ListStagesResponse, error)
	ListEventSources(ctx context.Context, in *ListEventSourcesRequest, opts ...grpc.CallOption) (*ListEventSourcesResponse, error)
	ListStageEvents(ctx context.Context, in *ListStageEventsRequest, opts ...grpc.CallOption) (*ListStageEventsResponse, error)
	UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error)
	ApproveStageEvent(ctx context.Context, in *ApproveStageEventRequest, opts ...grpc.CallOption) (*ApproveStageEventResponse, error)
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	UpdateTagState(ctx context.Context, in *UpdateTagStateRequest, opts ...grpc.CallOption) (*UpdateTagStateResponse, error)
}

type deliveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryClient(cc grpc.ClientConnInterface) DeliveryClient {
	return &deliveryClient{cc}
}

func (c *deliveryClient) CreateCanvas(ctx context.Context, in *CreateCanvasRequest, opts ...grpc.CallOption) (*CreateCanvasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCanvasResponse)
	err := c.cc.Invoke(ctx, Delivery_CreateCanvas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) CreateEventSource(ctx context.Context, in *CreateEventSourceRequest, opts ...grpc.CallOption) (*CreateEventSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEventSourceResponse)
	err := c.cc.Invoke(ctx, Delivery_CreateEventSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) CreateStage(ctx context.Context, in *CreateStageRequest, opts ...grpc.CallOption) (*CreateStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStageResponse)
	err := c.cc.Invoke(ctx, Delivery_CreateStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) DescribeCanvas(ctx context.Context, in *DescribeCanvasRequest, opts ...grpc.CallOption) (*DescribeCanvasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeCanvasResponse)
	err := c.cc.Invoke(ctx, Delivery_DescribeCanvas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) DescribeStage(ctx context.Context, in *DescribeStageRequest, opts ...grpc.CallOption) (*DescribeStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeStageResponse)
	err := c.cc.Invoke(ctx, Delivery_DescribeStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) DescribeEventSource(ctx context.Context, in *DescribeEventSourceRequest, opts ...grpc.CallOption) (*DescribeEventSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeEventSourceResponse)
	err := c.cc.Invoke(ctx, Delivery_DescribeEventSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) ListStages(ctx context.Context, in *ListStagesRequest, opts ...grpc.CallOption) (*ListStagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStagesResponse)
	err := c.cc.Invoke(ctx, Delivery_ListStages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) ListEventSources(ctx context.Context, in *ListEventSourcesRequest, opts ...grpc.CallOption) (*ListEventSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventSourcesResponse)
	err := c.cc.Invoke(ctx, Delivery_ListEventSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) ListStageEvents(ctx context.Context, in *ListStageEventsRequest, opts ...grpc.CallOption) (*ListStageEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStageEventsResponse)
	err := c.cc.Invoke(ctx, Delivery_ListStageEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStageResponse)
	err := c.cc.Invoke(ctx, Delivery_UpdateStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) ApproveStageEvent(ctx context.Context, in *ApproveStageEventRequest, opts ...grpc.CallOption) (*ApproveStageEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveStageEventResponse)
	err := c.cc.Invoke(ctx, Delivery_ApproveStageEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, Delivery_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) UpdateTagState(ctx context.Context, in *UpdateTagStateRequest, opts ...grpc.CallOption) (*UpdateTagStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTagStateResponse)
	err := c.cc.Invoke(ctx, Delivery_UpdateTagState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServer is the server API for Delivery service.
// All implementations should embed UnimplementedDeliveryServer
// for forward compatibility.
type DeliveryServer interface {
	CreateCanvas(context.Context, *CreateCanvasRequest) (*CreateCanvasResponse, error)
	CreateEventSource(context.Context, *CreateEventSourceRequest) (*CreateEventSourceResponse, error)
	CreateStage(context.Context, *CreateStageRequest) (*CreateStageResponse, error)
	DescribeCanvas(context.Context, *DescribeCanvasRequest) (*DescribeCanvasResponse, error)
	DescribeStage(context.Context, *DescribeStageRequest) (*DescribeStageResponse, error)
	DescribeEventSource(context.Context, *DescribeEventSourceRequest) (*DescribeEventSourceResponse, error)
	ListStages(context.Context, *ListStagesRequest) (*ListStagesResponse, error)
	ListEventSources(context.Context, *ListEventSourcesRequest) (*ListEventSourcesResponse, error)
	ListStageEvents(context.Context, *ListStageEventsRequest) (*ListStageEventsResponse, error)
	UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error)
	ApproveStageEvent(context.Context, *ApproveStageEventRequest) (*ApproveStageEventResponse, error)
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	UpdateTagState(context.Context, *UpdateTagStateRequest) (*UpdateTagStateResponse, error)
}

// UnimplementedDeliveryServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeliveryServer struct{}

func (UnimplementedDeliveryServer) CreateCanvas(context.Context, *CreateCanvasRequest) (*CreateCanvasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCanvas not implemented")
}
func (UnimplementedDeliveryServer) CreateEventSource(context.Context, *CreateEventSourceRequest) (*CreateEventSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventSource not implemented")
}
func (UnimplementedDeliveryServer) CreateStage(context.Context, *CreateStageRequest) (*CreateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStage not implemented")
}
func (UnimplementedDeliveryServer) DescribeCanvas(context.Context, *DescribeCanvasRequest) (*DescribeCanvasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCanvas not implemented")
}
func (UnimplementedDeliveryServer) DescribeStage(context.Context, *DescribeStageRequest) (*DescribeStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStage not implemented")
}
func (UnimplementedDeliveryServer) DescribeEventSource(context.Context, *DescribeEventSourceRequest) (*DescribeEventSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEventSource not implemented")
}
func (UnimplementedDeliveryServer) ListStages(context.Context, *ListStagesRequest) (*ListStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStages not implemented")
}
func (UnimplementedDeliveryServer) ListEventSources(context.Context, *ListEventSourcesRequest) (*ListEventSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventSources not implemented")
}
func (UnimplementedDeliveryServer) ListStageEvents(context.Context, *ListStageEventsRequest) (*ListStageEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStageEvents not implemented")
}
func (UnimplementedDeliveryServer) UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStage not implemented")
}
func (UnimplementedDeliveryServer) ApproveStageEvent(context.Context, *ApproveStageEventRequest) (*ApproveStageEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveStageEvent not implemented")
}
func (UnimplementedDeliveryServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedDeliveryServer) UpdateTagState(context.Context, *UpdateTagStateRequest) (*UpdateTagStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTagState not implemented")
}
func (UnimplementedDeliveryServer) testEmbeddedByValue() {}

// UnsafeDeliveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServer will
// result in compilation errors.
type UnsafeDeliveryServer interface {
	mustEmbedUnimplementedDeliveryServer()
}

func RegisterDeliveryServer(s grpc.ServiceRegistrar, srv DeliveryServer) {
	// If the following call pancis, it indicates UnimplementedDeliveryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Delivery_ServiceDesc, srv)
}

func _Delivery_CreateCanvas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCanvasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).CreateCanvas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_CreateCanvas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).CreateCanvas(ctx, req.(*CreateCanvasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_CreateEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).CreateEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_CreateEventSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).CreateEventSource(ctx, req.(*CreateEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_CreateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).CreateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_CreateStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).CreateStage(ctx, req.(*CreateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_DescribeCanvas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCanvasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).DescribeCanvas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_DescribeCanvas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).DescribeCanvas(ctx, req.(*DescribeCanvasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_DescribeStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).DescribeStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_DescribeStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).DescribeStage(ctx, req.(*DescribeStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_DescribeEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).DescribeEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_DescribeEventSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).DescribeEventSource(ctx, req.(*DescribeEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_ListStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).ListStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_ListStages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).ListStages(ctx, req.(*ListStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_ListEventSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).ListEventSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_ListEventSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).ListEventSources(ctx, req.(*ListEventSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_ListStageEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStageEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).ListStageEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_ListStageEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).ListStageEvents(ctx, req.(*ListStageEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_UpdateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).UpdateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_UpdateStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).UpdateStage(ctx, req.(*UpdateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_ApproveStageEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveStageEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).ApproveStageEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_ApproveStageEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).ApproveStageEvent(ctx, req.(*ApproveStageEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_UpdateTagState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).UpdateTagState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_UpdateTagState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).UpdateTagState(ctx, req.(*UpdateTagStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Delivery_ServiceDesc is the grpc.ServiceDesc for Delivery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Delivery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.Delivery.Delivery",
	HandlerType: (*DeliveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCanvas",
			Handler:    _Delivery_CreateCanvas_Handler,
		},
		{
			MethodName: "CreateEventSource",
			Handler:    _Delivery_CreateEventSource_Handler,
		},
		{
			MethodName: "CreateStage",
			Handler:    _Delivery_CreateStage_Handler,
		},
		{
			MethodName: "DescribeCanvas",
			Handler:    _Delivery_DescribeCanvas_Handler,
		},
		{
			MethodName: "DescribeStage",
			Handler:    _Delivery_DescribeStage_Handler,
		},
		{
			MethodName: "DescribeEventSource",
			Handler:    _Delivery_DescribeEventSource_Handler,
		},
		{
			MethodName: "ListStages",
			Handler:    _Delivery_ListStages_Handler,
		},
		{
			MethodName: "ListEventSources",
			Handler:    _Delivery_ListEventSources_Handler,
		},
		{
			MethodName: "ListStageEvents",
			Handler:    _Delivery_ListStageEvents_Handler,
		},
		{
			MethodName: "UpdateStage",
			Handler:    _Delivery_UpdateStage_Handler,
		},
		{
			MethodName: "ApproveStageEvent",
			Handler:    _Delivery_ApproveStageEvent_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _Delivery_ListTags_Handler,
		},
		{
			MethodName: "UpdateTagState",
			Handler:    _Delivery_UpdateTagState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delivery.proto",
}
