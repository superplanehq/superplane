// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.8
// source: canvases.proto

package canvases

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Superplane_ListCanvases_FullMethodName                 = "/Superplane.Superplane/ListCanvases"
	Superplane_CreateCanvas_FullMethodName                 = "/Superplane.Superplane/CreateCanvas"
	Superplane_DeleteCanvas_FullMethodName                 = "/Superplane.Superplane/DeleteCanvas"
	Superplane_CreateConnectionGroup_FullMethodName        = "/Superplane.Superplane/CreateConnectionGroup"
	Superplane_CreateEventSource_FullMethodName            = "/Superplane.Superplane/CreateEventSource"
	Superplane_ResetEventSourceKey_FullMethodName          = "/Superplane.Superplane/ResetEventSourceKey"
	Superplane_CreateStage_FullMethodName                  = "/Superplane.Superplane/CreateStage"
	Superplane_DescribeCanvas_FullMethodName               = "/Superplane.Superplane/DescribeCanvas"
	Superplane_DescribeStage_FullMethodName                = "/Superplane.Superplane/DescribeStage"
	Superplane_DescribeEventSource_FullMethodName          = "/Superplane.Superplane/DescribeEventSource"
	Superplane_DescribeConnectionGroup_FullMethodName      = "/Superplane.Superplane/DescribeConnectionGroup"
	Superplane_ListStages_FullMethodName                   = "/Superplane.Superplane/ListStages"
	Superplane_ListEventSources_FullMethodName             = "/Superplane.Superplane/ListEventSources"
	Superplane_ListConnectionGroups_FullMethodName         = "/Superplane.Superplane/ListConnectionGroups"
	Superplane_ListStageExecutions_FullMethodName          = "/Superplane.Superplane/ListStageExecutions"
	Superplane_ListStageEvents_FullMethodName              = "/Superplane.Superplane/ListStageEvents"
	Superplane_ListEvents_FullMethodName                   = "/Superplane.Superplane/ListEvents"
	Superplane_CreateEvent_FullMethodName                  = "/Superplane.Superplane/CreateEvent"
	Superplane_ListConnectionGroupFieldSets_FullMethodName = "/Superplane.Superplane/ListConnectionGroupFieldSets"
	Superplane_UpdateStage_FullMethodName                  = "/Superplane.Superplane/UpdateStage"
	Superplane_DeleteStage_FullMethodName                  = "/Superplane.Superplane/DeleteStage"
	Superplane_UpdateEventSource_FullMethodName            = "/Superplane.Superplane/UpdateEventSource"
	Superplane_DeleteEventSource_FullMethodName            = "/Superplane.Superplane/DeleteEventSource"
	Superplane_UpdateConnectionGroup_FullMethodName        = "/Superplane.Superplane/UpdateConnectionGroup"
	Superplane_DeleteConnectionGroup_FullMethodName        = "/Superplane.Superplane/DeleteConnectionGroup"
	Superplane_ApproveStageEvent_FullMethodName            = "/Superplane.Superplane/ApproveStageEvent"
	Superplane_DiscardStageEvent_FullMethodName            = "/Superplane.Superplane/DiscardStageEvent"
	Superplane_CancelStageExecution_FullMethodName         = "/Superplane.Superplane/CancelStageExecution"
	Superplane_ListEventRejections_FullMethodName          = "/Superplane.Superplane/ListEventRejections"
	Superplane_AddUser_FullMethodName                      = "/Superplane.Superplane/AddUser"
	Superplane_RemoveUser_FullMethodName                   = "/Superplane.Superplane/RemoveUser"
	Superplane_ListAlerts_FullMethodName                   = "/Superplane.Superplane/ListAlerts"
)

// SuperplaneClient is the client API for Superplane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperplaneClient interface {
	ListCanvases(ctx context.Context, in *ListCanvasesRequest, opts ...grpc.CallOption) (*ListCanvasesResponse, error)
	CreateCanvas(ctx context.Context, in *CreateCanvasRequest, opts ...grpc.CallOption) (*CreateCanvasResponse, error)
	DeleteCanvas(ctx context.Context, in *DeleteCanvasRequest, opts ...grpc.CallOption) (*DeleteCanvasResponse, error)
	CreateConnectionGroup(ctx context.Context, in *CreateConnectionGroupRequest, opts ...grpc.CallOption) (*CreateConnectionGroupResponse, error)
	CreateEventSource(ctx context.Context, in *CreateEventSourceRequest, opts ...grpc.CallOption) (*CreateEventSourceResponse, error)
	ResetEventSourceKey(ctx context.Context, in *ResetEventSourceKeyRequest, opts ...grpc.CallOption) (*ResetEventSourceKeyResponse, error)
	CreateStage(ctx context.Context, in *CreateStageRequest, opts ...grpc.CallOption) (*CreateStageResponse, error)
	DescribeCanvas(ctx context.Context, in *DescribeCanvasRequest, opts ...grpc.CallOption) (*DescribeCanvasResponse, error)
	DescribeStage(ctx context.Context, in *DescribeStageRequest, opts ...grpc.CallOption) (*DescribeStageResponse, error)
	DescribeEventSource(ctx context.Context, in *DescribeEventSourceRequest, opts ...grpc.CallOption) (*DescribeEventSourceResponse, error)
	DescribeConnectionGroup(ctx context.Context, in *DescribeConnectionGroupRequest, opts ...grpc.CallOption) (*DescribeConnectionGroupResponse, error)
	ListStages(ctx context.Context, in *ListStagesRequest, opts ...grpc.CallOption) (*ListStagesResponse, error)
	ListEventSources(ctx context.Context, in *ListEventSourcesRequest, opts ...grpc.CallOption) (*ListEventSourcesResponse, error)
	ListConnectionGroups(ctx context.Context, in *ListConnectionGroupsRequest, opts ...grpc.CallOption) (*ListConnectionGroupsResponse, error)
	ListStageExecutions(ctx context.Context, in *ListStageExecutionsRequest, opts ...grpc.CallOption) (*ListStageExecutionsResponse, error)
	ListStageEvents(ctx context.Context, in *ListStageEventsRequest, opts ...grpc.CallOption) (*ListStageEventsResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	ListConnectionGroupFieldSets(ctx context.Context, in *ListConnectionGroupFieldSetsRequest, opts ...grpc.CallOption) (*ListConnectionGroupFieldSetsResponse, error)
	UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error)
	DeleteStage(ctx context.Context, in *DeleteStageRequest, opts ...grpc.CallOption) (*DeleteStageResponse, error)
	UpdateEventSource(ctx context.Context, in *UpdateEventSourceRequest, opts ...grpc.CallOption) (*UpdateEventSourceResponse, error)
	DeleteEventSource(ctx context.Context, in *DeleteEventSourceRequest, opts ...grpc.CallOption) (*DeleteEventSourceResponse, error)
	UpdateConnectionGroup(ctx context.Context, in *UpdateConnectionGroupRequest, opts ...grpc.CallOption) (*UpdateConnectionGroupResponse, error)
	DeleteConnectionGroup(ctx context.Context, in *DeleteConnectionGroupRequest, opts ...grpc.CallOption) (*DeleteConnectionGroupResponse, error)
	ApproveStageEvent(ctx context.Context, in *ApproveStageEventRequest, opts ...grpc.CallOption) (*ApproveStageEventResponse, error)
	DiscardStageEvent(ctx context.Context, in *DiscardStageEventRequest, opts ...grpc.CallOption) (*DiscardStageEventResponse, error)
	CancelStageExecution(ctx context.Context, in *CancelStageExecutionRequest, opts ...grpc.CallOption) (*CancelStageExecutionResponse, error)
	ListEventRejections(ctx context.Context, in *ListEventRejectionsRequest, opts ...grpc.CallOption) (*ListEventRejectionsResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error)
}

type superplaneClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperplaneClient(cc grpc.ClientConnInterface) SuperplaneClient {
	return &superplaneClient{cc}
}

func (c *superplaneClient) ListCanvases(ctx context.Context, in *ListCanvasesRequest, opts ...grpc.CallOption) (*ListCanvasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCanvasesResponse)
	err := c.cc.Invoke(ctx, Superplane_ListCanvases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateCanvas(ctx context.Context, in *CreateCanvasRequest, opts ...grpc.CallOption) (*CreateCanvasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCanvasResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateCanvas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DeleteCanvas(ctx context.Context, in *DeleteCanvasRequest, opts ...grpc.CallOption) (*DeleteCanvasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCanvasResponse)
	err := c.cc.Invoke(ctx, Superplane_DeleteCanvas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateConnectionGroup(ctx context.Context, in *CreateConnectionGroupRequest, opts ...grpc.CallOption) (*CreateConnectionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionGroupResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateConnectionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateEventSource(ctx context.Context, in *CreateEventSourceRequest, opts ...grpc.CallOption) (*CreateEventSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEventSourceResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateEventSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ResetEventSourceKey(ctx context.Context, in *ResetEventSourceKeyRequest, opts ...grpc.CallOption) (*ResetEventSourceKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetEventSourceKeyResponse)
	err := c.cc.Invoke(ctx, Superplane_ResetEventSourceKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateStage(ctx context.Context, in *CreateStageRequest, opts ...grpc.CallOption) (*CreateStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStageResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DescribeCanvas(ctx context.Context, in *DescribeCanvasRequest, opts ...grpc.CallOption) (*DescribeCanvasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeCanvasResponse)
	err := c.cc.Invoke(ctx, Superplane_DescribeCanvas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DescribeStage(ctx context.Context, in *DescribeStageRequest, opts ...grpc.CallOption) (*DescribeStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeStageResponse)
	err := c.cc.Invoke(ctx, Superplane_DescribeStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DescribeEventSource(ctx context.Context, in *DescribeEventSourceRequest, opts ...grpc.CallOption) (*DescribeEventSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeEventSourceResponse)
	err := c.cc.Invoke(ctx, Superplane_DescribeEventSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DescribeConnectionGroup(ctx context.Context, in *DescribeConnectionGroupRequest, opts ...grpc.CallOption) (*DescribeConnectionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeConnectionGroupResponse)
	err := c.cc.Invoke(ctx, Superplane_DescribeConnectionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListStages(ctx context.Context, in *ListStagesRequest, opts ...grpc.CallOption) (*ListStagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStagesResponse)
	err := c.cc.Invoke(ctx, Superplane_ListStages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListEventSources(ctx context.Context, in *ListEventSourcesRequest, opts ...grpc.CallOption) (*ListEventSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventSourcesResponse)
	err := c.cc.Invoke(ctx, Superplane_ListEventSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListConnectionGroups(ctx context.Context, in *ListConnectionGroupsRequest, opts ...grpc.CallOption) (*ListConnectionGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectionGroupsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListConnectionGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListStageExecutions(ctx context.Context, in *ListStageExecutionsRequest, opts ...grpc.CallOption) (*ListStageExecutionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStageExecutionsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListStageExecutions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListStageEvents(ctx context.Context, in *ListStageEventsRequest, opts ...grpc.CallOption) (*ListStageEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStageEventsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListStageEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListConnectionGroupFieldSets(ctx context.Context, in *ListConnectionGroupFieldSetsRequest, opts ...grpc.CallOption) (*ListConnectionGroupFieldSetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectionGroupFieldSetsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListConnectionGroupFieldSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStageResponse)
	err := c.cc.Invoke(ctx, Superplane_UpdateStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DeleteStage(ctx context.Context, in *DeleteStageRequest, opts ...grpc.CallOption) (*DeleteStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStageResponse)
	err := c.cc.Invoke(ctx, Superplane_DeleteStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) UpdateEventSource(ctx context.Context, in *UpdateEventSourceRequest, opts ...grpc.CallOption) (*UpdateEventSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEventSourceResponse)
	err := c.cc.Invoke(ctx, Superplane_UpdateEventSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DeleteEventSource(ctx context.Context, in *DeleteEventSourceRequest, opts ...grpc.CallOption) (*DeleteEventSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEventSourceResponse)
	err := c.cc.Invoke(ctx, Superplane_DeleteEventSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) UpdateConnectionGroup(ctx context.Context, in *UpdateConnectionGroupRequest, opts ...grpc.CallOption) (*UpdateConnectionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConnectionGroupResponse)
	err := c.cc.Invoke(ctx, Superplane_UpdateConnectionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DeleteConnectionGroup(ctx context.Context, in *DeleteConnectionGroupRequest, opts ...grpc.CallOption) (*DeleteConnectionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConnectionGroupResponse)
	err := c.cc.Invoke(ctx, Superplane_DeleteConnectionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ApproveStageEvent(ctx context.Context, in *ApproveStageEventRequest, opts ...grpc.CallOption) (*ApproveStageEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveStageEventResponse)
	err := c.cc.Invoke(ctx, Superplane_ApproveStageEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DiscardStageEvent(ctx context.Context, in *DiscardStageEventRequest, opts ...grpc.CallOption) (*DiscardStageEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscardStageEventResponse)
	err := c.cc.Invoke(ctx, Superplane_DiscardStageEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CancelStageExecution(ctx context.Context, in *CancelStageExecutionRequest, opts ...grpc.CallOption) (*CancelStageExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelStageExecutionResponse)
	err := c.cc.Invoke(ctx, Superplane_CancelStageExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListEventRejections(ctx context.Context, in *ListEventRejectionsRequest, opts ...grpc.CallOption) (*ListEventRejectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventRejectionsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListEventRejections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, Superplane_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, Superplane_RemoveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAlertsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperplaneServer is the server API for Superplane service.
// All implementations should embed UnimplementedSuperplaneServer
// for forward compatibility.
type SuperplaneServer interface {
	ListCanvases(context.Context, *ListCanvasesRequest) (*ListCanvasesResponse, error)
	CreateCanvas(context.Context, *CreateCanvasRequest) (*CreateCanvasResponse, error)
	DeleteCanvas(context.Context, *DeleteCanvasRequest) (*DeleteCanvasResponse, error)
	CreateConnectionGroup(context.Context, *CreateConnectionGroupRequest) (*CreateConnectionGroupResponse, error)
	CreateEventSource(context.Context, *CreateEventSourceRequest) (*CreateEventSourceResponse, error)
	ResetEventSourceKey(context.Context, *ResetEventSourceKeyRequest) (*ResetEventSourceKeyResponse, error)
	CreateStage(context.Context, *CreateStageRequest) (*CreateStageResponse, error)
	DescribeCanvas(context.Context, *DescribeCanvasRequest) (*DescribeCanvasResponse, error)
	DescribeStage(context.Context, *DescribeStageRequest) (*DescribeStageResponse, error)
	DescribeEventSource(context.Context, *DescribeEventSourceRequest) (*DescribeEventSourceResponse, error)
	DescribeConnectionGroup(context.Context, *DescribeConnectionGroupRequest) (*DescribeConnectionGroupResponse, error)
	ListStages(context.Context, *ListStagesRequest) (*ListStagesResponse, error)
	ListEventSources(context.Context, *ListEventSourcesRequest) (*ListEventSourcesResponse, error)
	ListConnectionGroups(context.Context, *ListConnectionGroupsRequest) (*ListConnectionGroupsResponse, error)
	ListStageExecutions(context.Context, *ListStageExecutionsRequest) (*ListStageExecutionsResponse, error)
	ListStageEvents(context.Context, *ListStageEventsRequest) (*ListStageEventsResponse, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	ListConnectionGroupFieldSets(context.Context, *ListConnectionGroupFieldSetsRequest) (*ListConnectionGroupFieldSetsResponse, error)
	UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error)
	DeleteStage(context.Context, *DeleteStageRequest) (*DeleteStageResponse, error)
	UpdateEventSource(context.Context, *UpdateEventSourceRequest) (*UpdateEventSourceResponse, error)
	DeleteEventSource(context.Context, *DeleteEventSourceRequest) (*DeleteEventSourceResponse, error)
	UpdateConnectionGroup(context.Context, *UpdateConnectionGroupRequest) (*UpdateConnectionGroupResponse, error)
	DeleteConnectionGroup(context.Context, *DeleteConnectionGroupRequest) (*DeleteConnectionGroupResponse, error)
	ApproveStageEvent(context.Context, *ApproveStageEventRequest) (*ApproveStageEventResponse, error)
	DiscardStageEvent(context.Context, *DiscardStageEventRequest) (*DiscardStageEventResponse, error)
	CancelStageExecution(context.Context, *CancelStageExecutionRequest) (*CancelStageExecutionResponse, error)
	ListEventRejections(context.Context, *ListEventRejectionsRequest) (*ListEventRejectionsResponse, error)
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error)
}

// UnimplementedSuperplaneServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSuperplaneServer struct{}

func (UnimplementedSuperplaneServer) ListCanvases(context.Context, *ListCanvasesRequest) (*ListCanvasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCanvases not implemented")
}
func (UnimplementedSuperplaneServer) CreateCanvas(context.Context, *CreateCanvasRequest) (*CreateCanvasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCanvas not implemented")
}
func (UnimplementedSuperplaneServer) DeleteCanvas(context.Context, *DeleteCanvasRequest) (*DeleteCanvasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCanvas not implemented")
}
func (UnimplementedSuperplaneServer) CreateConnectionGroup(context.Context, *CreateConnectionGroupRequest) (*CreateConnectionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectionGroup not implemented")
}
func (UnimplementedSuperplaneServer) CreateEventSource(context.Context, *CreateEventSourceRequest) (*CreateEventSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventSource not implemented")
}
func (UnimplementedSuperplaneServer) ResetEventSourceKey(context.Context, *ResetEventSourceKeyRequest) (*ResetEventSourceKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEventSourceKey not implemented")
}
func (UnimplementedSuperplaneServer) CreateStage(context.Context, *CreateStageRequest) (*CreateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStage not implemented")
}
func (UnimplementedSuperplaneServer) DescribeCanvas(context.Context, *DescribeCanvasRequest) (*DescribeCanvasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCanvas not implemented")
}
func (UnimplementedSuperplaneServer) DescribeStage(context.Context, *DescribeStageRequest) (*DescribeStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStage not implemented")
}
func (UnimplementedSuperplaneServer) DescribeEventSource(context.Context, *DescribeEventSourceRequest) (*DescribeEventSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEventSource not implemented")
}
func (UnimplementedSuperplaneServer) DescribeConnectionGroup(context.Context, *DescribeConnectionGroupRequest) (*DescribeConnectionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeConnectionGroup not implemented")
}
func (UnimplementedSuperplaneServer) ListStages(context.Context, *ListStagesRequest) (*ListStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStages not implemented")
}
func (UnimplementedSuperplaneServer) ListEventSources(context.Context, *ListEventSourcesRequest) (*ListEventSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventSources not implemented")
}
func (UnimplementedSuperplaneServer) ListConnectionGroups(context.Context, *ListConnectionGroupsRequest) (*ListConnectionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectionGroups not implemented")
}
func (UnimplementedSuperplaneServer) ListStageExecutions(context.Context, *ListStageExecutionsRequest) (*ListStageExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStageExecutions not implemented")
}
func (UnimplementedSuperplaneServer) ListStageEvents(context.Context, *ListStageEventsRequest) (*ListStageEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStageEvents not implemented")
}
func (UnimplementedSuperplaneServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedSuperplaneServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedSuperplaneServer) ListConnectionGroupFieldSets(context.Context, *ListConnectionGroupFieldSetsRequest) (*ListConnectionGroupFieldSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectionGroupFieldSets not implemented")
}
func (UnimplementedSuperplaneServer) UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStage not implemented")
}
func (UnimplementedSuperplaneServer) DeleteStage(context.Context, *DeleteStageRequest) (*DeleteStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStage not implemented")
}
func (UnimplementedSuperplaneServer) UpdateEventSource(context.Context, *UpdateEventSourceRequest) (*UpdateEventSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventSource not implemented")
}
func (UnimplementedSuperplaneServer) DeleteEventSource(context.Context, *DeleteEventSourceRequest) (*DeleteEventSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventSource not implemented")
}
func (UnimplementedSuperplaneServer) UpdateConnectionGroup(context.Context, *UpdateConnectionGroupRequest) (*UpdateConnectionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectionGroup not implemented")
}
func (UnimplementedSuperplaneServer) DeleteConnectionGroup(context.Context, *DeleteConnectionGroupRequest) (*DeleteConnectionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectionGroup not implemented")
}
func (UnimplementedSuperplaneServer) ApproveStageEvent(context.Context, *ApproveStageEventRequest) (*ApproveStageEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveStageEvent not implemented")
}
func (UnimplementedSuperplaneServer) DiscardStageEvent(context.Context, *DiscardStageEventRequest) (*DiscardStageEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardStageEvent not implemented")
}
func (UnimplementedSuperplaneServer) CancelStageExecution(context.Context, *CancelStageExecutionRequest) (*CancelStageExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelStageExecution not implemented")
}
func (UnimplementedSuperplaneServer) ListEventRejections(context.Context, *ListEventRejectionsRequest) (*ListEventRejectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventRejections not implemented")
}
func (UnimplementedSuperplaneServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedSuperplaneServer) RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedSuperplaneServer) ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlerts not implemented")
}
func (UnimplementedSuperplaneServer) testEmbeddedByValue() {}

// UnsafeSuperplaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperplaneServer will
// result in compilation errors.
type UnsafeSuperplaneServer interface {
	mustEmbedUnimplementedSuperplaneServer()
}

func RegisterSuperplaneServer(s grpc.ServiceRegistrar, srv SuperplaneServer) {
	// If the following call pancis, it indicates UnimplementedSuperplaneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Superplane_ServiceDesc, srv)
}

func _Superplane_ListCanvases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCanvasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListCanvases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListCanvases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListCanvases(ctx, req.(*ListCanvasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateCanvas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCanvasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateCanvas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateCanvas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateCanvas(ctx, req.(*CreateCanvasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DeleteCanvas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCanvasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DeleteCanvas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DeleteCanvas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DeleteCanvas(ctx, req.(*DeleteCanvasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateConnectionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateConnectionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateConnectionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateConnectionGroup(ctx, req.(*CreateConnectionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateEventSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateEventSource(ctx, req.(*CreateEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ResetEventSourceKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetEventSourceKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ResetEventSourceKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ResetEventSourceKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ResetEventSourceKey(ctx, req.(*ResetEventSourceKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateStage(ctx, req.(*CreateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DescribeCanvas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCanvasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DescribeCanvas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DescribeCanvas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DescribeCanvas(ctx, req.(*DescribeCanvasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DescribeStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DescribeStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DescribeStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DescribeStage(ctx, req.(*DescribeStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DescribeEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DescribeEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DescribeEventSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DescribeEventSource(ctx, req.(*DescribeEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DescribeConnectionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeConnectionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DescribeConnectionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DescribeConnectionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DescribeConnectionGroup(ctx, req.(*DescribeConnectionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListStages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListStages(ctx, req.(*ListStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListEventSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListEventSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListEventSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListEventSources(ctx, req.(*ListEventSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListConnectionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListConnectionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListConnectionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListConnectionGroups(ctx, req.(*ListConnectionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListStageExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStageExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListStageExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListStageExecutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListStageExecutions(ctx, req.(*ListStageExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListStageEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStageEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListStageEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListStageEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListStageEvents(ctx, req.(*ListStageEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListConnectionGroupFieldSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionGroupFieldSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListConnectionGroupFieldSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListConnectionGroupFieldSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListConnectionGroupFieldSets(ctx, req.(*ListConnectionGroupFieldSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_UpdateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).UpdateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_UpdateStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).UpdateStage(ctx, req.(*UpdateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DeleteStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DeleteStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DeleteStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DeleteStage(ctx, req.(*DeleteStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_UpdateEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).UpdateEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_UpdateEventSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).UpdateEventSource(ctx, req.(*UpdateEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DeleteEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DeleteEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DeleteEventSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DeleteEventSource(ctx, req.(*DeleteEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_UpdateConnectionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).UpdateConnectionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_UpdateConnectionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).UpdateConnectionGroup(ctx, req.(*UpdateConnectionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DeleteConnectionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DeleteConnectionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DeleteConnectionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DeleteConnectionGroup(ctx, req.(*DeleteConnectionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ApproveStageEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveStageEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ApproveStageEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ApproveStageEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ApproveStageEvent(ctx, req.(*ApproveStageEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DiscardStageEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardStageEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DiscardStageEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DiscardStageEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DiscardStageEvent(ctx, req.(*DiscardStageEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CancelStageExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelStageExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CancelStageExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CancelStageExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CancelStageExecution(ctx, req.(*CancelStageExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListEventRejections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventRejectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListEventRejections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListEventRejections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListEventRejections(ctx, req.(*ListEventRejectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListAlerts(ctx, req.(*ListAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Superplane_ServiceDesc is the grpc.ServiceDesc for Superplane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Superplane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Superplane.Superplane",
	HandlerType: (*SuperplaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCanvases",
			Handler:    _Superplane_ListCanvases_Handler,
		},
		{
			MethodName: "CreateCanvas",
			Handler:    _Superplane_CreateCanvas_Handler,
		},
		{
			MethodName: "DeleteCanvas",
			Handler:    _Superplane_DeleteCanvas_Handler,
		},
		{
			MethodName: "CreateConnectionGroup",
			Handler:    _Superplane_CreateConnectionGroup_Handler,
		},
		{
			MethodName: "CreateEventSource",
			Handler:    _Superplane_CreateEventSource_Handler,
		},
		{
			MethodName: "ResetEventSourceKey",
			Handler:    _Superplane_ResetEventSourceKey_Handler,
		},
		{
			MethodName: "CreateStage",
			Handler:    _Superplane_CreateStage_Handler,
		},
		{
			MethodName: "DescribeCanvas",
			Handler:    _Superplane_DescribeCanvas_Handler,
		},
		{
			MethodName: "DescribeStage",
			Handler:    _Superplane_DescribeStage_Handler,
		},
		{
			MethodName: "DescribeEventSource",
			Handler:    _Superplane_DescribeEventSource_Handler,
		},
		{
			MethodName: "DescribeConnectionGroup",
			Handler:    _Superplane_DescribeConnectionGroup_Handler,
		},
		{
			MethodName: "ListStages",
			Handler:    _Superplane_ListStages_Handler,
		},
		{
			MethodName: "ListEventSources",
			Handler:    _Superplane_ListEventSources_Handler,
		},
		{
			MethodName: "ListConnectionGroups",
			Handler:    _Superplane_ListConnectionGroups_Handler,
		},
		{
			MethodName: "ListStageExecutions",
			Handler:    _Superplane_ListStageExecutions_Handler,
		},
		{
			MethodName: "ListStageEvents",
			Handler:    _Superplane_ListStageEvents_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _Superplane_ListEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _Superplane_CreateEvent_Handler,
		},
		{
			MethodName: "ListConnectionGroupFieldSets",
			Handler:    _Superplane_ListConnectionGroupFieldSets_Handler,
		},
		{
			MethodName: "UpdateStage",
			Handler:    _Superplane_UpdateStage_Handler,
		},
		{
			MethodName: "DeleteStage",
			Handler:    _Superplane_DeleteStage_Handler,
		},
		{
			MethodName: "UpdateEventSource",
			Handler:    _Superplane_UpdateEventSource_Handler,
		},
		{
			MethodName: "DeleteEventSource",
			Handler:    _Superplane_DeleteEventSource_Handler,
		},
		{
			MethodName: "UpdateConnectionGroup",
			Handler:    _Superplane_UpdateConnectionGroup_Handler,
		},
		{
			MethodName: "DeleteConnectionGroup",
			Handler:    _Superplane_DeleteConnectionGroup_Handler,
		},
		{
			MethodName: "ApproveStageEvent",
			Handler:    _Superplane_ApproveStageEvent_Handler,
		},
		{
			MethodName: "DiscardStageEvent",
			Handler:    _Superplane_DiscardStageEvent_Handler,
		},
		{
			MethodName: "CancelStageExecution",
			Handler:    _Superplane_CancelStageExecution_Handler,
		},
		{
			MethodName: "ListEventRejections",
			Handler:    _Superplane_ListEventRejections_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Superplane_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _Superplane_RemoveUser_Handler,
		},
		{
			MethodName: "ListAlerts",
			Handler:    _Superplane_ListAlerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canvases.proto",
}
