// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.8
// source: components.proto

package components

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Components_ListComponents_FullMethodName       = "/Superplane.Components.Components/ListComponents"
	Components_DescribeComponent_FullMethodName    = "/Superplane.Components.Components/DescribeComponent"
	Components_ListComponentActions_FullMethodName = "/Superplane.Components.Components/ListComponentActions"
)

// ComponentsClient is the client API for Components service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentsClient interface {
	ListComponents(ctx context.Context, in *ListComponentsRequest, opts ...grpc.CallOption) (*ListComponentsResponse, error)
	DescribeComponent(ctx context.Context, in *DescribeComponentRequest, opts ...grpc.CallOption) (*DescribeComponentResponse, error)
	ListComponentActions(ctx context.Context, in *ListComponentActionsRequest, opts ...grpc.CallOption) (*ListComponentActionsResponse, error)
}

type componentsClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentsClient(cc grpc.ClientConnInterface) ComponentsClient {
	return &componentsClient{cc}
}

func (c *componentsClient) ListComponents(ctx context.Context, in *ListComponentsRequest, opts ...grpc.CallOption) (*ListComponentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListComponentsResponse)
	err := c.cc.Invoke(ctx, Components_ListComponents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentsClient) DescribeComponent(ctx context.Context, in *DescribeComponentRequest, opts ...grpc.CallOption) (*DescribeComponentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeComponentResponse)
	err := c.cc.Invoke(ctx, Components_DescribeComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentsClient) ListComponentActions(ctx context.Context, in *ListComponentActionsRequest, opts ...grpc.CallOption) (*ListComponentActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListComponentActionsResponse)
	err := c.cc.Invoke(ctx, Components_ListComponentActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentsServer is the server API for Components service.
// All implementations should embed UnimplementedComponentsServer
// for forward compatibility.
type ComponentsServer interface {
	ListComponents(context.Context, *ListComponentsRequest) (*ListComponentsResponse, error)
	DescribeComponent(context.Context, *DescribeComponentRequest) (*DescribeComponentResponse, error)
	ListComponentActions(context.Context, *ListComponentActionsRequest) (*ListComponentActionsResponse, error)
}

// UnimplementedComponentsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComponentsServer struct{}

func (UnimplementedComponentsServer) ListComponents(context.Context, *ListComponentsRequest) (*ListComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponents not implemented")
}
func (UnimplementedComponentsServer) DescribeComponent(context.Context, *DescribeComponentRequest) (*DescribeComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeComponent not implemented")
}
func (UnimplementedComponentsServer) ListComponentActions(context.Context, *ListComponentActionsRequest) (*ListComponentActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponentActions not implemented")
}
func (UnimplementedComponentsServer) testEmbeddedByValue() {}

// UnsafeComponentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentsServer will
// result in compilation errors.
type UnsafeComponentsServer interface {
	mustEmbedUnimplementedComponentsServer()
}

func RegisterComponentsServer(s grpc.ServiceRegistrar, srv ComponentsServer) {
	// If the following call pancis, it indicates UnimplementedComponentsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Components_ServiceDesc, srv)
}

func _Components_ListComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentsServer).ListComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Components_ListComponents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentsServer).ListComponents(ctx, req.(*ListComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Components_DescribeComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentsServer).DescribeComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Components_DescribeComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentsServer).DescribeComponent(ctx, req.(*DescribeComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Components_ListComponentActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComponentActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentsServer).ListComponentActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Components_ListComponentActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentsServer).ListComponentActions(ctx, req.(*ListComponentActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Components_ServiceDesc is the grpc.ServiceDesc for Components service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Components_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Superplane.Components.Components",
	HandlerType: (*ComponentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListComponents",
			Handler:    _Components_ListComponents_Handler,
		},
		{
			MethodName: "DescribeComponent",
			Handler:    _Components_DescribeComponent_Handler,
		},
		{
			MethodName: "ListComponentActions",
			Handler:    _Components_ListComponentActions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components.proto",
}
