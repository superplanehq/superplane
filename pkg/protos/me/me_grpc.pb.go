// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.8
// source: me.proto

package me

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Me_Me_FullMethodName              = "/Superplane.Me.Me/Me"
	Me_RegenerateToken_FullMethodName = "/Superplane.Me.Me/RegenerateToken"
)

// MeClient is the client API for Me service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeClient interface {
	// Endpoint for getting the currently authenticated user.
	Me(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*User, error)
	// Endpoint for regenerating the currently authenticated user's API token.
	RegenerateToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RegenerateTokenResponse, error)
}

type meClient struct {
	cc grpc.ClientConnInterface
}

func NewMeClient(cc grpc.ClientConnInterface) MeClient {
	return &meClient{cc}
}

func (c *meClient) Me(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Me_Me_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meClient) RegenerateToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RegenerateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegenerateTokenResponse)
	err := c.cc.Invoke(ctx, Me_RegenerateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeServer is the server API for Me service.
// All implementations should embed UnimplementedMeServer
// for forward compatibility.
type MeServer interface {
	// Endpoint for getting the currently authenticated user.
	Me(context.Context, *empty.Empty) (*User, error)
	// Endpoint for regenerating the currently authenticated user's API token.
	RegenerateToken(context.Context, *empty.Empty) (*RegenerateTokenResponse, error)
}

// UnimplementedMeServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeServer struct{}

func (UnimplementedMeServer) Me(context.Context, *empty.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedMeServer) RegenerateToken(context.Context, *empty.Empty) (*RegenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateToken not implemented")
}
func (UnimplementedMeServer) testEmbeddedByValue() {}

// UnsafeMeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeServer will
// result in compilation errors.
type UnsafeMeServer interface {
	mustEmbedUnimplementedMeServer()
}

func RegisterMeServer(s grpc.ServiceRegistrar, srv MeServer) {
	// If the following call pancis, it indicates UnimplementedMeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Me_ServiceDesc, srv)
}

func _Me_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Me_Me_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeServer).Me(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Me_RegenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeServer).RegenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Me_RegenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeServer).RegenerateToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Me_ServiceDesc is the grpc.ServiceDesc for Me service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Me_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Superplane.Me.Me",
	HandlerType: (*MeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Me",
			Handler:    _Me_Me_Handler,
		},
		{
			MethodName: "RegenerateToken",
			Handler:    _Me_RegenerateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "me.proto",
}
