// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.8
// source: superplane.proto

package superplane

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Superplane_ListCanvases_FullMethodName                 = "/Superplane.Superplane/ListCanvases"
	Superplane_CreateCanvas_FullMethodName                 = "/Superplane.Superplane/CreateCanvas"
	Superplane_CreateSecret_FullMethodName                 = "/Superplane.Superplane/CreateSecret"
	Superplane_CreateConnectionGroup_FullMethodName        = "/Superplane.Superplane/CreateConnectionGroup"
	Superplane_ListIntegrations_FullMethodName             = "/Superplane.Superplane/ListIntegrations"
	Superplane_DescribeIntegration_FullMethodName          = "/Superplane.Superplane/DescribeIntegration"
	Superplane_CreateIntegration_FullMethodName            = "/Superplane.Superplane/CreateIntegration"
	Superplane_CreateEventSource_FullMethodName            = "/Superplane.Superplane/CreateEventSource"
	Superplane_ResetEventSourceKey_FullMethodName          = "/Superplane.Superplane/ResetEventSourceKey"
	Superplane_CreateStage_FullMethodName                  = "/Superplane.Superplane/CreateStage"
	Superplane_DescribeCanvas_FullMethodName               = "/Superplane.Superplane/DescribeCanvas"
	Superplane_DescribeStage_FullMethodName                = "/Superplane.Superplane/DescribeStage"
	Superplane_DescribeEventSource_FullMethodName          = "/Superplane.Superplane/DescribeEventSource"
	Superplane_DescribeConnectionGroup_FullMethodName      = "/Superplane.Superplane/DescribeConnectionGroup"
	Superplane_DescribeSecret_FullMethodName               = "/Superplane.Superplane/DescribeSecret"
	Superplane_ListStages_FullMethodName                   = "/Superplane.Superplane/ListStages"
	Superplane_ListEventSources_FullMethodName             = "/Superplane.Superplane/ListEventSources"
	Superplane_ListConnectionGroups_FullMethodName         = "/Superplane.Superplane/ListConnectionGroups"
	Superplane_ListSecrets_FullMethodName                  = "/Superplane.Superplane/ListSecrets"
	Superplane_ListStageEvents_FullMethodName              = "/Superplane.Superplane/ListStageEvents"
	Superplane_ListConnectionGroupFieldSets_FullMethodName = "/Superplane.Superplane/ListConnectionGroupFieldSets"
	Superplane_UpdateStage_FullMethodName                  = "/Superplane.Superplane/UpdateStage"
	Superplane_UpdateConnectionGroup_FullMethodName        = "/Superplane.Superplane/UpdateConnectionGroup"
	Superplane_UpdateSecret_FullMethodName                 = "/Superplane.Superplane/UpdateSecret"
	Superplane_ApproveStageEvent_FullMethodName            = "/Superplane.Superplane/ApproveStageEvent"
	Superplane_DeleteSecret_FullMethodName                 = "/Superplane.Superplane/DeleteSecret"
)

// SuperplaneClient is the client API for Superplane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperplaneClient interface {
	ListCanvases(ctx context.Context, in *ListCanvasesRequest, opts ...grpc.CallOption) (*ListCanvasesResponse, error)
	CreateCanvas(ctx context.Context, in *CreateCanvasRequest, opts ...grpc.CallOption) (*CreateCanvasResponse, error)
	CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	CreateConnectionGroup(ctx context.Context, in *CreateConnectionGroupRequest, opts ...grpc.CallOption) (*CreateConnectionGroupResponse, error)
	ListIntegrations(ctx context.Context, in *ListIntegrationsRequest, opts ...grpc.CallOption) (*ListIntegrationsResponse, error)
	DescribeIntegration(ctx context.Context, in *DescribeIntegrationRequest, opts ...grpc.CallOption) (*DescribeIntegrationResponse, error)
	CreateIntegration(ctx context.Context, in *CreateIntegrationRequest, opts ...grpc.CallOption) (*CreateIntegrationResponse, error)
	CreateEventSource(ctx context.Context, in *CreateEventSourceRequest, opts ...grpc.CallOption) (*CreateEventSourceResponse, error)
	ResetEventSourceKey(ctx context.Context, in *ResetEventSourceKeyRequest, opts ...grpc.CallOption) (*ResetEventSourceKeyResponse, error)
	CreateStage(ctx context.Context, in *CreateStageRequest, opts ...grpc.CallOption) (*CreateStageResponse, error)
	DescribeCanvas(ctx context.Context, in *DescribeCanvasRequest, opts ...grpc.CallOption) (*DescribeCanvasResponse, error)
	DescribeStage(ctx context.Context, in *DescribeStageRequest, opts ...grpc.CallOption) (*DescribeStageResponse, error)
	DescribeEventSource(ctx context.Context, in *DescribeEventSourceRequest, opts ...grpc.CallOption) (*DescribeEventSourceResponse, error)
	DescribeConnectionGroup(ctx context.Context, in *DescribeConnectionGroupRequest, opts ...grpc.CallOption) (*DescribeConnectionGroupResponse, error)
	DescribeSecret(ctx context.Context, in *DescribeSecretRequest, opts ...grpc.CallOption) (*DescribeSecretResponse, error)
	ListStages(ctx context.Context, in *ListStagesRequest, opts ...grpc.CallOption) (*ListStagesResponse, error)
	ListEventSources(ctx context.Context, in *ListEventSourcesRequest, opts ...grpc.CallOption) (*ListEventSourcesResponse, error)
	ListConnectionGroups(ctx context.Context, in *ListConnectionGroupsRequest, opts ...grpc.CallOption) (*ListConnectionGroupsResponse, error)
	ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error)
	ListStageEvents(ctx context.Context, in *ListStageEventsRequest, opts ...grpc.CallOption) (*ListStageEventsResponse, error)
	ListConnectionGroupFieldSets(ctx context.Context, in *ListConnectionGroupFieldSetsRequest, opts ...grpc.CallOption) (*ListConnectionGroupFieldSetsResponse, error)
	UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error)
	UpdateConnectionGroup(ctx context.Context, in *UpdateConnectionGroupRequest, opts ...grpc.CallOption) (*UpdateConnectionGroupResponse, error)
	UpdateSecret(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*UpdateSecretResponse, error)
	ApproveStageEvent(ctx context.Context, in *ApproveStageEventRequest, opts ...grpc.CallOption) (*ApproveStageEventResponse, error)
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
}

type superplaneClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperplaneClient(cc grpc.ClientConnInterface) SuperplaneClient {
	return &superplaneClient{cc}
}

func (c *superplaneClient) ListCanvases(ctx context.Context, in *ListCanvasesRequest, opts ...grpc.CallOption) (*ListCanvasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCanvasesResponse)
	err := c.cc.Invoke(ctx, Superplane_ListCanvases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateCanvas(ctx context.Context, in *CreateCanvasRequest, opts ...grpc.CallOption) (*CreateCanvasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCanvasResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateCanvas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSecretResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateConnectionGroup(ctx context.Context, in *CreateConnectionGroupRequest, opts ...grpc.CallOption) (*CreateConnectionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionGroupResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateConnectionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListIntegrations(ctx context.Context, in *ListIntegrationsRequest, opts ...grpc.CallOption) (*ListIntegrationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntegrationsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListIntegrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DescribeIntegration(ctx context.Context, in *DescribeIntegrationRequest, opts ...grpc.CallOption) (*DescribeIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeIntegrationResponse)
	err := c.cc.Invoke(ctx, Superplane_DescribeIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateIntegration(ctx context.Context, in *CreateIntegrationRequest, opts ...grpc.CallOption) (*CreateIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIntegrationResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateEventSource(ctx context.Context, in *CreateEventSourceRequest, opts ...grpc.CallOption) (*CreateEventSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEventSourceResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateEventSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ResetEventSourceKey(ctx context.Context, in *ResetEventSourceKeyRequest, opts ...grpc.CallOption) (*ResetEventSourceKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetEventSourceKeyResponse)
	err := c.cc.Invoke(ctx, Superplane_ResetEventSourceKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) CreateStage(ctx context.Context, in *CreateStageRequest, opts ...grpc.CallOption) (*CreateStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStageResponse)
	err := c.cc.Invoke(ctx, Superplane_CreateStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DescribeCanvas(ctx context.Context, in *DescribeCanvasRequest, opts ...grpc.CallOption) (*DescribeCanvasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeCanvasResponse)
	err := c.cc.Invoke(ctx, Superplane_DescribeCanvas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DescribeStage(ctx context.Context, in *DescribeStageRequest, opts ...grpc.CallOption) (*DescribeStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeStageResponse)
	err := c.cc.Invoke(ctx, Superplane_DescribeStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DescribeEventSource(ctx context.Context, in *DescribeEventSourceRequest, opts ...grpc.CallOption) (*DescribeEventSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeEventSourceResponse)
	err := c.cc.Invoke(ctx, Superplane_DescribeEventSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DescribeConnectionGroup(ctx context.Context, in *DescribeConnectionGroupRequest, opts ...grpc.CallOption) (*DescribeConnectionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeConnectionGroupResponse)
	err := c.cc.Invoke(ctx, Superplane_DescribeConnectionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DescribeSecret(ctx context.Context, in *DescribeSecretRequest, opts ...grpc.CallOption) (*DescribeSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeSecretResponse)
	err := c.cc.Invoke(ctx, Superplane_DescribeSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListStages(ctx context.Context, in *ListStagesRequest, opts ...grpc.CallOption) (*ListStagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStagesResponse)
	err := c.cc.Invoke(ctx, Superplane_ListStages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListEventSources(ctx context.Context, in *ListEventSourcesRequest, opts ...grpc.CallOption) (*ListEventSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventSourcesResponse)
	err := c.cc.Invoke(ctx, Superplane_ListEventSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListConnectionGroups(ctx context.Context, in *ListConnectionGroupsRequest, opts ...grpc.CallOption) (*ListConnectionGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectionGroupsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListConnectionGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListStageEvents(ctx context.Context, in *ListStageEventsRequest, opts ...grpc.CallOption) (*ListStageEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStageEventsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListStageEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ListConnectionGroupFieldSets(ctx context.Context, in *ListConnectionGroupFieldSetsRequest, opts ...grpc.CallOption) (*ListConnectionGroupFieldSetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectionGroupFieldSetsResponse)
	err := c.cc.Invoke(ctx, Superplane_ListConnectionGroupFieldSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStageResponse)
	err := c.cc.Invoke(ctx, Superplane_UpdateStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) UpdateConnectionGroup(ctx context.Context, in *UpdateConnectionGroupRequest, opts ...grpc.CallOption) (*UpdateConnectionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConnectionGroupResponse)
	err := c.cc.Invoke(ctx, Superplane_UpdateConnectionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) UpdateSecret(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*UpdateSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSecretResponse)
	err := c.cc.Invoke(ctx, Superplane_UpdateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) ApproveStageEvent(ctx context.Context, in *ApproveStageEventRequest, opts ...grpc.CallOption) (*ApproveStageEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveStageEventResponse)
	err := c.cc.Invoke(ctx, Superplane_ApproveStageEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superplaneClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSecretResponse)
	err := c.cc.Invoke(ctx, Superplane_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperplaneServer is the server API for Superplane service.
// All implementations should embed UnimplementedSuperplaneServer
// for forward compatibility.
type SuperplaneServer interface {
	ListCanvases(context.Context, *ListCanvasesRequest) (*ListCanvasesResponse, error)
	CreateCanvas(context.Context, *CreateCanvasRequest) (*CreateCanvasResponse, error)
	CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
	CreateConnectionGroup(context.Context, *CreateConnectionGroupRequest) (*CreateConnectionGroupResponse, error)
	ListIntegrations(context.Context, *ListIntegrationsRequest) (*ListIntegrationsResponse, error)
	DescribeIntegration(context.Context, *DescribeIntegrationRequest) (*DescribeIntegrationResponse, error)
	CreateIntegration(context.Context, *CreateIntegrationRequest) (*CreateIntegrationResponse, error)
	CreateEventSource(context.Context, *CreateEventSourceRequest) (*CreateEventSourceResponse, error)
	ResetEventSourceKey(context.Context, *ResetEventSourceKeyRequest) (*ResetEventSourceKeyResponse, error)
	CreateStage(context.Context, *CreateStageRequest) (*CreateStageResponse, error)
	DescribeCanvas(context.Context, *DescribeCanvasRequest) (*DescribeCanvasResponse, error)
	DescribeStage(context.Context, *DescribeStageRequest) (*DescribeStageResponse, error)
	DescribeEventSource(context.Context, *DescribeEventSourceRequest) (*DescribeEventSourceResponse, error)
	DescribeConnectionGroup(context.Context, *DescribeConnectionGroupRequest) (*DescribeConnectionGroupResponse, error)
	DescribeSecret(context.Context, *DescribeSecretRequest) (*DescribeSecretResponse, error)
	ListStages(context.Context, *ListStagesRequest) (*ListStagesResponse, error)
	ListEventSources(context.Context, *ListEventSourcesRequest) (*ListEventSourcesResponse, error)
	ListConnectionGroups(context.Context, *ListConnectionGroupsRequest) (*ListConnectionGroupsResponse, error)
	ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error)
	ListStageEvents(context.Context, *ListStageEventsRequest) (*ListStageEventsResponse, error)
	ListConnectionGroupFieldSets(context.Context, *ListConnectionGroupFieldSetsRequest) (*ListConnectionGroupFieldSetsResponse, error)
	UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error)
	UpdateConnectionGroup(context.Context, *UpdateConnectionGroupRequest) (*UpdateConnectionGroupResponse, error)
	UpdateSecret(context.Context, *UpdateSecretRequest) (*UpdateSecretResponse, error)
	ApproveStageEvent(context.Context, *ApproveStageEventRequest) (*ApproveStageEventResponse, error)
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
}

// UnimplementedSuperplaneServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSuperplaneServer struct{}

func (UnimplementedSuperplaneServer) ListCanvases(context.Context, *ListCanvasesRequest) (*ListCanvasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCanvases not implemented")
}
func (UnimplementedSuperplaneServer) CreateCanvas(context.Context, *CreateCanvasRequest) (*CreateCanvasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCanvas not implemented")
}
func (UnimplementedSuperplaneServer) CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedSuperplaneServer) CreateConnectionGroup(context.Context, *CreateConnectionGroupRequest) (*CreateConnectionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectionGroup not implemented")
}
func (UnimplementedSuperplaneServer) ListIntegrations(context.Context, *ListIntegrationsRequest) (*ListIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrations not implemented")
}
func (UnimplementedSuperplaneServer) DescribeIntegration(context.Context, *DescribeIntegrationRequest) (*DescribeIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIntegration not implemented")
}
func (UnimplementedSuperplaneServer) CreateIntegration(context.Context, *CreateIntegrationRequest) (*CreateIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntegration not implemented")
}
func (UnimplementedSuperplaneServer) CreateEventSource(context.Context, *CreateEventSourceRequest) (*CreateEventSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventSource not implemented")
}
func (UnimplementedSuperplaneServer) ResetEventSourceKey(context.Context, *ResetEventSourceKeyRequest) (*ResetEventSourceKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEventSourceKey not implemented")
}
func (UnimplementedSuperplaneServer) CreateStage(context.Context, *CreateStageRequest) (*CreateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStage not implemented")
}
func (UnimplementedSuperplaneServer) DescribeCanvas(context.Context, *DescribeCanvasRequest) (*DescribeCanvasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCanvas not implemented")
}
func (UnimplementedSuperplaneServer) DescribeStage(context.Context, *DescribeStageRequest) (*DescribeStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStage not implemented")
}
func (UnimplementedSuperplaneServer) DescribeEventSource(context.Context, *DescribeEventSourceRequest) (*DescribeEventSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEventSource not implemented")
}
func (UnimplementedSuperplaneServer) DescribeConnectionGroup(context.Context, *DescribeConnectionGroupRequest) (*DescribeConnectionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeConnectionGroup not implemented")
}
func (UnimplementedSuperplaneServer) DescribeSecret(context.Context, *DescribeSecretRequest) (*DescribeSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSecret not implemented")
}
func (UnimplementedSuperplaneServer) ListStages(context.Context, *ListStagesRequest) (*ListStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStages not implemented")
}
func (UnimplementedSuperplaneServer) ListEventSources(context.Context, *ListEventSourcesRequest) (*ListEventSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventSources not implemented")
}
func (UnimplementedSuperplaneServer) ListConnectionGroups(context.Context, *ListConnectionGroupsRequest) (*ListConnectionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectionGroups not implemented")
}
func (UnimplementedSuperplaneServer) ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedSuperplaneServer) ListStageEvents(context.Context, *ListStageEventsRequest) (*ListStageEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStageEvents not implemented")
}
func (UnimplementedSuperplaneServer) ListConnectionGroupFieldSets(context.Context, *ListConnectionGroupFieldSetsRequest) (*ListConnectionGroupFieldSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectionGroupFieldSets not implemented")
}
func (UnimplementedSuperplaneServer) UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStage not implemented")
}
func (UnimplementedSuperplaneServer) UpdateConnectionGroup(context.Context, *UpdateConnectionGroupRequest) (*UpdateConnectionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectionGroup not implemented")
}
func (UnimplementedSuperplaneServer) UpdateSecret(context.Context, *UpdateSecretRequest) (*UpdateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedSuperplaneServer) ApproveStageEvent(context.Context, *ApproveStageEventRequest) (*ApproveStageEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveStageEvent not implemented")
}
func (UnimplementedSuperplaneServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedSuperplaneServer) testEmbeddedByValue() {}

// UnsafeSuperplaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperplaneServer will
// result in compilation errors.
type UnsafeSuperplaneServer interface {
	mustEmbedUnimplementedSuperplaneServer()
}

func RegisterSuperplaneServer(s grpc.ServiceRegistrar, srv SuperplaneServer) {
	// If the following call pancis, it indicates UnimplementedSuperplaneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Superplane_ServiceDesc, srv)
}

func _Superplane_ListCanvases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCanvasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListCanvases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListCanvases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListCanvases(ctx, req.(*ListCanvasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateCanvas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCanvasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateCanvas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateCanvas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateCanvas(ctx, req.(*CreateCanvasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateSecret(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateConnectionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateConnectionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateConnectionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateConnectionGroup(ctx, req.(*CreateConnectionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListIntegrations(ctx, req.(*ListIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DescribeIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DescribeIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DescribeIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DescribeIntegration(ctx, req.(*DescribeIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateIntegration(ctx, req.(*CreateIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateEventSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateEventSource(ctx, req.(*CreateEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ResetEventSourceKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetEventSourceKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ResetEventSourceKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ResetEventSourceKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ResetEventSourceKey(ctx, req.(*ResetEventSourceKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_CreateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).CreateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_CreateStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).CreateStage(ctx, req.(*CreateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DescribeCanvas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCanvasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DescribeCanvas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DescribeCanvas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DescribeCanvas(ctx, req.(*DescribeCanvasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DescribeStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DescribeStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DescribeStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DescribeStage(ctx, req.(*DescribeStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DescribeEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DescribeEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DescribeEventSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DescribeEventSource(ctx, req.(*DescribeEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DescribeConnectionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeConnectionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DescribeConnectionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DescribeConnectionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DescribeConnectionGroup(ctx, req.(*DescribeConnectionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DescribeSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DescribeSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DescribeSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DescribeSecret(ctx, req.(*DescribeSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListStages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListStages(ctx, req.(*ListStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListEventSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListEventSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListEventSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListEventSources(ctx, req.(*ListEventSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListConnectionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListConnectionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListConnectionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListConnectionGroups(ctx, req.(*ListConnectionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListSecrets(ctx, req.(*ListSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListStageEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStageEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListStageEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListStageEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListStageEvents(ctx, req.(*ListStageEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ListConnectionGroupFieldSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionGroupFieldSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ListConnectionGroupFieldSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ListConnectionGroupFieldSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ListConnectionGroupFieldSets(ctx, req.(*ListConnectionGroupFieldSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_UpdateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).UpdateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_UpdateStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).UpdateStage(ctx, req.(*UpdateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_UpdateConnectionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).UpdateConnectionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_UpdateConnectionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).UpdateConnectionGroup(ctx, req.(*UpdateConnectionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_UpdateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).UpdateSecret(ctx, req.(*UpdateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_ApproveStageEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveStageEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).ApproveStageEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_ApproveStageEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).ApproveStageEvent(ctx, req.(*ApproveStageEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Superplane_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperplaneServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Superplane_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperplaneServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Superplane_ServiceDesc is the grpc.ServiceDesc for Superplane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Superplane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Superplane.Superplane",
	HandlerType: (*SuperplaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCanvases",
			Handler:    _Superplane_ListCanvases_Handler,
		},
		{
			MethodName: "CreateCanvas",
			Handler:    _Superplane_CreateCanvas_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _Superplane_CreateSecret_Handler,
		},
		{
			MethodName: "CreateConnectionGroup",
			Handler:    _Superplane_CreateConnectionGroup_Handler,
		},
		{
			MethodName: "ListIntegrations",
			Handler:    _Superplane_ListIntegrations_Handler,
		},
		{
			MethodName: "DescribeIntegration",
			Handler:    _Superplane_DescribeIntegration_Handler,
		},
		{
			MethodName: "CreateIntegration",
			Handler:    _Superplane_CreateIntegration_Handler,
		},
		{
			MethodName: "CreateEventSource",
			Handler:    _Superplane_CreateEventSource_Handler,
		},
		{
			MethodName: "ResetEventSourceKey",
			Handler:    _Superplane_ResetEventSourceKey_Handler,
		},
		{
			MethodName: "CreateStage",
			Handler:    _Superplane_CreateStage_Handler,
		},
		{
			MethodName: "DescribeCanvas",
			Handler:    _Superplane_DescribeCanvas_Handler,
		},
		{
			MethodName: "DescribeStage",
			Handler:    _Superplane_DescribeStage_Handler,
		},
		{
			MethodName: "DescribeEventSource",
			Handler:    _Superplane_DescribeEventSource_Handler,
		},
		{
			MethodName: "DescribeConnectionGroup",
			Handler:    _Superplane_DescribeConnectionGroup_Handler,
		},
		{
			MethodName: "DescribeSecret",
			Handler:    _Superplane_DescribeSecret_Handler,
		},
		{
			MethodName: "ListStages",
			Handler:    _Superplane_ListStages_Handler,
		},
		{
			MethodName: "ListEventSources",
			Handler:    _Superplane_ListEventSources_Handler,
		},
		{
			MethodName: "ListConnectionGroups",
			Handler:    _Superplane_ListConnectionGroups_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _Superplane_ListSecrets_Handler,
		},
		{
			MethodName: "ListStageEvents",
			Handler:    _Superplane_ListStageEvents_Handler,
		},
		{
			MethodName: "ListConnectionGroupFieldSets",
			Handler:    _Superplane_ListConnectionGroupFieldSets_Handler,
		},
		{
			MethodName: "UpdateStage",
			Handler:    _Superplane_UpdateStage_Handler,
		},
		{
			MethodName: "UpdateConnectionGroup",
			Handler:    _Superplane_UpdateConnectionGroup_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _Superplane_UpdateSecret_Handler,
		},
		{
			MethodName: "ApproveStageEvent",
			Handler:    _Superplane_ApproveStageEvent_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _Superplane_DeleteSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "superplane.proto",
}
