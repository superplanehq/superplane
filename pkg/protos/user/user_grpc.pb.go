// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.3.0
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_Describe_FullMethodName                     = "/InternalApi.User.UserService/Describe"
	UserService_DescribeByRepositoryProvider_FullMethodName = "/InternalApi.User.UserService/DescribeByRepositoryProvider"
	UserService_DescribeByEmail_FullMethodName              = "/InternalApi.User.UserService/DescribeByEmail"
	UserService_SearchUsers_FullMethodName                  = "/InternalApi.User.UserService/SearchUsers"
	UserService_DescribeMany_FullMethodName                 = "/InternalApi.User.UserService/DescribeMany"
	UserService_Update_FullMethodName                       = "/InternalApi.User.UserService/Update"
	UserService_DeleteWithOwnedOrgs_FullMethodName          = "/InternalApi.User.UserService/DeleteWithOwnedOrgs"
	UserService_RegenerateToken_FullMethodName              = "/InternalApi.User.UserService/RegenerateToken"
	UserService_ListFavorites_FullMethodName                = "/InternalApi.User.UserService/ListFavorites"
	UserService_CreateFavorite_FullMethodName               = "/InternalApi.User.UserService/CreateFavorite"
	UserService_DeleteFavorite_FullMethodName               = "/InternalApi.User.UserService/DeleteFavorite"
	UserService_CheckGithubToken_FullMethodName             = "/InternalApi.User.UserService/CheckGithubToken"
	UserService_BlockAccount_FullMethodName                 = "/InternalApi.User.UserService/BlockAccount"
	UserService_UnblockAccount_FullMethodName               = "/InternalApi.User.UserService/UnblockAccount"
	UserService_GetRepositoryToken_FullMethodName           = "/InternalApi.User.UserService/GetRepositoryToken"
	UserService_RefreshRepositoryProvider_FullMethodName    = "/InternalApi.User.UserService/RefreshRepositoryProvider"
	UserService_Create_FullMethodName                       = "/InternalApi.User.UserService/Create"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Operation is called to describe an existing user.
	// Operation is synchronous.
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	// Operation is called to find and describe an existing user based on repository provider id
	// Operation is synchronous.
	DescribeByRepositoryProvider(ctx context.Context, in *DescribeByRepositoryProviderRequest, opts ...grpc.CallOption) (*User, error)
	// Operation is called to find and describe an existing user based on email address
	// Operation is synchronous.
	DescribeByEmail(ctx context.Context, in *DescribeByEmailRequest, opts ...grpc.CallOption) (*User, error)
	// Operation is called to search for users
	// Operation is synchronous.
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	// Operation is called to describe many users.
	// Operation is synchronous.
	DescribeMany(ctx context.Context, in *DescribeManyRequest, opts ...grpc.CallOption) (*DescribeManyResponse, error)
	// Operation is called to update an existing user.
	// Operation is synchronous.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Operation is called to delete an existing user and all their owned organizations.
	// Operation is synchronous.
	DeleteWithOwnedOrgs(ctx context.Context, in *DeleteWithOwnedOrgsRequest, opts ...grpc.CallOption) (*User, error)
	// Operation is called to regenerate a token for an existing user.
	// Operation is synchronous.
	RegenerateToken(ctx context.Context, in *RegenerateTokenRequest, opts ...grpc.CallOption) (*RegenerateTokenResponse, error)
	// Operation is called to list favorites for the user.
	// Operation is synchronous.
	ListFavorites(ctx context.Context, in *ListFavoritesRequest, opts ...grpc.CallOption) (*ListFavoritesResponse, error)
	// Operation is called to create favorite record.
	// Operation is synchronous.
	CreateFavorite(ctx context.Context, in *Favorite, opts ...grpc.CallOption) (*Favorite, error)
	// Operation is called to delete the favorite record.
	// Operation is synchronous.
	DeleteFavorite(ctx context.Context, in *Favorite, opts ...grpc.CallOption) (*Favorite, error)
	// Operation is called to check the status of an github token.
	// Operation is synchronous.
	CheckGithubToken(ctx context.Context, in *CheckGithubTokenRequest, opts ...grpc.CallOption) (*CheckGithubTokenResponse, error)
	// Operation is called to block the user based on their auth account.
	// Operation is synchronous.
	BlockAccount(ctx context.Context, in *BlockAccountRequest, opts ...grpc.CallOption) (*User, error)
	// Operation is called to unblock the user based on their auth account.
	// Operation is synchronous.
	UnblockAccount(ctx context.Context, in *UnblockAccountRequest, opts ...grpc.CallOption) (*User, error)
	// Operation is called to fetch a users repository token
	// Operation is synchronous.
	GetRepositoryToken(ctx context.Context, in *GetRepositoryTokenRequest, opts ...grpc.CallOption) (*GetRepositoryTokenResponse, error)
	// Operation is called to check and refresh the status of an repository provider
	// for a given user and provider type
	// Operation is synchronous.
	RefreshRepositoryProvider(ctx context.Context, in *RefreshRepositoryProviderRequest, opts ...grpc.CallOption) (*RefreshRepositoryProviderResponse, error)
	// Operation is called create a new user, passing username and name.
	// Operation is synchronous.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeResponse)
	err := c.cc.Invoke(ctx, UserService_Describe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DescribeByRepositoryProvider(ctx context.Context, in *DescribeByRepositoryProviderRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_DescribeByRepositoryProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DescribeByEmail(ctx context.Context, in *DescribeByEmailRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_DescribeByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, UserService_SearchUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DescribeMany(ctx context.Context, in *DescribeManyRequest, opts ...grpc.CallOption) (*DescribeManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeManyResponse)
	err := c.cc.Invoke(ctx, UserService_DescribeMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, UserService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteWithOwnedOrgs(ctx context.Context, in *DeleteWithOwnedOrgsRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_DeleteWithOwnedOrgs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegenerateToken(ctx context.Context, in *RegenerateTokenRequest, opts ...grpc.CallOption) (*RegenerateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegenerateTokenResponse)
	err := c.cc.Invoke(ctx, UserService_RegenerateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListFavorites(ctx context.Context, in *ListFavoritesRequest, opts ...grpc.CallOption) (*ListFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFavoritesResponse)
	err := c.cc.Invoke(ctx, UserService_ListFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateFavorite(ctx context.Context, in *Favorite, opts ...grpc.CallOption) (*Favorite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Favorite)
	err := c.cc.Invoke(ctx, UserService_CreateFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteFavorite(ctx context.Context, in *Favorite, opts ...grpc.CallOption) (*Favorite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Favorite)
	err := c.cc.Invoke(ctx, UserService_DeleteFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckGithubToken(ctx context.Context, in *CheckGithubTokenRequest, opts ...grpc.CallOption) (*CheckGithubTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckGithubTokenResponse)
	err := c.cc.Invoke(ctx, UserService_CheckGithubToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BlockAccount(ctx context.Context, in *BlockAccountRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_BlockAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnblockAccount(ctx context.Context, in *UnblockAccountRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_UnblockAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRepositoryToken(ctx context.Context, in *GetRepositoryTokenRequest, opts ...grpc.CallOption) (*GetRepositoryTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepositoryTokenResponse)
	err := c.cc.Invoke(ctx, UserService_GetRepositoryToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefreshRepositoryProvider(ctx context.Context, in *RefreshRepositoryProviderRequest, opts ...grpc.CallOption) (*RefreshRepositoryProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshRepositoryProviderResponse)
	err := c.cc.Invoke(ctx, UserService_RefreshRepositoryProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// Operation is called to describe an existing user.
	// Operation is synchronous.
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	// Operation is called to find and describe an existing user based on repository provider id
	// Operation is synchronous.
	DescribeByRepositoryProvider(context.Context, *DescribeByRepositoryProviderRequest) (*User, error)
	// Operation is called to find and describe an existing user based on email address
	// Operation is synchronous.
	DescribeByEmail(context.Context, *DescribeByEmailRequest) (*User, error)
	// Operation is called to search for users
	// Operation is synchronous.
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	// Operation is called to describe many users.
	// Operation is synchronous.
	DescribeMany(context.Context, *DescribeManyRequest) (*DescribeManyResponse, error)
	// Operation is called to update an existing user.
	// Operation is synchronous.
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Operation is called to delete an existing user and all their owned organizations.
	// Operation is synchronous.
	DeleteWithOwnedOrgs(context.Context, *DeleteWithOwnedOrgsRequest) (*User, error)
	// Operation is called to regenerate a token for an existing user.
	// Operation is synchronous.
	RegenerateToken(context.Context, *RegenerateTokenRequest) (*RegenerateTokenResponse, error)
	// Operation is called to list favorites for the user.
	// Operation is synchronous.
	ListFavorites(context.Context, *ListFavoritesRequest) (*ListFavoritesResponse, error)
	// Operation is called to create favorite record.
	// Operation is synchronous.
	CreateFavorite(context.Context, *Favorite) (*Favorite, error)
	// Operation is called to delete the favorite record.
	// Operation is synchronous.
	DeleteFavorite(context.Context, *Favorite) (*Favorite, error)
	// Operation is called to check the status of an github token.
	// Operation is synchronous.
	CheckGithubToken(context.Context, *CheckGithubTokenRequest) (*CheckGithubTokenResponse, error)
	// Operation is called to block the user based on their auth account.
	// Operation is synchronous.
	BlockAccount(context.Context, *BlockAccountRequest) (*User, error)
	// Operation is called to unblock the user based on their auth account.
	// Operation is synchronous.
	UnblockAccount(context.Context, *UnblockAccountRequest) (*User, error)
	// Operation is called to fetch a users repository token
	// Operation is synchronous.
	GetRepositoryToken(context.Context, *GetRepositoryTokenRequest) (*GetRepositoryTokenResponse, error)
	// Operation is called to check and refresh the status of an repository provider
	// for a given user and provider type
	// Operation is synchronous.
	RefreshRepositoryProvider(context.Context, *RefreshRepositoryProviderRequest) (*RefreshRepositoryProviderResponse, error)
	// Operation is called create a new user, passing username and name.
	// Operation is synchronous.
	Create(context.Context, *CreateRequest) (*User, error)
}

// UnimplementedUserServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) Describe(context.Context, *DescribeRequest) (*DescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedUserServiceServer) DescribeByRepositoryProvider(context.Context, *DescribeByRepositoryProviderRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeByRepositoryProvider not implemented")
}
func (UnimplementedUserServiceServer) DescribeByEmail(context.Context, *DescribeByEmailRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeByEmail not implemented")
}
func (UnimplementedUserServiceServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedUserServiceServer) DescribeMany(context.Context, *DescribeManyRequest) (*DescribeManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMany not implemented")
}
func (UnimplementedUserServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserServiceServer) DeleteWithOwnedOrgs(context.Context, *DeleteWithOwnedOrgsRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithOwnedOrgs not implemented")
}
func (UnimplementedUserServiceServer) RegenerateToken(context.Context, *RegenerateTokenRequest) (*RegenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateToken not implemented")
}
func (UnimplementedUserServiceServer) ListFavorites(context.Context, *ListFavoritesRequest) (*ListFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavorites not implemented")
}
func (UnimplementedUserServiceServer) CreateFavorite(context.Context, *Favorite) (*Favorite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFavorite not implemented")
}
func (UnimplementedUserServiceServer) DeleteFavorite(context.Context, *Favorite) (*Favorite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavorite not implemented")
}
func (UnimplementedUserServiceServer) CheckGithubToken(context.Context, *CheckGithubTokenRequest) (*CheckGithubTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGithubToken not implemented")
}
func (UnimplementedUserServiceServer) BlockAccount(context.Context, *BlockAccountRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockAccount not implemented")
}
func (UnimplementedUserServiceServer) UnblockAccount(context.Context, *UnblockAccountRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockAccount not implemented")
}
func (UnimplementedUserServiceServer) GetRepositoryToken(context.Context, *GetRepositoryTokenRequest) (*GetRepositoryTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryToken not implemented")
}
func (UnimplementedUserServiceServer) RefreshRepositoryProvider(context.Context, *RefreshRepositoryProviderRequest) (*RefreshRepositoryProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshRepositoryProvider not implemented")
}
func (UnimplementedUserServiceServer) Create(context.Context, *CreateRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserServiceServer) testEmbeddedByValue() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DescribeByRepositoryProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeByRepositoryProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DescribeByRepositoryProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DescribeByRepositoryProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DescribeByRepositoryProvider(ctx, req.(*DescribeByRepositoryProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DescribeByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DescribeByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DescribeByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DescribeByEmail(ctx, req.(*DescribeByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DescribeMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DescribeMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DescribeMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DescribeMany(ctx, req.(*DescribeManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteWithOwnedOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWithOwnedOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteWithOwnedOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteWithOwnedOrgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteWithOwnedOrgs(ctx, req.(*DeleteWithOwnedOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegenerateToken(ctx, req.(*RegenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListFavorites(ctx, req.(*ListFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Favorite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateFavorite(ctx, req.(*Favorite))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Favorite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteFavorite(ctx, req.(*Favorite))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckGithubToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGithubTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckGithubToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckGithubToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckGithubToken(ctx, req.(*CheckGithubTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BlockAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BlockAccount(ctx, req.(*BlockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnblockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnblockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnblockAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnblockAccount(ctx, req.(*UnblockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRepositoryToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRepositoryToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetRepositoryToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRepositoryToken(ctx, req.(*GetRepositoryTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefreshRepositoryProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRepositoryProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefreshRepositoryProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RefreshRepositoryProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefreshRepositoryProvider(ctx, req.(*RefreshRepositoryProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.User.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _UserService_Describe_Handler,
		},
		{
			MethodName: "DescribeByRepositoryProvider",
			Handler:    _UserService_DescribeByRepositoryProvider_Handler,
		},
		{
			MethodName: "DescribeByEmail",
			Handler:    _UserService_DescribeByEmail_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _UserService_SearchUsers_Handler,
		},
		{
			MethodName: "DescribeMany",
			Handler:    _UserService_DescribeMany_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "DeleteWithOwnedOrgs",
			Handler:    _UserService_DeleteWithOwnedOrgs_Handler,
		},
		{
			MethodName: "RegenerateToken",
			Handler:    _UserService_RegenerateToken_Handler,
		},
		{
			MethodName: "ListFavorites",
			Handler:    _UserService_ListFavorites_Handler,
		},
		{
			MethodName: "CreateFavorite",
			Handler:    _UserService_CreateFavorite_Handler,
		},
		{
			MethodName: "DeleteFavorite",
			Handler:    _UserService_DeleteFavorite_Handler,
		},
		{
			MethodName: "CheckGithubToken",
			Handler:    _UserService_CheckGithubToken_Handler,
		},
		{
			MethodName: "BlockAccount",
			Handler:    _UserService_BlockAccount_Handler,
		},
		{
			MethodName: "UnblockAccount",
			Handler:    _UserService_UnblockAccount_Handler,
		},
		{
			MethodName: "GetRepositoryToken",
			Handler:    _UserService_GetRepositoryToken_Handler,
		},
		{
			MethodName: "RefreshRepositoryProvider",
			Handler:    _UserService_RefreshRepositoryProvider_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
