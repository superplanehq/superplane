// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.3.0
// source: periodic_scheduler.proto

package periodic_scheduler

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	status "github.com/superplanehq/superplane/pkg/protos/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List Order
// Describes the order of returned periodics
//   - BY_NAME_ASC           - sort by name in ascending order
//   - BY_CREATION_DATE_DESC - sort by creation date in descending order
type ListOrder int32

const (
	ListOrder_BY_NAME_ASC           ListOrder = 0
	ListOrder_BY_CREATION_DATE_DESC ListOrder = 1
)

// Enum value maps for ListOrder.
var (
	ListOrder_name = map[int32]string{
		0: "BY_NAME_ASC",
		1: "BY_CREATION_DATE_DESC",
	}
	ListOrder_value = map[string]int32{
		"BY_NAME_ASC":           0,
		"BY_CREATION_DATE_DESC": 1,
	}
)

func (x ListOrder) Enum() *ListOrder {
	p := new(ListOrder)
	*p = x
	return p
}

func (x ListOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_periodic_scheduler_proto_enumTypes[0].Descriptor()
}

func (ListOrder) Type() protoreflect.EnumType {
	return &file_periodic_scheduler_proto_enumTypes[0]
}

func (x ListOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListOrder.Descriptor instead.
func (ListOrder) EnumDescriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{0}
}

// Describes the state of scheduled tasks
// - UNCHANGED    - do not change the existing state; this is the default
// - ACTIVE       - schedule new tasks based on the cron expression
// - PAUSED       - pause task (do not schedule new tasks)
//
// Note: when creating a new task, UNCHANGED is equivalent to ACTIVE
type PersistRequest_ScheduleState int32

const (
	PersistRequest_UNCHANGED PersistRequest_ScheduleState = 0
	PersistRequest_ACTIVE    PersistRequest_ScheduleState = 1
	PersistRequest_PAUSED    PersistRequest_ScheduleState = 2
)

// Enum value maps for PersistRequest_ScheduleState.
var (
	PersistRequest_ScheduleState_name = map[int32]string{
		0: "UNCHANGED",
		1: "ACTIVE",
		2: "PAUSED",
	}
	PersistRequest_ScheduleState_value = map[string]int32{
		"UNCHANGED": 0,
		"ACTIVE":    1,
		"PAUSED":    2,
	}
)

func (x PersistRequest_ScheduleState) Enum() *PersistRequest_ScheduleState {
	p := new(PersistRequest_ScheduleState)
	*p = x
	return p
}

func (x PersistRequest_ScheduleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PersistRequest_ScheduleState) Descriptor() protoreflect.EnumDescriptor {
	return file_periodic_scheduler_proto_enumTypes[1].Descriptor()
}

func (PersistRequest_ScheduleState) Type() protoreflect.EnumType {
	return &file_periodic_scheduler_proto_enumTypes[1]
}

func (x PersistRequest_ScheduleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PersistRequest_ScheduleState.Descriptor instead.
func (PersistRequest_ScheduleState) EnumDescriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{2, 0}
}

// Describes the type of pagination cursor
// - FIRST   - render first page (latest triggers)
// - AFTER   - render triggers after Epoch time (in milliseconds)
// - BEFORE  - render triggers before Epoch time (in milliseconds)
type HistoryRequest_CursorType int32

const (
	HistoryRequest_FIRST  HistoryRequest_CursorType = 0
	HistoryRequest_AFTER  HistoryRequest_CursorType = 1
	HistoryRequest_BEFORE HistoryRequest_CursorType = 2
)

// Enum value maps for HistoryRequest_CursorType.
var (
	HistoryRequest_CursorType_name = map[int32]string{
		0: "FIRST",
		1: "AFTER",
		2: "BEFORE",
	}
	HistoryRequest_CursorType_value = map[string]int32{
		"FIRST":  0,
		"AFTER":  1,
		"BEFORE": 2,
	}
)

func (x HistoryRequest_CursorType) Enum() *HistoryRequest_CursorType {
	p := new(HistoryRequest_CursorType)
	*p = x
	return p
}

func (x HistoryRequest_CursorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HistoryRequest_CursorType) Descriptor() protoreflect.EnumDescriptor {
	return file_periodic_scheduler_proto_enumTypes[2].Descriptor()
}

func (HistoryRequest_CursorType) Type() protoreflect.EnumType {
	return &file_periodic_scheduler_proto_enumTypes[2]
}

func (x HistoryRequest_CursorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HistoryRequest_CursorType.Descriptor instead.
func (HistoryRequest_CursorType) EnumDescriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{17, 0}
}

type ListKeysetRequest_Direction int32

const (
	ListKeysetRequest_NEXT ListKeysetRequest_Direction = 0
	ListKeysetRequest_PREV ListKeysetRequest_Direction = 1
)

// Enum value maps for ListKeysetRequest_Direction.
var (
	ListKeysetRequest_Direction_name = map[int32]string{
		0: "NEXT",
		1: "PREV",
	}
	ListKeysetRequest_Direction_value = map[string]int32{
		"NEXT": 0,
		"PREV": 1,
	}
)

func (x ListKeysetRequest_Direction) Enum() *ListKeysetRequest_Direction {
	p := new(ListKeysetRequest_Direction)
	*p = x
	return p
}

func (x ListKeysetRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListKeysetRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_periodic_scheduler_proto_enumTypes[3].Descriptor()
}

func (ListKeysetRequest_Direction) Type() protoreflect.EnumType {
	return &file_periodic_scheduler_proto_enumTypes[3]
}

func (x ListKeysetRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListKeysetRequest_Direction.Descriptor instead.
func (ListKeysetRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{21, 0}
}

// ApplyRequest call request
//
// Synchronous operation.
// Creates new periodic or updates existing one with datat from yml_definition field.
//
// Arguments:
// - requester_id    = [required] Id of user who applied yml file.
// - organization_id = [required] Id of organization to which periodic should belong.
// - yml_definition  = [required] Content od yml file with periodis's definition
//
// Preconditions:
//   - Project with name from yml_definition field exists.
//   - Branch from that project which is given in yml_definition field exists and
//     there was at least one push to that branch recorded by Sempahore (hook exists in DB).
//
// Postconditions:
// - ResponseCode = OK => Periodic is created or updated and it's id is returned.
// - otherwise         => Periodic is NOT created or updated. Error is returned.
//
// Idempotency:
type ApplyRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RequesterId    string                 `protobuf:"bytes,1,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	OrganizationId string                 `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	YmlDefinition  string                 `protobuf:"bytes,3,opt,name=yml_definition,json=ymlDefinition,proto3" json:"yml_definition,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ApplyRequest) Reset() {
	*x = ApplyRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRequest) ProtoMessage() {}

func (x *ApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRequest.ProtoReflect.Descriptor instead.
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *ApplyRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *ApplyRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ApplyRequest) GetYmlDefinition() string {
	if x != nil {
		return x.YmlDefinition
	}
	return ""
}

// Apply call response
//
// Response:
//   - status  = [required] contains google.rpc.Code:
//     OK                  = Periodic is created or updated and is available
//     for Describe call.
//     INVALID_ARGUMENT    = Apply request is rejected because of
//     malformed request.
//     FAILED_PRECONDITION = see Preconditions section in request.
//   - id   = [required if OK] Id of created or update periodic
type ApplyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyResponse) Reset() {
	*x = ApplyResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyResponse) ProtoMessage() {}

func (x *ApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyResponse.ProtoReflect.Descriptor instead.
func (*ApplyResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ApplyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Postconditions:
// - ResponseCode = OK => Periodic is created or updated and it's id is returned.
// - otherwise         => Periodic is NOT created or updated. Error is returned.
//
// Idempotency:
type PersistRequest struct {
	state          protoimpl.MessageState       `protogen:"open.v1"`
	Id             string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Recurring      bool                         `protobuf:"varint,4,opt,name=recurring,proto3" json:"recurring,omitempty"`
	State          PersistRequest_ScheduleState `protobuf:"varint,5,opt,name=state,proto3,enum=InternalApi.PeriodicScheduler.PersistRequest_ScheduleState" json:"state,omitempty"`
	OrganizationId string                       `protobuf:"bytes,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectName    string                       `protobuf:"bytes,7,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	RequesterId    string                       `protobuf:"bytes,8,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	Branch         string                       `protobuf:"bytes,9,opt,name=branch,proto3" json:"branch,omitempty"`
	PipelineFile   string                       `protobuf:"bytes,10,opt,name=pipeline_file,json=pipelineFile,proto3" json:"pipeline_file,omitempty"`
	At             string                       `protobuf:"bytes,11,opt,name=at,proto3" json:"at,omitempty"`
	Parameters     []*Periodic_Parameter        `protobuf:"bytes,12,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ProjectId      string                       `protobuf:"bytes,13,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PersistRequest) Reset() {
	*x = PersistRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistRequest) ProtoMessage() {}

func (x *PersistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistRequest.ProtoReflect.Descriptor instead.
func (*PersistRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *PersistRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PersistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PersistRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PersistRequest) GetRecurring() bool {
	if x != nil {
		return x.Recurring
	}
	return false
}

func (x *PersistRequest) GetState() PersistRequest_ScheduleState {
	if x != nil {
		return x.State
	}
	return PersistRequest_UNCHANGED
}

func (x *PersistRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *PersistRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *PersistRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *PersistRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PersistRequest) GetPipelineFile() string {
	if x != nil {
		return x.PipelineFile
	}
	return ""
}

func (x *PersistRequest) GetAt() string {
	if x != nil {
		return x.At
	}
	return ""
}

func (x *PersistRequest) GetParameters() []*Periodic_Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *PersistRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// Persist call response
//
// Response:
//   - status  = [required] contains google.rpc.Code:
//     OK                  = Periodic is created or updated and is available
//     for Describe call.
//     INVALID_ARGUMENT    = Apply request is rejected because of
//     malformed request.
//     FAILED_PRECONDITION = see Preconditions section in request.
//   - id   = [required if OK] Id of created or update periodic
type PersistResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Periodic      *Periodic              `protobuf:"bytes,2,opt,name=periodic,proto3" json:"periodic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PersistResponse) Reset() {
	*x = PersistResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistResponse) ProtoMessage() {}

func (x *PersistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistResponse.ProtoReflect.Descriptor instead.
func (*PersistResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{3}
}

func (x *PersistResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PersistResponse) GetPeriodic() *Periodic {
	if x != nil {
		return x.Periodic
	}
	return nil
}

// Pause call request
//
// Synchronous operation.
// Periodic scheduler is paused and workflows will not be scheduled until it is unpaused.
//
// Arguments:
// - id              = [required] ID of periodic
// - requester       = [required] ID of the user who requested pausing the periodic
//
// Preconditions:
//
// Postconditions:
// - Periodic is no longer scheduling workflows at scheduled times.
//
// Idempotency:
// If periodic is already paused when the request is received, response will be OK
type PauseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Requester     string                 `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseRequest) Reset() {
	*x = PauseRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseRequest) ProtoMessage() {}

func (x *PauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseRequest.ProtoReflect.Descriptor instead.
func (*PauseRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{4}
}

func (x *PauseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PauseRequest) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

// Pause call response
//
// Response:
//   - status    = [required] contains ResponseCode:
//     OK               = Periodic is paused
//     NOT_FOUND        = Periodic with given ID was not found.
//     INVALID_ARGUMENT = The requester ID was not provided
type PauseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseResponse) Reset() {
	*x = PauseResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseResponse) ProtoMessage() {}

func (x *PauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseResponse.ProtoReflect.Descriptor instead.
func (*PauseResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{5}
}

func (x *PauseResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Unpause call request
//
// Synchronous operation.
// Periodic scheduler is unpaused and workflows will again be triggered according to schedule.
//
// Arguments:
// - id              = [required] ID of periodic
// - requester       = [required] ID of the user who requested unpausing the periodic
//
// Preconditions:
// - Periodic has valid cron expression configured for scheduling times.
//
// Postconditions:
// - Periodic will again schedule workflows at scheduled times.
//
// Idempotency:
// If periodic is already unpaused when the request is received, response will be OK
type UnpauseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Requester     string                 `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpauseRequest) Reset() {
	*x = UnpauseRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpauseRequest) ProtoMessage() {}

func (x *UnpauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpauseRequest.ProtoReflect.Descriptor instead.
func (*UnpauseRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{6}
}

func (x *UnpauseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnpauseRequest) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

// Unpause call response
//
// Response:
//   - status    = [required] contains ResponseCode:
//     OK                  = Periodic is unpaused
//     NOT_FOUND           = Periodic with given ID was not found.
//     INVALID_ARGUMENT    = The requester ID was not provided.
//     FAILED_PRECONDITION = The configured cron expression is invalid.
type UnpauseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpauseResponse) Reset() {
	*x = UnpauseResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpauseResponse) ProtoMessage() {}

func (x *UnpauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpauseResponse.ProtoReflect.Descriptor instead.
func (*UnpauseResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{7}
}

func (x *UnpauseResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// RunNow call request
//
// Synchronous operation.
// Workflow is scheduled immediately on the project and branch from periodic's
// configuration ant it is based on yaml filed configured in periodic.
//
// Arguments:
// - id              = [required] ID of periodic
// - requester       = [required] ID of the user who triggered RunNow action
//
// Preconditions:
// - Periodic exists and it is not suspended.
//
// Postconditions:
// - Periodic trigger record is stored and it keeps details about the result of this action.
// - If action is successful the workflow is scheduled.
//
// Idempotency:
// - Action is synchronous, so multiple calls will result in multiple scheduled workflows.
type RunNowRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Requester       string                 `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	Branch          string                 `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	PipelineFile    string                 `protobuf:"bytes,4,opt,name=pipeline_file,json=pipelineFile,proto3" json:"pipeline_file,omitempty"`
	ParameterValues []*ParameterValue      `protobuf:"bytes,5,rep,name=parameter_values,json=parameterValues,proto3" json:"parameter_values,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RunNowRequest) Reset() {
	*x = RunNowRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunNowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunNowRequest) ProtoMessage() {}

func (x *RunNowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunNowRequest.ProtoReflect.Descriptor instead.
func (*RunNowRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{8}
}

func (x *RunNowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunNowRequest) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *RunNowRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *RunNowRequest) GetPipelineFile() string {
	if x != nil {
		return x.PipelineFile
	}
	return ""
}

func (x *RunNowRequest) GetParameterValues() []*ParameterValue {
	if x != nil {
		return x.ParameterValues
	}
	return nil
}

// RunNow call response
//
// Response:
//   - status    = [required] contains ResponseCode:
//     OK                  = Workflow is scheduled.
//     NOT_FOUND           = Periodic with given ID was not found.
//     INVALID_ARGUMENT    = The requester ID was not provided.
//     FAILED_PRECONDITION = Periodic is suspended.
//
//   - periodic  = [required] Periodic's description.
//   - triggers  = [required] Details of last 10 times this periodic was triggered
//     with workflow scheduling results, first one is the most recent.
//   - trigger   = [required] Details of the trigger that was created by RunNow rpc.
type RunNowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Periodic      *Periodic              `protobuf:"bytes,2,opt,name=periodic,proto3" json:"periodic,omitempty"`
	Triggers      []*Trigger             `protobuf:"bytes,3,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Trigger       *Trigger               `protobuf:"bytes,4,opt,name=trigger,proto3" json:"trigger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunNowResponse) Reset() {
	*x = RunNowResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunNowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunNowResponse) ProtoMessage() {}

func (x *RunNowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunNowResponse.ProtoReflect.Descriptor instead.
func (*RunNowResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{9}
}

func (x *RunNowResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RunNowResponse) GetPeriodic() *Periodic {
	if x != nil {
		return x.Periodic
	}
	return nil
}

func (x *RunNowResponse) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *RunNowResponse) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

// Describe call request
//
// Synchronous operation.
// Returns details of periodic with given id
//
// Arguments:
// - id = [required] Id of periodic
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type DescribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Describe call response
//
// Response:
//   - periodic  = [required] Periodic's description.
//   - triggers  = [required, might be empty list] details of last 10 times
//     this periodic was triggered with workflow scheduling results
//   - status    = [required] contains ResponseCode:
//     OK               = Response contains valid data in other fields
//     NOT_FOUND        = Periodic with given params was not found.
//     INVALID_ARGUMENT = All params in request were empty strings
type DescribeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Periodic      *Periodic              `protobuf:"bytes,2,opt,name=periodic,proto3" json:"periodic,omitempty"`
	Triggers      []*Trigger             `protobuf:"bytes,3,rep,name=triggers,proto3" json:"triggers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeResponse) Reset() {
	*x = DescribeResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResponse) ProtoMessage() {}

func (x *DescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResponse.ProtoReflect.Descriptor instead.
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{11}
}

func (x *DescribeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DescribeResponse) GetPeriodic() *Periodic {
	if x != nil {
		return x.Periodic
	}
	return nil
}

func (x *DescribeResponse) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

// Periodic entity details
//
// - id               = [required] Unique periodic identifier
// - name             = [required] Name of periodic
// - project_id       = [required] Id of project to which periodic belongs
// - branch           = [required] Name of git branch on which workflows should be scheduled
// - at               = [required] Cron expression describing when should workflows be scheduled
// - pipeline_file    = [required] Path within repo to yml definition file for initial pipeline
// - requester_id     = [required] Id of user which created or lastly updated periodic
// - updated_at       = [required] Timestamp of last time when periodic was updated
// - suspended        = [required] True if periodic is suspended due to the org being suspended
// - paused           = [required] True if periodic was paused by the user
// - pause_toggled_by = [required] ID of the user who last paused/unpaused the periodic
// - pause_toggled_at = [required] Timestamp of the most recent time when periodic was paused/unpaused
// - inserted_at      = [required] Timestamp of the time when periodic was originally created
// - recurring        = [required] True if periodic is recurring (has a cron-based schedule)
// - parameters       = [optional] List of parameters passed to to the workflow from periodic
// - description      = [optional] Description of periodic
// - organization_id  = [required] Id of organization to which periodic belongs
type Periodic struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId      string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Branch         string                 `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	At             string                 `protobuf:"bytes,5,opt,name=at,proto3" json:"at,omitempty"`
	PipelineFile   string                 `protobuf:"bytes,6,opt,name=pipeline_file,json=pipelineFile,proto3" json:"pipeline_file,omitempty"`
	RequesterId    string                 `protobuf:"bytes,7,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	UpdatedAt      *timestamp.Timestamp   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Suspended      bool                   `protobuf:"varint,9,opt,name=suspended,proto3" json:"suspended,omitempty"`
	Paused         bool                   `protobuf:"varint,10,opt,name=paused,proto3" json:"paused,omitempty"`
	PauseToggledBy string                 `protobuf:"bytes,11,opt,name=pause_toggled_by,json=pauseToggledBy,proto3" json:"pause_toggled_by,omitempty"`
	PauseToggledAt *timestamp.Timestamp   `protobuf:"bytes,12,opt,name=pause_toggled_at,json=pauseToggledAt,proto3" json:"pause_toggled_at,omitempty"`
	InsertedAt     *timestamp.Timestamp   `protobuf:"bytes,13,opt,name=inserted_at,json=insertedAt,proto3" json:"inserted_at,omitempty"`
	Recurring      bool                   `protobuf:"varint,14,opt,name=recurring,proto3" json:"recurring,omitempty"`
	Parameters     []*Periodic_Parameter  `protobuf:"bytes,15,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Description    string                 `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`
	OrganizationId string                 `protobuf:"bytes,17,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Periodic) Reset() {
	*x = Periodic{}
	mi := &file_periodic_scheduler_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Periodic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Periodic) ProtoMessage() {}

func (x *Periodic) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Periodic.ProtoReflect.Descriptor instead.
func (*Periodic) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{12}
}

func (x *Periodic) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Periodic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Periodic) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Periodic) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Periodic) GetAt() string {
	if x != nil {
		return x.At
	}
	return ""
}

func (x *Periodic) GetPipelineFile() string {
	if x != nil {
		return x.PipelineFile
	}
	return ""
}

func (x *Periodic) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *Periodic) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Periodic) GetSuspended() bool {
	if x != nil {
		return x.Suspended
	}
	return false
}

func (x *Periodic) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *Periodic) GetPauseToggledBy() string {
	if x != nil {
		return x.PauseToggledBy
	}
	return ""
}

func (x *Periodic) GetPauseToggledAt() *timestamp.Timestamp {
	if x != nil {
		return x.PauseToggledAt
	}
	return nil
}

func (x *Periodic) GetInsertedAt() *timestamp.Timestamp {
	if x != nil {
		return x.InsertedAt
	}
	return nil
}

func (x *Periodic) GetRecurring() bool {
	if x != nil {
		return x.Recurring
	}
	return false
}

func (x *Periodic) GetParameters() []*Periodic_Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Periodic) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Periodic) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

// Periodic Trigger entity details
//
//   - triggered_at           = [required] Timestamp when trigger was triggered
//   - project_id             = [required] Id of project on which workflow was scheduled
//   - branch                 = [required] Name of git branch on which workflow was scheduled
//   - pipeline_file          = [required] Path within repo to yml definition file of
//     initial pipeline in scheduled workflow
//   - scheduling_status      = [required] Status of scheduling (running, passed, failed)
//   - scheduled_workflow_id  = [optional] Id of newly scheduled workflow
//   - scheduled_at           = [required] Timestamp when workflow was scheduled
//   - error_description      = [optional] Errors while scheduling workflow
//   - run_now_requester_id   = [optional] ID of the user that triggered this via RunNow
//   - periodic_id            = [required] Unique periodic identifier
type Trigger struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TriggeredAt         *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=triggered_at,json=triggeredAt,proto3" json:"triggered_at,omitempty"`
	ProjectId           string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Branch              string                 `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	PipelineFile        string                 `protobuf:"bytes,4,opt,name=pipeline_file,json=pipelineFile,proto3" json:"pipeline_file,omitempty"`
	SchedulingStatus    string                 `protobuf:"bytes,5,opt,name=scheduling_status,json=schedulingStatus,proto3" json:"scheduling_status,omitempty"`
	ScheduledWorkflowId string                 `protobuf:"bytes,6,opt,name=scheduled_workflow_id,json=scheduledWorkflowId,proto3" json:"scheduled_workflow_id,omitempty"`
	ScheduledAt         *timestamp.Timestamp   `protobuf:"bytes,7,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	ErrorDescription    string                 `protobuf:"bytes,8,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	RunNowRequesterId   string                 `protobuf:"bytes,9,opt,name=run_now_requester_id,json=runNowRequesterId,proto3" json:"run_now_requester_id,omitempty"`
	PeriodicId          string                 `protobuf:"bytes,10,opt,name=periodic_id,json=periodicId,proto3" json:"periodic_id,omitempty"`
	ParameterValues     []*ParameterValue      `protobuf:"bytes,11,rep,name=parameter_values,json=parameterValues,proto3" json:"parameter_values,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	mi := &file_periodic_scheduler_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{13}
}

func (x *Trigger) GetTriggeredAt() *timestamp.Timestamp {
	if x != nil {
		return x.TriggeredAt
	}
	return nil
}

func (x *Trigger) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Trigger) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Trigger) GetPipelineFile() string {
	if x != nil {
		return x.PipelineFile
	}
	return ""
}

func (x *Trigger) GetSchedulingStatus() string {
	if x != nil {
		return x.SchedulingStatus
	}
	return ""
}

func (x *Trigger) GetScheduledWorkflowId() string {
	if x != nil {
		return x.ScheduledWorkflowId
	}
	return ""
}

func (x *Trigger) GetScheduledAt() *timestamp.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *Trigger) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *Trigger) GetRunNowRequesterId() string {
	if x != nil {
		return x.RunNowRequesterId
	}
	return ""
}

func (x *Trigger) GetPeriodicId() string {
	if x != nil {
		return x.PeriodicId
	}
	return ""
}

func (x *Trigger) GetParameterValues() []*ParameterValue {
	if x != nil {
		return x.ParameterValues
	}
	return nil
}

// Periodic Trigger parameter values
//
// - name                   = [required] Parameter name
// - value                  = [required] Parameter value
type ParameterValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParameterValue) Reset() {
	*x = ParameterValue{}
	mi := &file_periodic_scheduler_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterValue) ProtoMessage() {}

func (x *ParameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterValue.ProtoReflect.Descriptor instead.
func (*ParameterValue) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{14}
}

func (x *ParameterValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// LatestTriggers call request
//
// Synchronous operation.
// Returns one latest trigger for all periodics with IDs from given ID list
//
// Arguments:
// - periodic_ids = [required] IDs of periodics which latest triggers should be returned.
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type LatestTriggersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeriodicIds   []string               `protobuf:"bytes,1,rep,name=periodic_ids,json=periodicIds,proto3" json:"periodic_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestTriggersRequest) Reset() {
	*x = LatestTriggersRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestTriggersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestTriggersRequest) ProtoMessage() {}

func (x *LatestTriggersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestTriggersRequest.ProtoReflect.Descriptor instead.
func (*LatestTriggersRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{15}
}

func (x *LatestTriggersRequest) GetPeriodicIds() []string {
	if x != nil {
		return x.PeriodicIds
	}
	return nil
}

// LatestTriggers call response
//
// Response:
//   - triggers  = [required] Latest trigger for each given periodic.
//     Note: Given periodics might not have been triggered yet,
//     so this list can have anything between 0 and N elements
//     where N is the number of IDs provided in request.
//   - status    = [required] contains ResponseCode:
//     OK               = Response contains valid data in other fields
//     INVALID_ARGUMENT = The ID list provided in request was empty.
type LatestTriggersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Triggers      []*Trigger             `protobuf:"bytes,2,rep,name=triggers,proto3" json:"triggers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestTriggersResponse) Reset() {
	*x = LatestTriggersResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestTriggersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestTriggersResponse) ProtoMessage() {}

func (x *LatestTriggersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestTriggersResponse.ProtoReflect.Descriptor instead.
func (*LatestTriggersResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{16}
}

func (x *LatestTriggersResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LatestTriggersResponse) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

// History call request
//
// Shows latest triggers for periodic.
//
// Arguments:
// - periodic_id          = [required] periodic ID
// - cursor_type        = [optional] pagination cursor type
// - cursor_value       = [optional] pagination cursor value
// - filters            = [optional] filters applied to the request
//
// Idempotency:
//
//	Operation is idempotent.
type HistoryRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	PeriodicId    string                    `protobuf:"bytes,1,opt,name=periodic_id,json=periodicId,proto3" json:"periodic_id,omitempty"`
	CursorType    HistoryRequest_CursorType `protobuf:"varint,2,opt,name=cursor_type,json=cursorType,proto3,enum=InternalApi.PeriodicScheduler.HistoryRequest_CursorType" json:"cursor_type,omitempty"`
	CursorValue   uint64                    `protobuf:"varint,3,opt,name=cursor_value,json=cursorValue,proto3" json:"cursor_value,omitempty"`
	Filters       *HistoryRequest_Filters   `protobuf:"bytes,4,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryRequest) Reset() {
	*x = HistoryRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRequest) ProtoMessage() {}

func (x *HistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRequest.ProtoReflect.Descriptor instead.
func (*HistoryRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{17}
}

func (x *HistoryRequest) GetPeriodicId() string {
	if x != nil {
		return x.PeriodicId
	}
	return ""
}

func (x *HistoryRequest) GetCursorType() HistoryRequest_CursorType {
	if x != nil {
		return x.CursorType
	}
	return HistoryRequest_FIRST
}

func (x *HistoryRequest) GetCursorValue() uint64 {
	if x != nil {
		return x.CursorValue
	}
	return 0
}

func (x *HistoryRequest) GetFilters() *HistoryRequest_Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Possible response codes (from status->code):
// - OK                 - response contains valid data
// - NOT FOUND          - periodic is not configured
// - INVALID_ARGUMENT   - request is rejected because of invalid parameters
type HistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Triggers      []*Trigger             `protobuf:"bytes,2,rep,name=triggers,proto3" json:"triggers,omitempty"`
	CursorBefore  uint64                 `protobuf:"varint,3,opt,name=cursor_before,json=cursorBefore,proto3" json:"cursor_before,omitempty"`
	CursorAfter   uint64                 `protobuf:"varint,4,opt,name=cursor_after,json=cursorAfter,proto3" json:"cursor_after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryResponse) Reset() {
	*x = HistoryResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryResponse) ProtoMessage() {}

func (x *HistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryResponse.ProtoReflect.Descriptor instead.
func (*HistoryResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{18}
}

func (x *HistoryResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HistoryResponse) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *HistoryResponse) GetCursorBefore() uint64 {
	if x != nil {
		return x.CursorBefore
	}
	return 0
}

func (x *HistoryResponse) GetCursorAfter() uint64 {
	if x != nil {
		return x.CursorAfter
	}
	return 0
}

// List call request
//
// Synchronous operation.
// Returns paginated periodics for given organization or project.
//
// Arguments:
//   - organization_id  = [required, optional if project_id is given] Id of organization
//     which periodics should be returned.
//   - project_id       = [required, optional if organization_id is given] Id of project
//     which periodics should be returned.
//   - requester_id     = [optional] The ID of user who created periodic.
//   - page             = [required] Serial number of wanted page with List call result.
//   - page_size        = [required] Number of pipelines per page of List call result.
//   - order            = [required] Describes the order of returned periodics
//   - BY_NAME_ASC           - sort by name in ascending order
//   - BY_CREATION_DATE_DESC - sort by creation date in descending order
//   - query            = [optional] Search query applied to name of periodics
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type ListRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RequesterId    string                 `protobuf:"bytes,3,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	Page           int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Order          ListOrder              `protobuf:"varint,6,opt,name=order,proto3,enum=InternalApi.PeriodicScheduler.ListOrder" json:"order,omitempty"`
	Query          string                 `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{19}
}

func (x *ListRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *ListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRequest) GetOrder() ListOrder {
	if x != nil {
		return x.Order
	}
	return ListOrder_BY_NAME_ASC
}

func (x *ListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// List call response
//
// Response:
//   - periodics        = [required] Periodics which match search params in ListRequest
//   - response_status  = [required] contains ResponseCode:
//     OK               = Response contains valid data in other fields
//     INVALID_ARGUMENT = Both project_id and organization_id are empty strings
//   - page_number      = [required] Serial number of returned page with periodics search results
//   - page_size        = [required] Number of periodics per page
//   - total_entries    = [required] Total number of periodics that match search params
//   - total_pages      = [required] Total number of pages with periodics search results
type ListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Periodics     []*Periodic            `protobuf:"bytes,2,rep,name=periodics,proto3" json:"periodics,omitempty"`
	PageNumber    int32                  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalEntries  int32                  `protobuf:"varint,5,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	TotalPages    int32                  `protobuf:"varint,6,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{20}
}

func (x *ListResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListResponse) GetPeriodics() []*Periodic {
	if x != nil {
		return x.Periodics
	}
	return nil
}

func (x *ListResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListResponse) GetTotalEntries() int32 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *ListResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// ListKeyset call request
//
// Synchronous operation.
// Returns paginated periodics for given organization or project.
//
// Arguments:
// - organization_id  = [required, optional if project_id is given] Organization ID
// - project_id       = [required, optional if organization_id is given] Project ID
// - page_token       = [required] starting point for listing:
//   - tokens for next and previous page are returned in response
//   - if you are fetching first page leave it empty and set direction to NEXT
//
// - order            = [required] Describes the order of returned periodics
//   - BY_NAME_ASC           - sort by name in ascending order
//   - BY_CREATION_DATE_DESC - sort by creation date in descending order
//
// - direction        = [required] Describes the direction of returned periodics
//   - NEXT                  - return next page of periodics
//     (with `next_page_token` from ListKeysetResponse)
//   - PREVIOUS              - return previous page of periodics
//     (with `prev_page_token` from ListKeysetResponse)
//
// - query            = [optional] Search query applied to name of periodics
type ListKeysetRequest struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	OrganizationId string                      `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      string                      `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageToken      string                      `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize       int32                       `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Direction      ListKeysetRequest_Direction `protobuf:"varint,5,opt,name=direction,proto3,enum=InternalApi.PeriodicScheduler.ListKeysetRequest_Direction" json:"direction,omitempty"`
	Order          ListOrder                   `protobuf:"varint,6,opt,name=order,proto3,enum=InternalApi.PeriodicScheduler.ListOrder" json:"order,omitempty"`
	Query          string                      `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListKeysetRequest) Reset() {
	*x = ListKeysetRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKeysetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysetRequest) ProtoMessage() {}

func (x *ListKeysetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysetRequest.ProtoReflect.Descriptor instead.
func (*ListKeysetRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{21}
}

func (x *ListKeysetRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListKeysetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListKeysetRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListKeysetRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKeysetRequest) GetDirection() ListKeysetRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return ListKeysetRequest_NEXT
}

func (x *ListKeysetRequest) GetOrder() ListOrder {
	if x != nil {
		return x.Order
	}
	return ListOrder_BY_NAME_ASC
}

func (x *ListKeysetRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// List call response
//
// Response:
// - status           = [required] contains ResponseCode:
//   - OK               - response contains valid data in other fields
//   - INVALID_ARGUMENT - request contains invalid parameters, e.g.
//   - both project_id and organization_id are empty strings
//   - page_size is less than 1
//
// - periodics        = [required] periodics that match search params in ListKeysetRequest
// - next_page_token  = [optional] token for next page of periodics, empty if there is no next page
// - prev_page_token  = [optional] token for previous page of periodics, empty if there is no previous page
// - page_size        = [required] Number of periodics per page (same as in request)
type ListKeysetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Periodics     []*Periodic            `protobuf:"bytes,2,rep,name=periodics,proto3" json:"periodics,omitempty"`
	NextPageToken string                 `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PrevPageToken string                 `protobuf:"bytes,4,opt,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKeysetResponse) Reset() {
	*x = ListKeysetResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKeysetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysetResponse) ProtoMessage() {}

func (x *ListKeysetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysetResponse.ProtoReflect.Descriptor instead.
func (*ListKeysetResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{22}
}

func (x *ListKeysetResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListKeysetResponse) GetPeriodics() []*Periodic {
	if x != nil {
		return x.Periodics
	}
	return nil
}

func (x *ListKeysetResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListKeysetResponse) GetPrevPageToken() string {
	if x != nil {
		return x.PrevPageToken
	}
	return ""
}

func (x *ListKeysetResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Delete call request
//
// Asynchronous operation.
// Delete request is persisted and actual deletion is conducted on internal schedule.
//
// Arguments:
// - id              = [required] Id of periodic
// - requester       = [required] user who requested deletion
//
// Preconditions:
//
// Postconditions:
// - Deletion request is persisted
//
// Idempotency:
// Deletion is idempotent on its own.
// If same request is received twice it will be executed twice, no harm done.
type DeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Requester     string                 `protobuf:"bytes,4,opt,name=requester,proto3" json:"requester,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteRequest) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

// Delete call response
//
// Response:
//   - status    = [required] contains ResponseCode:
//     OK               = delete request persisted
//     NOT_FOUND        = Periodic with given params was not found.
//     INVALID_ARGUMENT = All params in request were empty strings
type DeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// GetProjectId call request
//
// Synchronous operation.
// Returns project_id for periodic with given id, or for project with given project_name.
//
// Arguments:
// - periodic_id     = [required if project_name and org_id were not given] Id of periodic
// - project_name    = [required if id was not given] Name of project
// - organization_id = [required if id was not given] Id of organization to which project belongs
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type GetProjectIdRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PeriodicId     string                 `protobuf:"bytes,1,opt,name=periodic_id,json=periodicId,proto3" json:"periodic_id,omitempty"`
	ProjectName    string                 `protobuf:"bytes,2,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	OrganizationId string                 `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetProjectIdRequest) Reset() {
	*x = GetProjectIdRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectIdRequest) ProtoMessage() {}

func (x *GetProjectIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectIdRequest.ProtoReflect.Descriptor instead.
func (*GetProjectIdRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{25}
}

func (x *GetProjectIdRequest) GetPeriodicId() string {
	if x != nil {
		return x.PeriodicId
	}
	return ""
}

func (x *GetProjectIdRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GetProjectIdRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

// GetProjectId call response
//
// Response:
//   - status    = [required] contains ResponseCode:
//     OK               = other fields in response are valid
//     NOT_FOUND        = Project which matches given params was not found.
//     INVALID_ARGUMENT = All params in request were empty strings
//   - project_id = [required if OK] Id of project which matches given search params
type GetProjectIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ProjectId     string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectIdResponse) Reset() {
	*x = GetProjectIdResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectIdResponse) ProtoMessage() {}

func (x *GetProjectIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectIdResponse.ProtoReflect.Descriptor instead.
func (*GetProjectIdResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{26}
}

func (x *GetProjectIdResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetProjectIdResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// Version call request
//
// Synchronous operation.
// Returns periodic scheduler service version.
// This call is often used as first step in troubleshooting client-server
// communication issues.
//
// Arguments:
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type VersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	mi := &file_periodic_scheduler_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{27}
}

// Version call response
//
// Response:
// - version  = [required] periodic scheduler service version.
type VersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	mi := &file_periodic_scheduler_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{28}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Periodic parameter - represents a environment variable passed to the workflow
//
// Fields:
// - name          = [required] Environment variable name under which it will be available on platform
// - required      = [required] True if workflow cannot be triggered without set value for this env var
// - description   = [optional] Holds description of this env var
// - default_value = [optional] Value assigned to this env var if it is not set on triggering
// - options       = [optional] List of possible values user can choose from
type Periodic_Parameter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Required      bool                   `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DefaultValue  string                 `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Options       []string               `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Periodic_Parameter) Reset() {
	*x = Periodic_Parameter{}
	mi := &file_periodic_scheduler_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Periodic_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Periodic_Parameter) ProtoMessage() {}

func (x *Periodic_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Periodic_Parameter.ProtoReflect.Descriptor instead.
func (*Periodic_Parameter) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Periodic_Parameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Periodic_Parameter) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Periodic_Parameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Periodic_Parameter) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *Periodic_Parameter) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

// Encompasses history page filters.
//
// Fields:
// - branch_name        = [optional] git branch name
// - pipeline_file      = [optional] pipeline file (path within repo)
// - triggered_by       = [optional] triggerer ID or value
type HistoryRequest_Filters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BranchName    string                 `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	PipelineFile  string                 `protobuf:"bytes,2,opt,name=pipeline_file,json=pipelineFile,proto3" json:"pipeline_file,omitempty"`
	TriggeredBy   string                 `protobuf:"bytes,3,opt,name=triggered_by,json=triggeredBy,proto3" json:"triggered_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryRequest_Filters) Reset() {
	*x = HistoryRequest_Filters{}
	mi := &file_periodic_scheduler_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryRequest_Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRequest_Filters) ProtoMessage() {}

func (x *HistoryRequest_Filters) ProtoReflect() protoreflect.Message {
	mi := &file_periodic_scheduler_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRequest_Filters.ProtoReflect.Descriptor instead.
func (*HistoryRequest_Filters) Descriptor() ([]byte, []int) {
	return file_periodic_scheduler_proto_rawDescGZIP(), []int{17, 0}
}

func (x *HistoryRequest_Filters) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *HistoryRequest_Filters) GetPipelineFile() string {
	if x != nil {
		return x.PipelineFile
	}
	return ""
}

func (x *HistoryRequest_Filters) GetTriggeredBy() string {
	if x != nil {
		return x.TriggeredBy
	}
	return ""
}

var File_periodic_scheduler_proto protoreflect.FileDescriptor

const file_periodic_scheduler_proto_rawDesc = "" +
	"\n" +
	"\x18periodic_scheduler.proto\x12\x1dInternalApi.PeriodicScheduler\x1a\x19internal_api/status.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x81\x01\n" +
	"\fApplyRequest\x12!\n" +
	"\frequester_id\x18\x01 \x01(\tR\vrequesterId\x12'\n" +
	"\x0forganization_id\x18\x02 \x01(\tR\x0eorganizationId\x12%\n" +
	"\x0eyml_definition\x18\x03 \x01(\tR\rymlDefinition\"L\n" +
	"\rApplyResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\"\xad\x04\n" +
	"\x0ePersistRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1c\n" +
	"\trecurring\x18\x04 \x01(\bR\trecurring\x12Q\n" +
	"\x05state\x18\x05 \x01(\x0e2;.InternalApi.PeriodicScheduler.PersistRequest.ScheduleStateR\x05state\x12'\n" +
	"\x0forganization_id\x18\x06 \x01(\tR\x0eorganizationId\x12!\n" +
	"\fproject_name\x18\a \x01(\tR\vprojectName\x12!\n" +
	"\frequester_id\x18\b \x01(\tR\vrequesterId\x12\x16\n" +
	"\x06branch\x18\t \x01(\tR\x06branch\x12#\n" +
	"\rpipeline_file\x18\n" +
	" \x01(\tR\fpipelineFile\x12\x0e\n" +
	"\x02at\x18\v \x01(\tR\x02at\x12Q\n" +
	"\n" +
	"parameters\x18\f \x03(\v21.InternalApi.PeriodicScheduler.Periodic.ParameterR\n" +
	"parameters\x12\x1d\n" +
	"\n" +
	"project_id\x18\r \x01(\tR\tprojectId\"6\n" +
	"\rScheduleState\x12\r\n" +
	"\tUNCHANGED\x10\x00\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x01\x12\n" +
	"\n" +
	"\x06PAUSED\x10\x02\"\x83\x01\n" +
	"\x0fPersistResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12C\n" +
	"\bperiodic\x18\x02 \x01(\v2'.InternalApi.PeriodicScheduler.PeriodicR\bperiodic\"<\n" +
	"\fPauseRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1c\n" +
	"\trequester\x18\x02 \x01(\tR\trequester\"<\n" +
	"\rPauseResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\">\n" +
	"\x0eUnpauseRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1c\n" +
	"\trequester\x18\x02 \x01(\tR\trequester\">\n" +
	"\x0fUnpauseResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\"\xd4\x01\n" +
	"\rRunNowRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1c\n" +
	"\trequester\x18\x02 \x01(\tR\trequester\x12\x16\n" +
	"\x06branch\x18\x03 \x01(\tR\x06branch\x12#\n" +
	"\rpipeline_file\x18\x04 \x01(\tR\fpipelineFile\x12X\n" +
	"\x10parameter_values\x18\x05 \x03(\v2-.InternalApi.PeriodicScheduler.ParameterValueR\x0fparameterValues\"\x88\x02\n" +
	"\x0eRunNowResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12C\n" +
	"\bperiodic\x18\x02 \x01(\v2'.InternalApi.PeriodicScheduler.PeriodicR\bperiodic\x12B\n" +
	"\btriggers\x18\x03 \x03(\v2&.InternalApi.PeriodicScheduler.TriggerR\btriggers\x12@\n" +
	"\atrigger\x18\x04 \x01(\v2&.InternalApi.PeriodicScheduler.TriggerR\atrigger\"!\n" +
	"\x0fDescribeRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\xc8\x01\n" +
	"\x10DescribeResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12C\n" +
	"\bperiodic\x18\x02 \x01(\v2'.InternalApi.PeriodicScheduler.PeriodicR\bperiodic\x12B\n" +
	"\btriggers\x18\x03 \x03(\v2&.InternalApi.PeriodicScheduler.TriggerR\btriggers\"\xb6\x06\n" +
	"\bPeriodic\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12\x16\n" +
	"\x06branch\x18\x04 \x01(\tR\x06branch\x12\x0e\n" +
	"\x02at\x18\x05 \x01(\tR\x02at\x12#\n" +
	"\rpipeline_file\x18\x06 \x01(\tR\fpipelineFile\x12!\n" +
	"\frequester_id\x18\a \x01(\tR\vrequesterId\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x1c\n" +
	"\tsuspended\x18\t \x01(\bR\tsuspended\x12\x16\n" +
	"\x06paused\x18\n" +
	" \x01(\bR\x06paused\x12(\n" +
	"\x10pause_toggled_by\x18\v \x01(\tR\x0epauseToggledBy\x12D\n" +
	"\x10pause_toggled_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\x0epauseToggledAt\x12;\n" +
	"\vinserted_at\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"insertedAt\x12\x1c\n" +
	"\trecurring\x18\x0e \x01(\bR\trecurring\x12Q\n" +
	"\n" +
	"parameters\x18\x0f \x03(\v21.InternalApi.PeriodicScheduler.Periodic.ParameterR\n" +
	"parameters\x12 \n" +
	"\vdescription\x18\x10 \x01(\tR\vdescription\x12'\n" +
	"\x0forganization_id\x18\x11 \x01(\tR\x0eorganizationId\x1a\x9c\x01\n" +
	"\tParameter\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\brequired\x18\x02 \x01(\bR\brequired\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12#\n" +
	"\rdefault_value\x18\x04 \x01(\tR\fdefaultValue\x12\x18\n" +
	"\aoptions\x18\x05 \x03(\tR\aoptions\"\x9d\x04\n" +
	"\aTrigger\x12=\n" +
	"\ftriggered_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\vtriggeredAt\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12\x16\n" +
	"\x06branch\x18\x03 \x01(\tR\x06branch\x12#\n" +
	"\rpipeline_file\x18\x04 \x01(\tR\fpipelineFile\x12+\n" +
	"\x11scheduling_status\x18\x05 \x01(\tR\x10schedulingStatus\x122\n" +
	"\x15scheduled_workflow_id\x18\x06 \x01(\tR\x13scheduledWorkflowId\x12=\n" +
	"\fscheduled_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\vscheduledAt\x12+\n" +
	"\x11error_description\x18\b \x01(\tR\x10errorDescription\x12/\n" +
	"\x14run_now_requester_id\x18\t \x01(\tR\x11runNowRequesterId\x12\x1f\n" +
	"\vperiodic_id\x18\n" +
	" \x01(\tR\n" +
	"periodicId\x12X\n" +
	"\x10parameter_values\x18\v \x03(\v2-.InternalApi.PeriodicScheduler.ParameterValueR\x0fparameterValues\":\n" +
	"\x0eParameterValue\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\":\n" +
	"\x15LatestTriggersRequest\x12!\n" +
	"\fperiodic_ids\x18\x01 \x03(\tR\vperiodicIds\"\x89\x01\n" +
	"\x16LatestTriggersResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12B\n" +
	"\btriggers\x18\x02 \x03(\v2&.InternalApi.PeriodicScheduler.TriggerR\btriggers\"\xa4\x03\n" +
	"\x0eHistoryRequest\x12\x1f\n" +
	"\vperiodic_id\x18\x01 \x01(\tR\n" +
	"periodicId\x12Y\n" +
	"\vcursor_type\x18\x02 \x01(\x0e28.InternalApi.PeriodicScheduler.HistoryRequest.CursorTypeR\n" +
	"cursorType\x12!\n" +
	"\fcursor_value\x18\x03 \x01(\x04R\vcursorValue\x12O\n" +
	"\afilters\x18\x04 \x01(\v25.InternalApi.PeriodicScheduler.HistoryRequest.FiltersR\afilters\x1ar\n" +
	"\aFilters\x12\x1f\n" +
	"\vbranch_name\x18\x01 \x01(\tR\n" +
	"branchName\x12#\n" +
	"\rpipeline_file\x18\x02 \x01(\tR\fpipelineFile\x12!\n" +
	"\ftriggered_by\x18\x03 \x01(\tR\vtriggeredBy\".\n" +
	"\n" +
	"CursorType\x12\t\n" +
	"\x05FIRST\x10\x00\x12\t\n" +
	"\x05AFTER\x10\x01\x12\n" +
	"\n" +
	"\x06BEFORE\x10\x02\"\xca\x01\n" +
	"\x0fHistoryResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12B\n" +
	"\btriggers\x18\x02 \x03(\v2&.InternalApi.PeriodicScheduler.TriggerR\btriggers\x12#\n" +
	"\rcursor_before\x18\x03 \x01(\x04R\fcursorBefore\x12!\n" +
	"\fcursor_after\x18\x04 \x01(\x04R\vcursorAfter\"\xff\x01\n" +
	"\vListRequest\x12'\n" +
	"\x0forganization_id\x18\x01 \x01(\tR\x0eorganizationId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12!\n" +
	"\frequester_id\x18\x03 \x01(\tR\vrequesterId\x12\x12\n" +
	"\x04page\x18\x04 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x05 \x01(\x05R\bpageSize\x12>\n" +
	"\x05order\x18\x06 \x01(\x0e2(.InternalApi.PeriodicScheduler.ListOrderR\x05order\x12\x14\n" +
	"\x05query\x18\a \x01(\tR\x05query\"\x86\x02\n" +
	"\fListResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12E\n" +
	"\tperiodics\x18\x02 \x03(\v2'.InternalApi.PeriodicScheduler.PeriodicR\tperiodics\x12\x1f\n" +
	"\vpage_number\x18\x03 \x01(\x05R\n" +
	"pageNumber\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12#\n" +
	"\rtotal_entries\x18\x05 \x01(\x05R\ftotalEntries\x12\x1f\n" +
	"\vtotal_pages\x18\x06 \x01(\x05R\n" +
	"totalPages\"\xe8\x02\n" +
	"\x11ListKeysetRequest\x12'\n" +
	"\x0forganization_id\x18\x01 \x01(\tR\x0eorganizationId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12X\n" +
	"\tdirection\x18\x05 \x01(\x0e2:.InternalApi.PeriodicScheduler.ListKeysetRequest.DirectionR\tdirection\x12>\n" +
	"\x05order\x18\x06 \x01(\x0e2(.InternalApi.PeriodicScheduler.ListOrderR\x05order\x12\x14\n" +
	"\x05query\x18\a \x01(\tR\x05query\"\x1f\n" +
	"\tDirection\x12\b\n" +
	"\x04NEXT\x10\x00\x12\b\n" +
	"\x04PREV\x10\x01\"\xf5\x01\n" +
	"\x12ListKeysetResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12E\n" +
	"\tperiodics\x18\x02 \x03(\v2'.InternalApi.PeriodicScheduler.PeriodicR\tperiodics\x12&\n" +
	"\x0fnext_page_token\x18\x03 \x01(\tR\rnextPageToken\x12&\n" +
	"\x0fprev_page_token\x18\x04 \x01(\tR\rprevPageToken\x12\x1b\n" +
	"\tpage_size\x18\x05 \x01(\x05R\bpageSize\"=\n" +
	"\rDeleteRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1c\n" +
	"\trequester\x18\x04 \x01(\tR\trequester\"=\n" +
	"\x0eDeleteResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\"\x82\x01\n" +
	"\x13GetProjectIdRequest\x12\x1f\n" +
	"\vperiodic_id\x18\x01 \x01(\tR\n" +
	"periodicId\x12!\n" +
	"\fproject_name\x18\x02 \x01(\tR\vprojectName\x12'\n" +
	"\x0forganization_id\x18\x03 \x01(\tR\x0eorganizationId\"b\n" +
	"\x14GetProjectIdResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\"\x10\n" +
	"\x0eVersionRequest\"+\n" +
	"\x0fVersionResponse\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion*7\n" +
	"\tListOrder\x12\x0f\n" +
	"\vBY_NAME_ASC\x10\x00\x12\x19\n" +
	"\x15BY_CREATION_DATE_DESC\x10\x012\x88\v\n" +
	"\x0fPeriodicService\x12b\n" +
	"\x05Apply\x12+.InternalApi.PeriodicScheduler.ApplyRequest\x1a,.InternalApi.PeriodicScheduler.ApplyResponse\x12h\n" +
	"\aPersist\x12-.InternalApi.PeriodicScheduler.PersistRequest\x1a..InternalApi.PeriodicScheduler.PersistResponse\x12b\n" +
	"\x05Pause\x12+.InternalApi.PeriodicScheduler.PauseRequest\x1a,.InternalApi.PeriodicScheduler.PauseResponse\x12h\n" +
	"\aUnpause\x12-.InternalApi.PeriodicScheduler.UnpauseRequest\x1a..InternalApi.PeriodicScheduler.UnpauseResponse\x12e\n" +
	"\x06RunNow\x12,.InternalApi.PeriodicScheduler.RunNowRequest\x1a-.InternalApi.PeriodicScheduler.RunNowResponse\x12k\n" +
	"\bDescribe\x12..InternalApi.PeriodicScheduler.DescribeRequest\x1a/.InternalApi.PeriodicScheduler.DescribeResponse\x12}\n" +
	"\x0eLatestTriggers\x124.InternalApi.PeriodicScheduler.LatestTriggersRequest\x1a5.InternalApi.PeriodicScheduler.LatestTriggersResponse\x12h\n" +
	"\aHistory\x12-.InternalApi.PeriodicScheduler.HistoryRequest\x1a..InternalApi.PeriodicScheduler.HistoryResponse\x12_\n" +
	"\x04List\x12*.InternalApi.PeriodicScheduler.ListRequest\x1a+.InternalApi.PeriodicScheduler.ListResponse\x12q\n" +
	"\n" +
	"ListKeyset\x120.InternalApi.PeriodicScheduler.ListKeysetRequest\x1a1.InternalApi.PeriodicScheduler.ListKeysetResponse\x12e\n" +
	"\x06Delete\x12,.InternalApi.PeriodicScheduler.DeleteRequest\x1a-.InternalApi.PeriodicScheduler.DeleteResponse\x12w\n" +
	"\fGetProjectId\x122.InternalApi.PeriodicScheduler.GetProjectIdRequest\x1a3.InternalApi.PeriodicScheduler.GetProjectIdResponse\x12h\n" +
	"\aVersion\x12-.InternalApi.PeriodicScheduler.VersionRequest\x1a..InternalApi.PeriodicScheduler.VersionResponseBMZKgithub.com/superplanehq/superplane/pkg/protos/periodic_schedulerb\x06proto3"

var (
	file_periodic_scheduler_proto_rawDescOnce sync.Once
	file_periodic_scheduler_proto_rawDescData []byte
)

func file_periodic_scheduler_proto_rawDescGZIP() []byte {
	file_periodic_scheduler_proto_rawDescOnce.Do(func() {
		file_periodic_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_periodic_scheduler_proto_rawDesc), len(file_periodic_scheduler_proto_rawDesc)))
	})
	return file_periodic_scheduler_proto_rawDescData
}

var file_periodic_scheduler_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_periodic_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_periodic_scheduler_proto_goTypes = []any{
	(ListOrder)(0),                    // 0: InternalApi.PeriodicScheduler.ListOrder
	(PersistRequest_ScheduleState)(0), // 1: InternalApi.PeriodicScheduler.PersistRequest.ScheduleState
	(HistoryRequest_CursorType)(0),    // 2: InternalApi.PeriodicScheduler.HistoryRequest.CursorType
	(ListKeysetRequest_Direction)(0),  // 3: InternalApi.PeriodicScheduler.ListKeysetRequest.Direction
	(*ApplyRequest)(nil),              // 4: InternalApi.PeriodicScheduler.ApplyRequest
	(*ApplyResponse)(nil),             // 5: InternalApi.PeriodicScheduler.ApplyResponse
	(*PersistRequest)(nil),            // 6: InternalApi.PeriodicScheduler.PersistRequest
	(*PersistResponse)(nil),           // 7: InternalApi.PeriodicScheduler.PersistResponse
	(*PauseRequest)(nil),              // 8: InternalApi.PeriodicScheduler.PauseRequest
	(*PauseResponse)(nil),             // 9: InternalApi.PeriodicScheduler.PauseResponse
	(*UnpauseRequest)(nil),            // 10: InternalApi.PeriodicScheduler.UnpauseRequest
	(*UnpauseResponse)(nil),           // 11: InternalApi.PeriodicScheduler.UnpauseResponse
	(*RunNowRequest)(nil),             // 12: InternalApi.PeriodicScheduler.RunNowRequest
	(*RunNowResponse)(nil),            // 13: InternalApi.PeriodicScheduler.RunNowResponse
	(*DescribeRequest)(nil),           // 14: InternalApi.PeriodicScheduler.DescribeRequest
	(*DescribeResponse)(nil),          // 15: InternalApi.PeriodicScheduler.DescribeResponse
	(*Periodic)(nil),                  // 16: InternalApi.PeriodicScheduler.Periodic
	(*Trigger)(nil),                   // 17: InternalApi.PeriodicScheduler.Trigger
	(*ParameterValue)(nil),            // 18: InternalApi.PeriodicScheduler.ParameterValue
	(*LatestTriggersRequest)(nil),     // 19: InternalApi.PeriodicScheduler.LatestTriggersRequest
	(*LatestTriggersResponse)(nil),    // 20: InternalApi.PeriodicScheduler.LatestTriggersResponse
	(*HistoryRequest)(nil),            // 21: InternalApi.PeriodicScheduler.HistoryRequest
	(*HistoryResponse)(nil),           // 22: InternalApi.PeriodicScheduler.HistoryResponse
	(*ListRequest)(nil),               // 23: InternalApi.PeriodicScheduler.ListRequest
	(*ListResponse)(nil),              // 24: InternalApi.PeriodicScheduler.ListResponse
	(*ListKeysetRequest)(nil),         // 25: InternalApi.PeriodicScheduler.ListKeysetRequest
	(*ListKeysetResponse)(nil),        // 26: InternalApi.PeriodicScheduler.ListKeysetResponse
	(*DeleteRequest)(nil),             // 27: InternalApi.PeriodicScheduler.DeleteRequest
	(*DeleteResponse)(nil),            // 28: InternalApi.PeriodicScheduler.DeleteResponse
	(*GetProjectIdRequest)(nil),       // 29: InternalApi.PeriodicScheduler.GetProjectIdRequest
	(*GetProjectIdResponse)(nil),      // 30: InternalApi.PeriodicScheduler.GetProjectIdResponse
	(*VersionRequest)(nil),            // 31: InternalApi.PeriodicScheduler.VersionRequest
	(*VersionResponse)(nil),           // 32: InternalApi.PeriodicScheduler.VersionResponse
	(*Periodic_Parameter)(nil),        // 33: InternalApi.PeriodicScheduler.Periodic.Parameter
	(*HistoryRequest_Filters)(nil),    // 34: InternalApi.PeriodicScheduler.HistoryRequest.Filters
	(*status.Status)(nil),             // 35: InternalApi.Status
	(*timestamp.Timestamp)(nil),       // 36: google.protobuf.Timestamp
}
var file_periodic_scheduler_proto_depIdxs = []int32{
	35, // 0: InternalApi.PeriodicScheduler.ApplyResponse.status:type_name -> InternalApi.Status
	1,  // 1: InternalApi.PeriodicScheduler.PersistRequest.state:type_name -> InternalApi.PeriodicScheduler.PersistRequest.ScheduleState
	33, // 2: InternalApi.PeriodicScheduler.PersistRequest.parameters:type_name -> InternalApi.PeriodicScheduler.Periodic.Parameter
	35, // 3: InternalApi.PeriodicScheduler.PersistResponse.status:type_name -> InternalApi.Status
	16, // 4: InternalApi.PeriodicScheduler.PersistResponse.periodic:type_name -> InternalApi.PeriodicScheduler.Periodic
	35, // 5: InternalApi.PeriodicScheduler.PauseResponse.status:type_name -> InternalApi.Status
	35, // 6: InternalApi.PeriodicScheduler.UnpauseResponse.status:type_name -> InternalApi.Status
	18, // 7: InternalApi.PeriodicScheduler.RunNowRequest.parameter_values:type_name -> InternalApi.PeriodicScheduler.ParameterValue
	35, // 8: InternalApi.PeriodicScheduler.RunNowResponse.status:type_name -> InternalApi.Status
	16, // 9: InternalApi.PeriodicScheduler.RunNowResponse.periodic:type_name -> InternalApi.PeriodicScheduler.Periodic
	17, // 10: InternalApi.PeriodicScheduler.RunNowResponse.triggers:type_name -> InternalApi.PeriodicScheduler.Trigger
	17, // 11: InternalApi.PeriodicScheduler.RunNowResponse.trigger:type_name -> InternalApi.PeriodicScheduler.Trigger
	35, // 12: InternalApi.PeriodicScheduler.DescribeResponse.status:type_name -> InternalApi.Status
	16, // 13: InternalApi.PeriodicScheduler.DescribeResponse.periodic:type_name -> InternalApi.PeriodicScheduler.Periodic
	17, // 14: InternalApi.PeriodicScheduler.DescribeResponse.triggers:type_name -> InternalApi.PeriodicScheduler.Trigger
	36, // 15: InternalApi.PeriodicScheduler.Periodic.updated_at:type_name -> google.protobuf.Timestamp
	36, // 16: InternalApi.PeriodicScheduler.Periodic.pause_toggled_at:type_name -> google.protobuf.Timestamp
	36, // 17: InternalApi.PeriodicScheduler.Periodic.inserted_at:type_name -> google.protobuf.Timestamp
	33, // 18: InternalApi.PeriodicScheduler.Periodic.parameters:type_name -> InternalApi.PeriodicScheduler.Periodic.Parameter
	36, // 19: InternalApi.PeriodicScheduler.Trigger.triggered_at:type_name -> google.protobuf.Timestamp
	36, // 20: InternalApi.PeriodicScheduler.Trigger.scheduled_at:type_name -> google.protobuf.Timestamp
	18, // 21: InternalApi.PeriodicScheduler.Trigger.parameter_values:type_name -> InternalApi.PeriodicScheduler.ParameterValue
	35, // 22: InternalApi.PeriodicScheduler.LatestTriggersResponse.status:type_name -> InternalApi.Status
	17, // 23: InternalApi.PeriodicScheduler.LatestTriggersResponse.triggers:type_name -> InternalApi.PeriodicScheduler.Trigger
	2,  // 24: InternalApi.PeriodicScheduler.HistoryRequest.cursor_type:type_name -> InternalApi.PeriodicScheduler.HistoryRequest.CursorType
	34, // 25: InternalApi.PeriodicScheduler.HistoryRequest.filters:type_name -> InternalApi.PeriodicScheduler.HistoryRequest.Filters
	35, // 26: InternalApi.PeriodicScheduler.HistoryResponse.status:type_name -> InternalApi.Status
	17, // 27: InternalApi.PeriodicScheduler.HistoryResponse.triggers:type_name -> InternalApi.PeriodicScheduler.Trigger
	0,  // 28: InternalApi.PeriodicScheduler.ListRequest.order:type_name -> InternalApi.PeriodicScheduler.ListOrder
	35, // 29: InternalApi.PeriodicScheduler.ListResponse.status:type_name -> InternalApi.Status
	16, // 30: InternalApi.PeriodicScheduler.ListResponse.periodics:type_name -> InternalApi.PeriodicScheduler.Periodic
	3,  // 31: InternalApi.PeriodicScheduler.ListKeysetRequest.direction:type_name -> InternalApi.PeriodicScheduler.ListKeysetRequest.Direction
	0,  // 32: InternalApi.PeriodicScheduler.ListKeysetRequest.order:type_name -> InternalApi.PeriodicScheduler.ListOrder
	35, // 33: InternalApi.PeriodicScheduler.ListKeysetResponse.status:type_name -> InternalApi.Status
	16, // 34: InternalApi.PeriodicScheduler.ListKeysetResponse.periodics:type_name -> InternalApi.PeriodicScheduler.Periodic
	35, // 35: InternalApi.PeriodicScheduler.DeleteResponse.status:type_name -> InternalApi.Status
	35, // 36: InternalApi.PeriodicScheduler.GetProjectIdResponse.status:type_name -> InternalApi.Status
	4,  // 37: InternalApi.PeriodicScheduler.PeriodicService.Apply:input_type -> InternalApi.PeriodicScheduler.ApplyRequest
	6,  // 38: InternalApi.PeriodicScheduler.PeriodicService.Persist:input_type -> InternalApi.PeriodicScheduler.PersistRequest
	8,  // 39: InternalApi.PeriodicScheduler.PeriodicService.Pause:input_type -> InternalApi.PeriodicScheduler.PauseRequest
	10, // 40: InternalApi.PeriodicScheduler.PeriodicService.Unpause:input_type -> InternalApi.PeriodicScheduler.UnpauseRequest
	12, // 41: InternalApi.PeriodicScheduler.PeriodicService.RunNow:input_type -> InternalApi.PeriodicScheduler.RunNowRequest
	14, // 42: InternalApi.PeriodicScheduler.PeriodicService.Describe:input_type -> InternalApi.PeriodicScheduler.DescribeRequest
	19, // 43: InternalApi.PeriodicScheduler.PeriodicService.LatestTriggers:input_type -> InternalApi.PeriodicScheduler.LatestTriggersRequest
	21, // 44: InternalApi.PeriodicScheduler.PeriodicService.History:input_type -> InternalApi.PeriodicScheduler.HistoryRequest
	23, // 45: InternalApi.PeriodicScheduler.PeriodicService.List:input_type -> InternalApi.PeriodicScheduler.ListRequest
	25, // 46: InternalApi.PeriodicScheduler.PeriodicService.ListKeyset:input_type -> InternalApi.PeriodicScheduler.ListKeysetRequest
	27, // 47: InternalApi.PeriodicScheduler.PeriodicService.Delete:input_type -> InternalApi.PeriodicScheduler.DeleteRequest
	29, // 48: InternalApi.PeriodicScheduler.PeriodicService.GetProjectId:input_type -> InternalApi.PeriodicScheduler.GetProjectIdRequest
	31, // 49: InternalApi.PeriodicScheduler.PeriodicService.Version:input_type -> InternalApi.PeriodicScheduler.VersionRequest
	5,  // 50: InternalApi.PeriodicScheduler.PeriodicService.Apply:output_type -> InternalApi.PeriodicScheduler.ApplyResponse
	7,  // 51: InternalApi.PeriodicScheduler.PeriodicService.Persist:output_type -> InternalApi.PeriodicScheduler.PersistResponse
	9,  // 52: InternalApi.PeriodicScheduler.PeriodicService.Pause:output_type -> InternalApi.PeriodicScheduler.PauseResponse
	11, // 53: InternalApi.PeriodicScheduler.PeriodicService.Unpause:output_type -> InternalApi.PeriodicScheduler.UnpauseResponse
	13, // 54: InternalApi.PeriodicScheduler.PeriodicService.RunNow:output_type -> InternalApi.PeriodicScheduler.RunNowResponse
	15, // 55: InternalApi.PeriodicScheduler.PeriodicService.Describe:output_type -> InternalApi.PeriodicScheduler.DescribeResponse
	20, // 56: InternalApi.PeriodicScheduler.PeriodicService.LatestTriggers:output_type -> InternalApi.PeriodicScheduler.LatestTriggersResponse
	22, // 57: InternalApi.PeriodicScheduler.PeriodicService.History:output_type -> InternalApi.PeriodicScheduler.HistoryResponse
	24, // 58: InternalApi.PeriodicScheduler.PeriodicService.List:output_type -> InternalApi.PeriodicScheduler.ListResponse
	26, // 59: InternalApi.PeriodicScheduler.PeriodicService.ListKeyset:output_type -> InternalApi.PeriodicScheduler.ListKeysetResponse
	28, // 60: InternalApi.PeriodicScheduler.PeriodicService.Delete:output_type -> InternalApi.PeriodicScheduler.DeleteResponse
	30, // 61: InternalApi.PeriodicScheduler.PeriodicService.GetProjectId:output_type -> InternalApi.PeriodicScheduler.GetProjectIdResponse
	32, // 62: InternalApi.PeriodicScheduler.PeriodicService.Version:output_type -> InternalApi.PeriodicScheduler.VersionResponse
	50, // [50:63] is the sub-list for method output_type
	37, // [37:50] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_periodic_scheduler_proto_init() }
func file_periodic_scheduler_proto_init() {
	if File_periodic_scheduler_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_periodic_scheduler_proto_rawDesc), len(file_periodic_scheduler_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_periodic_scheduler_proto_goTypes,
		DependencyIndexes: file_periodic_scheduler_proto_depIdxs,
		EnumInfos:         file_periodic_scheduler_proto_enumTypes,
		MessageInfos:      file_periodic_scheduler_proto_msgTypes,
	}.Build()
	File_periodic_scheduler_proto = out.File
	file_periodic_scheduler_proto_goTypes = nil
	file_periodic_scheduler_proto_depIdxs = nil
}
