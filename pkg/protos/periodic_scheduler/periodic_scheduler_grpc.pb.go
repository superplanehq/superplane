// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.3.0
// source: periodic_scheduler.proto

package periodic_scheduler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PeriodicService_Apply_FullMethodName          = "/InternalApi.PeriodicScheduler.PeriodicService/Apply"
	PeriodicService_Persist_FullMethodName        = "/InternalApi.PeriodicScheduler.PeriodicService/Persist"
	PeriodicService_Pause_FullMethodName          = "/InternalApi.PeriodicScheduler.PeriodicService/Pause"
	PeriodicService_Unpause_FullMethodName        = "/InternalApi.PeriodicScheduler.PeriodicService/Unpause"
	PeriodicService_RunNow_FullMethodName         = "/InternalApi.PeriodicScheduler.PeriodicService/RunNow"
	PeriodicService_Describe_FullMethodName       = "/InternalApi.PeriodicScheduler.PeriodicService/Describe"
	PeriodicService_LatestTriggers_FullMethodName = "/InternalApi.PeriodicScheduler.PeriodicService/LatestTriggers"
	PeriodicService_History_FullMethodName        = "/InternalApi.PeriodicScheduler.PeriodicService/History"
	PeriodicService_List_FullMethodName           = "/InternalApi.PeriodicScheduler.PeriodicService/List"
	PeriodicService_ListKeyset_FullMethodName     = "/InternalApi.PeriodicScheduler.PeriodicService/ListKeyset"
	PeriodicService_Delete_FullMethodName         = "/InternalApi.PeriodicScheduler.PeriodicService/Delete"
	PeriodicService_GetProjectId_FullMethodName   = "/InternalApi.PeriodicScheduler.PeriodicService/GetProjectId"
	PeriodicService_Version_FullMethodName        = "/InternalApi.PeriodicScheduler.PeriodicService/Version"
)

// PeriodicServiceClient is the client API for PeriodicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Periodic service API specification.
type PeriodicServiceClient interface {
	// DEPRECATED: Use Persist instead
	//
	// Creates new periodic or updates existing one with data from yml definiton.
	// Operation is synchronous.
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	// Creates new periodic or updates existing one with data from structure.
	// Operation is synchronous.
	Persist(ctx context.Context, in *PersistRequest, opts ...grpc.CallOption) (*PersistResponse, error)
	// Operation is called to pause the periodic.
	// Operation is synchronous.
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	// Operation is called unpause the periodic.
	// Operation is synchronous.
	Unpause(ctx context.Context, in *UnpauseRequest, opts ...grpc.CallOption) (*UnpauseResponse, error)
	// Operation is called to schedule a workflow based on periodic's data immediately.
	// Operation is synchronous.
	RunNow(ctx context.Context, in *RunNowRequest, opts ...grpc.CallOption) (*RunNowResponse, error)
	// Operation is called to get details of the previously created periodic.
	// Operation is synchronous.
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	// Operation is called to get latest triggers for all provided periodics.
	// Operation is synchronous.
	LatestTriggers(ctx context.Context, in *LatestTriggersRequest, opts ...grpc.CallOption) (*LatestTriggersResponse, error)
	// Operation is called to get a history of triggers for the given periodic.
	// Operation is synchronous.
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	// Operation is called to get all periodics which match given search parameters.
	// Operation is synchronous.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Operation is called to get all periodics which match given search parameters.
	// Operation is synchronous.
	ListKeyset(ctx context.Context, in *ListKeysetRequest, opts ...grpc.CallOption) (*ListKeysetResponse, error)
	// Deletes all data of previously created periodic.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Finds project_id based on given parameters
	GetProjectId(ctx context.Context, in *GetProjectIdRequest, opts ...grpc.CallOption) (*GetProjectIdResponse, error)
	// Operation returns string representing version of the periodic scheduler service.
	// Operation is synchronous.
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type periodicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeriodicServiceClient(cc grpc.ClientConnInterface) PeriodicServiceClient {
	return &periodicServiceClient{cc}
}

func (c *periodicServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyResponse)
	err := c.cc.Invoke(ctx, PeriodicService_Apply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) Persist(ctx context.Context, in *PersistRequest, opts ...grpc.CallOption) (*PersistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersistResponse)
	err := c.cc.Invoke(ctx, PeriodicService_Persist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, PeriodicService_Pause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) Unpause(ctx context.Context, in *UnpauseRequest, opts ...grpc.CallOption) (*UnpauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpauseResponse)
	err := c.cc.Invoke(ctx, PeriodicService_Unpause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) RunNow(ctx context.Context, in *RunNowRequest, opts ...grpc.CallOption) (*RunNowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunNowResponse)
	err := c.cc.Invoke(ctx, PeriodicService_RunNow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeResponse)
	err := c.cc.Invoke(ctx, PeriodicService_Describe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) LatestTriggers(ctx context.Context, in *LatestTriggersRequest, opts ...grpc.CallOption) (*LatestTriggersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LatestTriggersResponse)
	err := c.cc.Invoke(ctx, PeriodicService_LatestTriggers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, PeriodicService_History_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, PeriodicService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) ListKeyset(ctx context.Context, in *ListKeysetRequest, opts ...grpc.CallOption) (*ListKeysetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKeysetResponse)
	err := c.cc.Invoke(ctx, PeriodicService_ListKeyset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, PeriodicService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) GetProjectId(ctx context.Context, in *GetProjectIdRequest, opts ...grpc.CallOption) (*GetProjectIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectIdResponse)
	err := c.cc.Invoke(ctx, PeriodicService_GetProjectId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, PeriodicService_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeriodicServiceServer is the server API for PeriodicService service.
// All implementations should embed UnimplementedPeriodicServiceServer
// for forward compatibility.
//
// Periodic service API specification.
type PeriodicServiceServer interface {
	// DEPRECATED: Use Persist instead
	//
	// Creates new periodic or updates existing one with data from yml definiton.
	// Operation is synchronous.
	Apply(context.Context, *ApplyRequest) (*ApplyResponse, error)
	// Creates new periodic or updates existing one with data from structure.
	// Operation is synchronous.
	Persist(context.Context, *PersistRequest) (*PersistResponse, error)
	// Operation is called to pause the periodic.
	// Operation is synchronous.
	Pause(context.Context, *PauseRequest) (*PauseResponse, error)
	// Operation is called unpause the periodic.
	// Operation is synchronous.
	Unpause(context.Context, *UnpauseRequest) (*UnpauseResponse, error)
	// Operation is called to schedule a workflow based on periodic's data immediately.
	// Operation is synchronous.
	RunNow(context.Context, *RunNowRequest) (*RunNowResponse, error)
	// Operation is called to get details of the previously created periodic.
	// Operation is synchronous.
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	// Operation is called to get latest triggers for all provided periodics.
	// Operation is synchronous.
	LatestTriggers(context.Context, *LatestTriggersRequest) (*LatestTriggersResponse, error)
	// Operation is called to get a history of triggers for the given periodic.
	// Operation is synchronous.
	History(context.Context, *HistoryRequest) (*HistoryResponse, error)
	// Operation is called to get all periodics which match given search parameters.
	// Operation is synchronous.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Operation is called to get all periodics which match given search parameters.
	// Operation is synchronous.
	ListKeyset(context.Context, *ListKeysetRequest) (*ListKeysetResponse, error)
	// Deletes all data of previously created periodic.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Finds project_id based on given parameters
	GetProjectId(context.Context, *GetProjectIdRequest) (*GetProjectIdResponse, error)
	// Operation returns string representing version of the periodic scheduler service.
	// Operation is synchronous.
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

// UnimplementedPeriodicServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPeriodicServiceServer struct{}

func (UnimplementedPeriodicServiceServer) Apply(context.Context, *ApplyRequest) (*ApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedPeriodicServiceServer) Persist(context.Context, *PersistRequest) (*PersistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Persist not implemented")
}
func (UnimplementedPeriodicServiceServer) Pause(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedPeriodicServiceServer) Unpause(context.Context, *UnpauseRequest) (*UnpauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedPeriodicServiceServer) RunNow(context.Context, *RunNowRequest) (*RunNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunNow not implemented")
}
func (UnimplementedPeriodicServiceServer) Describe(context.Context, *DescribeRequest) (*DescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedPeriodicServiceServer) LatestTriggers(context.Context, *LatestTriggersRequest) (*LatestTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestTriggers not implemented")
}
func (UnimplementedPeriodicServiceServer) History(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedPeriodicServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPeriodicServiceServer) ListKeyset(context.Context, *ListKeysetRequest) (*ListKeysetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyset not implemented")
}
func (UnimplementedPeriodicServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPeriodicServiceServer) GetProjectId(context.Context, *GetProjectIdRequest) (*GetProjectIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectId not implemented")
}
func (UnimplementedPeriodicServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedPeriodicServiceServer) testEmbeddedByValue() {}

// UnsafePeriodicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeriodicServiceServer will
// result in compilation errors.
type UnsafePeriodicServiceServer interface {
	mustEmbedUnimplementedPeriodicServiceServer()
}

func RegisterPeriodicServiceServer(s grpc.ServiceRegistrar, srv PeriodicServiceServer) {
	// If the following call pancis, it indicates UnimplementedPeriodicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PeriodicService_ServiceDesc, srv)
}

func _PeriodicService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_Persist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).Persist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_Persist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).Persist(ctx, req.(*PersistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).Unpause(ctx, req.(*UnpauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_RunNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).RunNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_RunNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).RunNow(ctx, req.(*RunNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_LatestTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).LatestTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_LatestTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).LatestTriggers(ctx, req.(*LatestTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_History_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).History(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_ListKeyset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).ListKeyset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_ListKeyset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).ListKeyset(ctx, req.(*ListKeysetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_GetProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).GetProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_GetProjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).GetProjectId(ctx, req.(*GetProjectIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeriodicService_ServiceDesc is the grpc.ServiceDesc for PeriodicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeriodicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.PeriodicScheduler.PeriodicService",
	HandlerType: (*PeriodicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _PeriodicService_Apply_Handler,
		},
		{
			MethodName: "Persist",
			Handler:    _PeriodicService_Persist_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _PeriodicService_Pause_Handler,
		},
		{
			MethodName: "Unpause",
			Handler:    _PeriodicService_Unpause_Handler,
		},
		{
			MethodName: "RunNow",
			Handler:    _PeriodicService_RunNow_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _PeriodicService_Describe_Handler,
		},
		{
			MethodName: "LatestTriggers",
			Handler:    _PeriodicService_LatestTriggers_Handler,
		},
		{
			MethodName: "History",
			Handler:    _PeriodicService_History_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PeriodicService_List_Handler,
		},
		{
			MethodName: "ListKeyset",
			Handler:    _PeriodicService_ListKeyset_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PeriodicService_Delete_Handler,
		},
		{
			MethodName: "GetProjectId",
			Handler:    _PeriodicService_GetProjectId_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _PeriodicService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "periodic_scheduler.proto",
}
