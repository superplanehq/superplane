// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.8
// source: blueprints.proto

package blueprints

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Blueprints_ListBlueprints_FullMethodName    = "/Superplane.Blueprints/ListBlueprints"
	Blueprints_DescribeBlueprint_FullMethodName = "/Superplane.Blueprints/DescribeBlueprint"
	Blueprints_CreateBlueprint_FullMethodName   = "/Superplane.Blueprints/CreateBlueprint"
	Blueprints_UpdateBlueprint_FullMethodName   = "/Superplane.Blueprints/UpdateBlueprint"
)

// BlueprintsClient is the client API for Blueprints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlueprintsClient interface {
	ListBlueprints(ctx context.Context, in *ListBlueprintsRequest, opts ...grpc.CallOption) (*ListBlueprintsResponse, error)
	DescribeBlueprint(ctx context.Context, in *DescribeBlueprintRequest, opts ...grpc.CallOption) (*DescribeBlueprintResponse, error)
	CreateBlueprint(ctx context.Context, in *CreateBlueprintRequest, opts ...grpc.CallOption) (*CreateBlueprintResponse, error)
	UpdateBlueprint(ctx context.Context, in *UpdateBlueprintRequest, opts ...grpc.CallOption) (*UpdateBlueprintResponse, error)
}

type blueprintsClient struct {
	cc grpc.ClientConnInterface
}

func NewBlueprintsClient(cc grpc.ClientConnInterface) BlueprintsClient {
	return &blueprintsClient{cc}
}

func (c *blueprintsClient) ListBlueprints(ctx context.Context, in *ListBlueprintsRequest, opts ...grpc.CallOption) (*ListBlueprintsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlueprintsResponse)
	err := c.cc.Invoke(ctx, Blueprints_ListBlueprints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintsClient) DescribeBlueprint(ctx context.Context, in *DescribeBlueprintRequest, opts ...grpc.CallOption) (*DescribeBlueprintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeBlueprintResponse)
	err := c.cc.Invoke(ctx, Blueprints_DescribeBlueprint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintsClient) CreateBlueprint(ctx context.Context, in *CreateBlueprintRequest, opts ...grpc.CallOption) (*CreateBlueprintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBlueprintResponse)
	err := c.cc.Invoke(ctx, Blueprints_CreateBlueprint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintsClient) UpdateBlueprint(ctx context.Context, in *UpdateBlueprintRequest, opts ...grpc.CallOption) (*UpdateBlueprintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBlueprintResponse)
	err := c.cc.Invoke(ctx, Blueprints_UpdateBlueprint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlueprintsServer is the server API for Blueprints service.
// All implementations should embed UnimplementedBlueprintsServer
// for forward compatibility.
type BlueprintsServer interface {
	ListBlueprints(context.Context, *ListBlueprintsRequest) (*ListBlueprintsResponse, error)
	DescribeBlueprint(context.Context, *DescribeBlueprintRequest) (*DescribeBlueprintResponse, error)
	CreateBlueprint(context.Context, *CreateBlueprintRequest) (*CreateBlueprintResponse, error)
	UpdateBlueprint(context.Context, *UpdateBlueprintRequest) (*UpdateBlueprintResponse, error)
}

// UnimplementedBlueprintsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlueprintsServer struct{}

func (UnimplementedBlueprintsServer) ListBlueprints(context.Context, *ListBlueprintsRequest) (*ListBlueprintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlueprints not implemented")
}
func (UnimplementedBlueprintsServer) DescribeBlueprint(context.Context, *DescribeBlueprintRequest) (*DescribeBlueprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeBlueprint not implemented")
}
func (UnimplementedBlueprintsServer) CreateBlueprint(context.Context, *CreateBlueprintRequest) (*CreateBlueprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlueprint not implemented")
}
func (UnimplementedBlueprintsServer) UpdateBlueprint(context.Context, *UpdateBlueprintRequest) (*UpdateBlueprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlueprint not implemented")
}
func (UnimplementedBlueprintsServer) testEmbeddedByValue() {}

// UnsafeBlueprintsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlueprintsServer will
// result in compilation errors.
type UnsafeBlueprintsServer interface {
	mustEmbedUnimplementedBlueprintsServer()
}

func RegisterBlueprintsServer(s grpc.ServiceRegistrar, srv BlueprintsServer) {
	// If the following call pancis, it indicates UnimplementedBlueprintsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Blueprints_ServiceDesc, srv)
}

func _Blueprints_ListBlueprints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlueprintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintsServer).ListBlueprints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blueprints_ListBlueprints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintsServer).ListBlueprints(ctx, req.(*ListBlueprintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blueprints_DescribeBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintsServer).DescribeBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blueprints_DescribeBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintsServer).DescribeBlueprint(ctx, req.(*DescribeBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blueprints_CreateBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintsServer).CreateBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blueprints_CreateBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintsServer).CreateBlueprint(ctx, req.(*CreateBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blueprints_UpdateBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintsServer).UpdateBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blueprints_UpdateBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintsServer).UpdateBlueprint(ctx, req.(*UpdateBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Blueprints_ServiceDesc is the grpc.ServiceDesc for Blueprints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blueprints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Superplane.Blueprints",
	HandlerType: (*BlueprintsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBlueprints",
			Handler:    _Blueprints_ListBlueprints_Handler,
		},
		{
			MethodName: "DescribeBlueprint",
			Handler:    _Blueprints_DescribeBlueprint_Handler,
		},
		{
			MethodName: "CreateBlueprint",
			Handler:    _Blueprints_CreateBlueprint_Handler,
		},
		{
			MethodName: "UpdateBlueprint",
			Handler:    _Blueprints_UpdateBlueprint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blueprints.proto",
}
