// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.3.0
// source: repo_proxy.proto

package repo_proxy

import (
	plumber_w_f_workflow "github.com/superplanehq/superplane/pkg/protos/plumber_w_f.workflow"
	response_status "github.com/superplanehq/superplane/pkg/protos/response_status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Hook_Type int32

const (
	Hook_BRANCH Hook_Type = 0
	Hook_TAG    Hook_Type = 1
	Hook_PR     Hook_Type = 2
)

// Enum value maps for Hook_Type.
var (
	Hook_Type_name = map[int32]string{
		0: "BRANCH",
		1: "TAG",
		2: "PR",
	}
	Hook_Type_value = map[string]int32{
		"BRANCH": 0,
		"TAG":    1,
		"PR":     2,
	}
)

func (x Hook_Type) Enum() *Hook_Type {
	p := new(Hook_Type)
	*p = x
	return p
}

func (x Hook_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hook_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_repo_proxy_proto_enumTypes[0].Descriptor()
}

func (Hook_Type) Type() protoreflect.EnumType {
	return &file_repo_proxy_proto_enumTypes[0]
}

func (x Hook_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hook_Type.Descriptor instead.
func (Hook_Type) EnumDescriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{2, 0}
}

// Describe call request
//
// - hook_id = [required] UUID of the hook.
type DescribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HookId        string                 `protobuf:"bytes,1,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	mi := &file_repo_proxy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{0}
}

func (x *DescribeRequest) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

// Describe call response
//
// Response:
// - status = [required] ResponseStatus
// - hook   = [required if response status is OK] Information about the hook
type DescribeResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Status        *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Hook          *Hook                           `protobuf:"bytes,2,opt,name=hook,proto3" json:"hook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeResponse) Reset() {
	*x = DescribeResponse{}
	mi := &file_repo_proxy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResponse) ProtoMessage() {}

func (x *DescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResponse.ProtoReflect.Descriptor instead.
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *DescribeResponse) GetStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DescribeResponse) GetHook() *Hook {
	if x != nil {
		return x.Hook
	}
	return nil
}

// - repo_slug            = [required] the slug (owner_name/repo_name) of the repository currently being built.
// - git_ref              = [required] Git Reference
// - type                 = [required] type of a hook
// - pr_slug              = [required if PR] the slug (owner_name/repo_name) of the repository from which the PR originated.
// - pr_name              = [required if PR] name of an Pull Request
// - pr_number            = [required if PR] number of an Pull Request
// - pr_sha               = [required if PR] the commit SHA of the HEAD commit of the PR
// - pr_mergeable         = [required if PR] mergeable state of PR
// - pr_branch_name       = [required if PR] the name of the branch from which the PR originated
// - tag_name             = [required if TAG] name of the Tag
// - branch_name          = [required] name of the branch | in PR this is the name of the branch targeted by the pull request.
type Hook struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	HookId            string                 `protobuf:"bytes,1,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	HeadCommitSha     string                 `protobuf:"bytes,2,opt,name=head_commit_sha,json=headCommitSha,proto3" json:"head_commit_sha,omitempty"`
	CommitMessage     string                 `protobuf:"bytes,3,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	CommitRange       string                 `protobuf:"bytes,21,opt,name=commit_range,json=commitRange,proto3" json:"commit_range,omitempty"`
	CommitAuthor      string                 `protobuf:"bytes,24,opt,name=commit_author,json=commitAuthor,proto3" json:"commit_author,omitempty"`
	RepoHostUrl       string                 `protobuf:"bytes,4,opt,name=repo_host_url,json=repoHostUrl,proto3" json:"repo_host_url,omitempty"`
	RepoHostUsername  string                 `protobuf:"bytes,7,opt,name=repo_host_username,json=repoHostUsername,proto3" json:"repo_host_username,omitempty"`
	RepoHostEmail     string                 `protobuf:"bytes,8,opt,name=repo_host_email,json=repoHostEmail,proto3" json:"repo_host_email,omitempty"`
	RepoHostAvatarUrl string                 `protobuf:"bytes,10,opt,name=repo_host_avatar_url,json=repoHostAvatarUrl,proto3" json:"repo_host_avatar_url,omitempty"`
	RepoHostUid       string                 `protobuf:"bytes,25,opt,name=repo_host_uid,json=repoHostUid,proto3" json:"repo_host_uid,omitempty"`
	UserId            string                 `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SemaphoreEmail    string                 `protobuf:"bytes,6,opt,name=semaphore_email,json=semaphoreEmail,proto3" json:"semaphore_email,omitempty"`
	RepoSlug          string                 `protobuf:"bytes,17,opt,name=repo_slug,json=repoSlug,proto3" json:"repo_slug,omitempty"`
	GitRef            string                 `protobuf:"bytes,20,opt,name=git_ref,json=gitRef,proto3" json:"git_ref,omitempty"`
	GitRefType        Hook_Type              `protobuf:"varint,15,opt,name=git_ref_type,json=gitRefType,proto3,enum=InternalApi.RepoProxy.Hook_Type" json:"git_ref_type,omitempty"`
	// PR Build
	PrSlug       string `protobuf:"bytes,18,opt,name=pr_slug,json=prSlug,proto3" json:"pr_slug,omitempty"`
	PrName       string `protobuf:"bytes,12,opt,name=pr_name,json=prName,proto3" json:"pr_name,omitempty"`
	PrNumber     string `protobuf:"bytes,13,opt,name=pr_number,json=prNumber,proto3" json:"pr_number,omitempty"`
	PrSha        string `protobuf:"bytes,19,opt,name=pr_sha,json=prSha,proto3" json:"pr_sha,omitempty"`
	PrMergeable  bool   `protobuf:"varint,22,opt,name=pr_mergeable,json=prMergeable,proto3" json:"pr_mergeable,omitempty"`
	PrBranchName string `protobuf:"bytes,23,opt,name=pr_branch_name,json=prBranchName,proto3" json:"pr_branch_name,omitempty"`
	// Tag Build
	TagName string `protobuf:"bytes,14,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	// Branch Build
	BranchName    string `protobuf:"bytes,16,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hook) Reset() {
	*x = Hook{}
	mi := &file_repo_proxy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hook) ProtoMessage() {}

func (x *Hook) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hook.ProtoReflect.Descriptor instead.
func (*Hook) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *Hook) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *Hook) GetHeadCommitSha() string {
	if x != nil {
		return x.HeadCommitSha
	}
	return ""
}

func (x *Hook) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *Hook) GetCommitRange() string {
	if x != nil {
		return x.CommitRange
	}
	return ""
}

func (x *Hook) GetCommitAuthor() string {
	if x != nil {
		return x.CommitAuthor
	}
	return ""
}

func (x *Hook) GetRepoHostUrl() string {
	if x != nil {
		return x.RepoHostUrl
	}
	return ""
}

func (x *Hook) GetRepoHostUsername() string {
	if x != nil {
		return x.RepoHostUsername
	}
	return ""
}

func (x *Hook) GetRepoHostEmail() string {
	if x != nil {
		return x.RepoHostEmail
	}
	return ""
}

func (x *Hook) GetRepoHostAvatarUrl() string {
	if x != nil {
		return x.RepoHostAvatarUrl
	}
	return ""
}

func (x *Hook) GetRepoHostUid() string {
	if x != nil {
		return x.RepoHostUid
	}
	return ""
}

func (x *Hook) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Hook) GetSemaphoreEmail() string {
	if x != nil {
		return x.SemaphoreEmail
	}
	return ""
}

func (x *Hook) GetRepoSlug() string {
	if x != nil {
		return x.RepoSlug
	}
	return ""
}

func (x *Hook) GetGitRef() string {
	if x != nil {
		return x.GitRef
	}
	return ""
}

func (x *Hook) GetGitRefType() Hook_Type {
	if x != nil {
		return x.GitRefType
	}
	return Hook_BRANCH
}

func (x *Hook) GetPrSlug() string {
	if x != nil {
		return x.PrSlug
	}
	return ""
}

func (x *Hook) GetPrName() string {
	if x != nil {
		return x.PrName
	}
	return ""
}

func (x *Hook) GetPrNumber() string {
	if x != nil {
		return x.PrNumber
	}
	return ""
}

func (x *Hook) GetPrSha() string {
	if x != nil {
		return x.PrSha
	}
	return ""
}

func (x *Hook) GetPrMergeable() bool {
	if x != nil {
		return x.PrMergeable
	}
	return false
}

func (x *Hook) GetPrBranchName() string {
	if x != nil {
		return x.PrBranchName
	}
	return ""
}

func (x *Hook) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *Hook) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

// DescribeMany call request
//
// - hook_id = [required] UUID of the hook.
type DescribeManyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HookIds       []string               `protobuf:"bytes,1,rep,name=hook_ids,json=hookIds,proto3" json:"hook_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeManyRequest) Reset() {
	*x = DescribeManyRequest{}
	mi := &file_repo_proxy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeManyRequest) ProtoMessage() {}

func (x *DescribeManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeManyRequest.ProtoReflect.Descriptor instead.
func (*DescribeManyRequest) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeManyRequest) GetHookIds() []string {
	if x != nil {
		return x.HookIds
	}
	return nil
}

// DescribeMany call response
//
// - hooks  = [required] hooks requested in DescribeManyRequest
// - status = [required] ResponseStatus
type DescribeManyResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Status        *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Hooks         []*Hook                         `protobuf:"bytes,2,rep,name=hooks,proto3" json:"hooks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeManyResponse) Reset() {
	*x = DescribeManyResponse{}
	mi := &file_repo_proxy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeManyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeManyResponse) ProtoMessage() {}

func (x *DescribeManyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeManyResponse.ProtoReflect.Descriptor instead.
func (*DescribeManyResponse) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{4}
}

func (x *DescribeManyResponse) GetStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DescribeManyResponse) GetHooks() []*Hook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

// ListBlockedHooks call request
//
// - project_id = [required] UUID of the project.
// - git_ref    = [optional] Return only hooks which git_ref contains this string.
type ListBlockedHooksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectId     string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GitRef        string                 `protobuf:"bytes,2,opt,name=git_ref,json=gitRef,proto3" json:"git_ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBlockedHooksRequest) Reset() {
	*x = ListBlockedHooksRequest{}
	mi := &file_repo_proxy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBlockedHooksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlockedHooksRequest) ProtoMessage() {}

func (x *ListBlockedHooksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlockedHooksRequest.ProtoReflect.Descriptor instead.
func (*ListBlockedHooksRequest) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{5}
}

func (x *ListBlockedHooksRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListBlockedHooksRequest) GetGitRef() string {
	if x != nil {
		return x.GitRef
	}
	return ""
}

// Describe call response
//
// Response:
// - status = [required] ResponseStatus
// - hooks  = [required] hooks requested in ListBlockedHooks
type ListBlockedHooksResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Status        *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Hooks         []*Hook                         `protobuf:"bytes,2,rep,name=hooks,proto3" json:"hooks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBlockedHooksResponse) Reset() {
	*x = ListBlockedHooksResponse{}
	mi := &file_repo_proxy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBlockedHooksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlockedHooksResponse) ProtoMessage() {}

func (x *ListBlockedHooksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlockedHooksResponse.ProtoReflect.Descriptor instead.
func (*ListBlockedHooksResponse) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{6}
}

func (x *ListBlockedHooksResponse) GetStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListBlockedHooksResponse) GetHooks() []*Hook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

// ScheduleBlockedHook call request
//
// - hook_id = [required] UUID of the hook.
// - project_id = [required] UUID of the project.
type ScheduleBlockedHookRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HookId        string                 `protobuf:"bytes,1,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	ProjectId     string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleBlockedHookRequest) Reset() {
	*x = ScheduleBlockedHookRequest{}
	mi := &file_repo_proxy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleBlockedHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleBlockedHookRequest) ProtoMessage() {}

func (x *ScheduleBlockedHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleBlockedHookRequest.ProtoReflect.Descriptor instead.
func (*ScheduleBlockedHookRequest) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{7}
}

func (x *ScheduleBlockedHookRequest) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *ScheduleBlockedHookRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// ScheduleBlockedHook call response
//
// Response:
// - wf_id   = [required if OK] workflow id
// - ppl_id  = [required if OK] id of initial pipeline in workflow
type ScheduleBlockedHookResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Status        *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	WfId          string                          `protobuf:"bytes,2,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	PplId         string                          `protobuf:"bytes,3,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleBlockedHookResponse) Reset() {
	*x = ScheduleBlockedHookResponse{}
	mi := &file_repo_proxy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleBlockedHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleBlockedHookResponse) ProtoMessage() {}

func (x *ScheduleBlockedHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleBlockedHookResponse.ProtoReflect.Descriptor instead.
func (*ScheduleBlockedHookResponse) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{8}
}

func (x *ScheduleBlockedHookResponse) GetStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ScheduleBlockedHookResponse) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *ScheduleBlockedHookResponse) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

// Create call request
//
// Arguments:
// - request_token    = [required] unique string, see InternalApi.PlumberWF.ScheduleRequest: Idempotency
// - project_id       = [required] Id of project on Semaphore
// - requester_id     = [optional] The user who initiated workflow
// - definition_file  = [optional] Full path to file containing pipeline definition.
// - triggered_by     = [required] Event that triggered workflow (hook, schedule, API call..)
// - git              = [required] Infromations about repository
//
// Preconditions:
// - For Pull Requests - the Pull Request is mergeable
// - Reference is in one of the following formats - "refs/heads/BRANCH_NAME", "refs/pull/PR_NUMBER", "refs/tags/TAG_NAME"
//
// Postconditions:
// - gRPC status: OK               => Workflow is scheduled and hook_id, workflow_id, and project_id are returned
// - gRPC status: NOT_FOUND        => Something is missing. The error message contains a description.
// - gRPC status: INVALID_ARGUMENT => An invalid argument is passed. The error message contains a description.
// - gRPC status: ABORTED          => The creation of the task was aborted. Requested Pull Request is not mergeable.
// - gPRC status: INTERNAL         => An unknown error happened while processing this request.
//
// Idempotency:
//   - When request is received, request_token is checked first.
//     If workflow with the same request_token is already scheduled:
//   - Previously generated workflow_id is returned, without scheduling new workflow.
//   - Other parameters are not checked; they are assumed to be the same.
type CreateRequest struct {
	state          protoimpl.MessageState           `protogen:"open.v1"`
	RequestToken   string                           `protobuf:"bytes,1,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
	ProjectId      string                           `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RequesterId    string                           `protobuf:"bytes,3,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	DefinitionFile string                           `protobuf:"bytes,4,opt,name=definition_file,json=definitionFile,proto3" json:"definition_file,omitempty"`
	TriggeredBy    plumber_w_f_workflow.TriggeredBy `protobuf:"varint,5,opt,name=triggered_by,json=triggeredBy,proto3,enum=InternalApi.PlumberWF.TriggeredBy" json:"triggered_by,omitempty"`
	Git            *CreateRequest_Git               `protobuf:"bytes,6,opt,name=git,proto3" json:"git,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	mi := &file_repo_proxy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{9}
}

func (x *CreateRequest) GetRequestToken() string {
	if x != nil {
		return x.RequestToken
	}
	return ""
}

func (x *CreateRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *CreateRequest) GetDefinitionFile() string {
	if x != nil {
		return x.DefinitionFile
	}
	return ""
}

func (x *CreateRequest) GetTriggeredBy() plumber_w_f_workflow.TriggeredBy {
	if x != nil {
		return x.TriggeredBy
	}
	return plumber_w_f_workflow.TriggeredBy(0)
}

func (x *CreateRequest) GetGit() *CreateRequest_Git {
	if x != nil {
		return x.Git
	}
	return nil
}

// Create call response
//
// - hookd_id    = [required] hook id
// - workflow_id = [required] workflow id
// - pipeline_id = [required] id of initial pipeline in a workflow
type CreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HookId        string                 `protobuf:"bytes,1,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	WorkflowId    string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	PipelineId    string                 `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	mi := &file_repo_proxy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{10}
}

func (x *CreateResponse) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *CreateResponse) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *CreateResponse) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

// CreateBlank call request
//
// Arguments:
// - request_token    = [required] unique string, see InternalApi.PlumberWF.ScheduleRequest: Idempotency
// - project_id       = [required] Id of project on Semaphore
// - requester_id     = [optional] The user who initiated workflow
// - definition_file  = [optional] Full path to file containing pipeline definition.
// - pipeline_id      = [required] Id of initial pipeline in a workflow (from plumber)
// - wf_id            = [required] Id of a workflow created in plumber
// - triggered_by     = [required] Event that triggered workflow (hook, schedule, API call..)
// - git              = [required] Infromations about repository
//
// Preconditions:
// - For Pull Requests - the Pull Request is mergeable
// - Reference is in one of the following formats - "refs/heads/BRANCH_NAME", "refs/pull/PR_NUMBER", "refs/tags/TAG_NAME"
//
// Postconditions:
// - gRPC status: OK               => Workflow is scheduled and hook_id, workflow_id, and project_id are returned
// - gRPC status: NOT_FOUND        => Something is missing. The error message contains a description.
// - gRPC status: INVALID_ARGUMENT => An invalid argument is passed. The error message contains a description.
// - gRPC status: ABORTED          => The creation of the task was aborted. Requested Pull Request is not mergeable.
// - gPRC status: INTERNAL         => An unknown error happened while processing this request.
//
// Idempotency:
//   - When request is received, request_token is checked first.
//     If workflow with the same request_token is already scheduled:
//   - Previously generated workflow_id is returned, without scheduling new workflow.
//   - Other parameters are not checked; they are assumed to be the same.
type CreateBlankRequest struct {
	state          protoimpl.MessageState           `protogen:"open.v1"`
	RequestToken   string                           `protobuf:"bytes,1,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
	ProjectId      string                           `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RequesterId    string                           `protobuf:"bytes,3,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	DefinitionFile string                           `protobuf:"bytes,4,opt,name=definition_file,json=definitionFile,proto3" json:"definition_file,omitempty"`
	PipelineId     string                           `protobuf:"bytes,5,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	WfId           string                           `protobuf:"bytes,6,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	TriggeredBy    plumber_w_f_workflow.TriggeredBy `protobuf:"varint,7,opt,name=triggered_by,json=triggeredBy,proto3,enum=InternalApi.PlumberWF.TriggeredBy" json:"triggered_by,omitempty"`
	Git            *CreateBlankRequest_Git          `protobuf:"bytes,8,opt,name=git,proto3" json:"git,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateBlankRequest) Reset() {
	*x = CreateBlankRequest{}
	mi := &file_repo_proxy_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBlankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlankRequest) ProtoMessage() {}

func (x *CreateBlankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlankRequest.ProtoReflect.Descriptor instead.
func (*CreateBlankRequest) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{11}
}

func (x *CreateBlankRequest) GetRequestToken() string {
	if x != nil {
		return x.RequestToken
	}
	return ""
}

func (x *CreateBlankRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateBlankRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *CreateBlankRequest) GetDefinitionFile() string {
	if x != nil {
		return x.DefinitionFile
	}
	return ""
}

func (x *CreateBlankRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *CreateBlankRequest) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *CreateBlankRequest) GetTriggeredBy() plumber_w_f_workflow.TriggeredBy {
	if x != nil {
		return x.TriggeredBy
	}
	return plumber_w_f_workflow.TriggeredBy(0)
}

func (x *CreateBlankRequest) GetGit() *CreateBlankRequest_Git {
	if x != nil {
		return x.Git
	}
	return nil
}

// CreateBlank call response
//
// - hook_id     = [required] hook id (created in repo proxy)
// - wf_id       = [required] workflow id (created in plumber)
// - pipeline_id = [required] id of initial pipeline in a workflow
// - branch_id   = [required] branch id (created in repo proxy)
// - repo        = [required] repository-related data
type CreateBlankResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	HookId        string                    `protobuf:"bytes,1,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	WfId          string                    `protobuf:"bytes,2,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	PipelineId    string                    `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	BranchId      string                    `protobuf:"bytes,4,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	Repo          *CreateBlankResponse_Repo `protobuf:"bytes,5,opt,name=repo,proto3" json:"repo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBlankResponse) Reset() {
	*x = CreateBlankResponse{}
	mi := &file_repo_proxy_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBlankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlankResponse) ProtoMessage() {}

func (x *CreateBlankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlankResponse.ProtoReflect.Descriptor instead.
func (*CreateBlankResponse) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{12}
}

func (x *CreateBlankResponse) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *CreateBlankResponse) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *CreateBlankResponse) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *CreateBlankResponse) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *CreateBlankResponse) GetRepo() *CreateBlankResponse_Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

// Repository informations
//
// reference  = [required] full reference on repository, could be branch or a tag
// commit_sha = [optional] commit an given branch, default is whatever we get from GH
type CreateRequest_Git struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reference     string                 `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	CommitSha     string                 `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRequest_Git) Reset() {
	*x = CreateRequest_Git{}
	mi := &file_repo_proxy_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRequest_Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest_Git) ProtoMessage() {}

func (x *CreateRequest_Git) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest_Git.ProtoReflect.Descriptor instead.
func (*CreateRequest_Git) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CreateRequest_Git) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *CreateRequest_Git) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

// Repository informations
//
// reference  = [required] full reference on repository, could be branch or a tag
// commit_sha = [optional] commit an given branch, default is whatever we get from GH
type CreateBlankRequest_Git struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reference     string                 `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	CommitSha     string                 `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBlankRequest_Git) Reset() {
	*x = CreateBlankRequest_Git{}
	mi := &file_repo_proxy_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBlankRequest_Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlankRequest_Git) ProtoMessage() {}

func (x *CreateBlankRequest_Git) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlankRequest_Git.ProtoReflect.Descriptor instead.
func (*CreateBlankRequest_Git) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CreateBlankRequest_Git) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *CreateBlankRequest_Git) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

// Repository data
//
// - owner           = [required] repository owner
// - repo_name       = [required] repository name
// - branch_name     = [required] branch name
// - commit_sha      = [required] commit SHA
// - repository_id   = [optional] repository ID (for BitBucket)
type CreateBlankResponse_Repo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Owner         string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	RepoName      string                 `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	BranchName    string                 `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CommitSha     string                 `protobuf:"bytes,4,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	RepositoryId  string                 `protobuf:"bytes,5,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBlankResponse_Repo) Reset() {
	*x = CreateBlankResponse_Repo{}
	mi := &file_repo_proxy_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBlankResponse_Repo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlankResponse_Repo) ProtoMessage() {}

func (x *CreateBlankResponse_Repo) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proxy_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlankResponse_Repo.ProtoReflect.Descriptor instead.
func (*CreateBlankResponse_Repo) Descriptor() ([]byte, []int) {
	return file_repo_proxy_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CreateBlankResponse_Repo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *CreateBlankResponse_Repo) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *CreateBlankResponse_Repo) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CreateBlankResponse_Repo) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *CreateBlankResponse_Repo) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

var File_repo_proxy_proto protoreflect.FileDescriptor

const file_repo_proxy_proto_rawDesc = "" +
	"\n" +
	"\x10repo_proxy.proto\x12\x15InternalApi.RepoProxy\x1a\"internal_api/response_status.proto\x1a\x1aplumber_w_f.workflow.proto\"*\n" +
	"\x0fDescribeRequest\x12\x17\n" +
	"\ahook_id\x18\x01 \x01(\tR\x06hookId\"x\n" +
	"\x10DescribeResponse\x123\n" +
	"\x06status\x18\x01 \x01(\v2\x1b.InternalApi.ResponseStatusR\x06status\x12/\n" +
	"\x04hook\x18\x02 \x01(\v2\x1b.InternalApi.RepoProxy.HookR\x04hook\"\xd1\x06\n" +
	"\x04Hook\x12\x17\n" +
	"\ahook_id\x18\x01 \x01(\tR\x06hookId\x12&\n" +
	"\x0fhead_commit_sha\x18\x02 \x01(\tR\rheadCommitSha\x12%\n" +
	"\x0ecommit_message\x18\x03 \x01(\tR\rcommitMessage\x12!\n" +
	"\fcommit_range\x18\x15 \x01(\tR\vcommitRange\x12#\n" +
	"\rcommit_author\x18\x18 \x01(\tR\fcommitAuthor\x12\"\n" +
	"\rrepo_host_url\x18\x04 \x01(\tR\vrepoHostUrl\x12,\n" +
	"\x12repo_host_username\x18\a \x01(\tR\x10repoHostUsername\x12&\n" +
	"\x0frepo_host_email\x18\b \x01(\tR\rrepoHostEmail\x12/\n" +
	"\x14repo_host_avatar_url\x18\n" +
	" \x01(\tR\x11repoHostAvatarUrl\x12\"\n" +
	"\rrepo_host_uid\x18\x19 \x01(\tR\vrepoHostUid\x12\x17\n" +
	"\auser_id\x18\t \x01(\tR\x06userId\x12'\n" +
	"\x0fsemaphore_email\x18\x06 \x01(\tR\x0esemaphoreEmail\x12\x1b\n" +
	"\trepo_slug\x18\x11 \x01(\tR\brepoSlug\x12\x17\n" +
	"\agit_ref\x18\x14 \x01(\tR\x06gitRef\x12B\n" +
	"\fgit_ref_type\x18\x0f \x01(\x0e2 .InternalApi.RepoProxy.Hook.TypeR\n" +
	"gitRefType\x12\x17\n" +
	"\apr_slug\x18\x12 \x01(\tR\x06prSlug\x12\x17\n" +
	"\apr_name\x18\f \x01(\tR\x06prName\x12\x1b\n" +
	"\tpr_number\x18\r \x01(\tR\bprNumber\x12\x15\n" +
	"\x06pr_sha\x18\x13 \x01(\tR\x05prSha\x12!\n" +
	"\fpr_mergeable\x18\x16 \x01(\bR\vprMergeable\x12$\n" +
	"\x0epr_branch_name\x18\x17 \x01(\tR\fprBranchName\x12\x19\n" +
	"\btag_name\x18\x0e \x01(\tR\atagName\x12\x1f\n" +
	"\vbranch_name\x18\x10 \x01(\tR\n" +
	"branchName\"#\n" +
	"\x04Type\x12\n" +
	"\n" +
	"\x06BRANCH\x10\x00\x12\a\n" +
	"\x03TAG\x10\x01\x12\x06\n" +
	"\x02PR\x10\x02\"0\n" +
	"\x13DescribeManyRequest\x12\x19\n" +
	"\bhook_ids\x18\x01 \x03(\tR\ahookIds\"~\n" +
	"\x14DescribeManyResponse\x123\n" +
	"\x06status\x18\x01 \x01(\v2\x1b.InternalApi.ResponseStatusR\x06status\x121\n" +
	"\x05hooks\x18\x02 \x03(\v2\x1b.InternalApi.RepoProxy.HookR\x05hooks\"Q\n" +
	"\x17ListBlockedHooksRequest\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12\x17\n" +
	"\agit_ref\x18\x02 \x01(\tR\x06gitRef\"\x82\x01\n" +
	"\x18ListBlockedHooksResponse\x123\n" +
	"\x06status\x18\x01 \x01(\v2\x1b.InternalApi.ResponseStatusR\x06status\x121\n" +
	"\x05hooks\x18\x02 \x03(\v2\x1b.InternalApi.RepoProxy.HookR\x05hooks\"T\n" +
	"\x1aScheduleBlockedHookRequest\x12\x17\n" +
	"\ahook_id\x18\x01 \x01(\tR\x06hookId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\"~\n" +
	"\x1bScheduleBlockedHookResponse\x123\n" +
	"\x06status\x18\x01 \x01(\v2\x1b.InternalApi.ResponseStatusR\x06status\x12\x13\n" +
	"\x05wf_id\x18\x02 \x01(\tR\x04wfId\x12\x15\n" +
	"\x06ppl_id\x18\x03 \x01(\tR\x05pplId\"\xe6\x02\n" +
	"\rCreateRequest\x12#\n" +
	"\rrequest_token\x18\x01 \x01(\tR\frequestToken\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12!\n" +
	"\frequester_id\x18\x03 \x01(\tR\vrequesterId\x12'\n" +
	"\x0fdefinition_file\x18\x04 \x01(\tR\x0edefinitionFile\x12E\n" +
	"\ftriggered_by\x18\x05 \x01(\x0e2\".InternalApi.PlumberWF.TriggeredByR\vtriggeredBy\x12:\n" +
	"\x03git\x18\x06 \x01(\v2(.InternalApi.RepoProxy.CreateRequest.GitR\x03git\x1aB\n" +
	"\x03Git\x12\x1c\n" +
	"\treference\x18\x01 \x01(\tR\treference\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x02 \x01(\tR\tcommitSha\"k\n" +
	"\x0eCreateResponse\x12\x17\n" +
	"\ahook_id\x18\x01 \x01(\tR\x06hookId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12\x1f\n" +
	"\vpipeline_id\x18\x03 \x01(\tR\n" +
	"pipelineId\"\xa6\x03\n" +
	"\x12CreateBlankRequest\x12#\n" +
	"\rrequest_token\x18\x01 \x01(\tR\frequestToken\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12!\n" +
	"\frequester_id\x18\x03 \x01(\tR\vrequesterId\x12'\n" +
	"\x0fdefinition_file\x18\x04 \x01(\tR\x0edefinitionFile\x12\x1f\n" +
	"\vpipeline_id\x18\x05 \x01(\tR\n" +
	"pipelineId\x12\x13\n" +
	"\x05wf_id\x18\x06 \x01(\tR\x04wfId\x12E\n" +
	"\ftriggered_by\x18\a \x01(\x0e2\".InternalApi.PlumberWF.TriggeredByR\vtriggeredBy\x12?\n" +
	"\x03git\x18\b \x01(\v2-.InternalApi.RepoProxy.CreateBlankRequest.GitR\x03git\x1aB\n" +
	"\x03Git\x12\x1c\n" +
	"\treference\x18\x01 \x01(\tR\treference\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x02 \x01(\tR\tcommitSha\"\xe7\x02\n" +
	"\x13CreateBlankResponse\x12\x17\n" +
	"\ahook_id\x18\x01 \x01(\tR\x06hookId\x12\x13\n" +
	"\x05wf_id\x18\x02 \x01(\tR\x04wfId\x12\x1f\n" +
	"\vpipeline_id\x18\x03 \x01(\tR\n" +
	"pipelineId\x12\x1b\n" +
	"\tbranch_id\x18\x04 \x01(\tR\bbranchId\x12C\n" +
	"\x04repo\x18\x05 \x01(\v2/.InternalApi.RepoProxy.CreateBlankResponse.RepoR\x04repo\x1a\x9e\x01\n" +
	"\x04Repo\x12\x14\n" +
	"\x05owner\x18\x01 \x01(\tR\x05owner\x12\x1b\n" +
	"\trepo_name\x18\x02 \x01(\tR\brepoName\x12\x1f\n" +
	"\vbranch_name\x18\x03 \x01(\tR\n" +
	"branchName\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x04 \x01(\tR\tcommitSha\x12#\n" +
	"\rrepository_id\x18\x05 \x01(\tR\frepositoryId2\x88\x05\n" +
	"\x10RepoProxyService\x12[\n" +
	"\bDescribe\x12&.InternalApi.RepoProxy.DescribeRequest\x1a'.InternalApi.RepoProxy.DescribeResponse\x12g\n" +
	"\fDescribeMany\x12*.InternalApi.RepoProxy.DescribeManyRequest\x1a+.InternalApi.RepoProxy.DescribeManyResponse\x12s\n" +
	"\x10ListBlockedHooks\x12..InternalApi.RepoProxy.ListBlockedHooksRequest\x1a/.InternalApi.RepoProxy.ListBlockedHooksResponse\x12|\n" +
	"\x13ScheduleBlockedHook\x121.InternalApi.RepoProxy.ScheduleBlockedHookRequest\x1a2.InternalApi.RepoProxy.ScheduleBlockedHookResponse\x12U\n" +
	"\x06Create\x12$.InternalApi.RepoProxy.CreateRequest\x1a%.InternalApi.RepoProxy.CreateResponse\x12d\n" +
	"\vCreateBlank\x12).InternalApi.RepoProxy.CreateBlankRequest\x1a*.InternalApi.RepoProxy.CreateBlankResponseBEZCgithub.com/superplanehq/superplane/pkg/protos/repo_proxyb\x06proto3"

var (
	file_repo_proxy_proto_rawDescOnce sync.Once
	file_repo_proxy_proto_rawDescData []byte
)

func file_repo_proxy_proto_rawDescGZIP() []byte {
	file_repo_proxy_proto_rawDescOnce.Do(func() {
		file_repo_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_repo_proxy_proto_rawDesc), len(file_repo_proxy_proto_rawDesc)))
	})
	return file_repo_proxy_proto_rawDescData
}

var file_repo_proxy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_repo_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_repo_proxy_proto_goTypes = []any{
	(Hook_Type)(0),                         // 0: InternalApi.RepoProxy.Hook.Type
	(*DescribeRequest)(nil),                // 1: InternalApi.RepoProxy.DescribeRequest
	(*DescribeResponse)(nil),               // 2: InternalApi.RepoProxy.DescribeResponse
	(*Hook)(nil),                           // 3: InternalApi.RepoProxy.Hook
	(*DescribeManyRequest)(nil),            // 4: InternalApi.RepoProxy.DescribeManyRequest
	(*DescribeManyResponse)(nil),           // 5: InternalApi.RepoProxy.DescribeManyResponse
	(*ListBlockedHooksRequest)(nil),        // 6: InternalApi.RepoProxy.ListBlockedHooksRequest
	(*ListBlockedHooksResponse)(nil),       // 7: InternalApi.RepoProxy.ListBlockedHooksResponse
	(*ScheduleBlockedHookRequest)(nil),     // 8: InternalApi.RepoProxy.ScheduleBlockedHookRequest
	(*ScheduleBlockedHookResponse)(nil),    // 9: InternalApi.RepoProxy.ScheduleBlockedHookResponse
	(*CreateRequest)(nil),                  // 10: InternalApi.RepoProxy.CreateRequest
	(*CreateResponse)(nil),                 // 11: InternalApi.RepoProxy.CreateResponse
	(*CreateBlankRequest)(nil),             // 12: InternalApi.RepoProxy.CreateBlankRequest
	(*CreateBlankResponse)(nil),            // 13: InternalApi.RepoProxy.CreateBlankResponse
	(*CreateRequest_Git)(nil),              // 14: InternalApi.RepoProxy.CreateRequest.Git
	(*CreateBlankRequest_Git)(nil),         // 15: InternalApi.RepoProxy.CreateBlankRequest.Git
	(*CreateBlankResponse_Repo)(nil),       // 16: InternalApi.RepoProxy.CreateBlankResponse.Repo
	(*response_status.ResponseStatus)(nil), // 17: InternalApi.ResponseStatus
	(plumber_w_f_workflow.TriggeredBy)(0),  // 18: InternalApi.PlumberWF.TriggeredBy
}
var file_repo_proxy_proto_depIdxs = []int32{
	17, // 0: InternalApi.RepoProxy.DescribeResponse.status:type_name -> InternalApi.ResponseStatus
	3,  // 1: InternalApi.RepoProxy.DescribeResponse.hook:type_name -> InternalApi.RepoProxy.Hook
	0,  // 2: InternalApi.RepoProxy.Hook.git_ref_type:type_name -> InternalApi.RepoProxy.Hook.Type
	17, // 3: InternalApi.RepoProxy.DescribeManyResponse.status:type_name -> InternalApi.ResponseStatus
	3,  // 4: InternalApi.RepoProxy.DescribeManyResponse.hooks:type_name -> InternalApi.RepoProxy.Hook
	17, // 5: InternalApi.RepoProxy.ListBlockedHooksResponse.status:type_name -> InternalApi.ResponseStatus
	3,  // 6: InternalApi.RepoProxy.ListBlockedHooksResponse.hooks:type_name -> InternalApi.RepoProxy.Hook
	17, // 7: InternalApi.RepoProxy.ScheduleBlockedHookResponse.status:type_name -> InternalApi.ResponseStatus
	18, // 8: InternalApi.RepoProxy.CreateRequest.triggered_by:type_name -> InternalApi.PlumberWF.TriggeredBy
	14, // 9: InternalApi.RepoProxy.CreateRequest.git:type_name -> InternalApi.RepoProxy.CreateRequest.Git
	18, // 10: InternalApi.RepoProxy.CreateBlankRequest.triggered_by:type_name -> InternalApi.PlumberWF.TriggeredBy
	15, // 11: InternalApi.RepoProxy.CreateBlankRequest.git:type_name -> InternalApi.RepoProxy.CreateBlankRequest.Git
	16, // 12: InternalApi.RepoProxy.CreateBlankResponse.repo:type_name -> InternalApi.RepoProxy.CreateBlankResponse.Repo
	1,  // 13: InternalApi.RepoProxy.RepoProxyService.Describe:input_type -> InternalApi.RepoProxy.DescribeRequest
	4,  // 14: InternalApi.RepoProxy.RepoProxyService.DescribeMany:input_type -> InternalApi.RepoProxy.DescribeManyRequest
	6,  // 15: InternalApi.RepoProxy.RepoProxyService.ListBlockedHooks:input_type -> InternalApi.RepoProxy.ListBlockedHooksRequest
	8,  // 16: InternalApi.RepoProxy.RepoProxyService.ScheduleBlockedHook:input_type -> InternalApi.RepoProxy.ScheduleBlockedHookRequest
	10, // 17: InternalApi.RepoProxy.RepoProxyService.Create:input_type -> InternalApi.RepoProxy.CreateRequest
	12, // 18: InternalApi.RepoProxy.RepoProxyService.CreateBlank:input_type -> InternalApi.RepoProxy.CreateBlankRequest
	2,  // 19: InternalApi.RepoProxy.RepoProxyService.Describe:output_type -> InternalApi.RepoProxy.DescribeResponse
	5,  // 20: InternalApi.RepoProxy.RepoProxyService.DescribeMany:output_type -> InternalApi.RepoProxy.DescribeManyResponse
	7,  // 21: InternalApi.RepoProxy.RepoProxyService.ListBlockedHooks:output_type -> InternalApi.RepoProxy.ListBlockedHooksResponse
	9,  // 22: InternalApi.RepoProxy.RepoProxyService.ScheduleBlockedHook:output_type -> InternalApi.RepoProxy.ScheduleBlockedHookResponse
	11, // 23: InternalApi.RepoProxy.RepoProxyService.Create:output_type -> InternalApi.RepoProxy.CreateResponse
	13, // 24: InternalApi.RepoProxy.RepoProxyService.CreateBlank:output_type -> InternalApi.RepoProxy.CreateBlankResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_repo_proxy_proto_init() }
func file_repo_proxy_proto_init() {
	if File_repo_proxy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_repo_proxy_proto_rawDesc), len(file_repo_proxy_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_repo_proxy_proto_goTypes,
		DependencyIndexes: file_repo_proxy_proto_depIdxs,
		EnumInfos:         file_repo_proxy_proto_enumTypes,
		MessageInfos:      file_repo_proxy_proto_msgTypes,
	}.Build()
	File_repo_proxy_proto = out.File
	file_repo_proxy_proto_goTypes = nil
	file_repo_proxy_proto_depIdxs = nil
}
