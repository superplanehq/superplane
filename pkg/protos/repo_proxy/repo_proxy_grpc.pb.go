// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.3.0
// source: repo_proxy.proto

package repo_proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RepoProxyService_Describe_FullMethodName            = "/InternalApi.RepoProxy.RepoProxyService/Describe"
	RepoProxyService_DescribeMany_FullMethodName        = "/InternalApi.RepoProxy.RepoProxyService/DescribeMany"
	RepoProxyService_ListBlockedHooks_FullMethodName    = "/InternalApi.RepoProxy.RepoProxyService/ListBlockedHooks"
	RepoProxyService_ScheduleBlockedHook_FullMethodName = "/InternalApi.RepoProxy.RepoProxyService/ScheduleBlockedHook"
	RepoProxyService_Create_FullMethodName              = "/InternalApi.RepoProxy.RepoProxyService/Create"
	RepoProxyService_CreateBlank_FullMethodName         = "/InternalApi.RepoProxy.RepoProxyService/CreateBlank"
)

// RepoProxyServiceClient is the client API for RepoProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepoProxyServiceClient interface {
	// Operation is called to describe an existing repo_proxy.
	// Operation is synchronous.
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	// Operation is called to describe many existing repo_proxies.
	// Operation is synchronous.
	DescribeMany(ctx context.Context, in *DescribeManyRequest, opts ...grpc.CallOption) (*DescribeManyResponse, error)
	ListBlockedHooks(ctx context.Context, in *ListBlockedHooksRequest, opts ...grpc.CallOption) (*ListBlockedHooksResponse, error)
	ScheduleBlockedHook(ctx context.Context, in *ScheduleBlockedHookRequest, opts ...grpc.CallOption) (*ScheduleBlockedHookResponse, error)
	// Operation is called to create a repo_proxy
	// Operation is synchronous.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Operation is called to create a repo_proxy for a blank workflow
	// Operation is synchronous
	CreateBlank(ctx context.Context, in *CreateBlankRequest, opts ...grpc.CallOption) (*CreateBlankResponse, error)
}

type repoProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepoProxyServiceClient(cc grpc.ClientConnInterface) RepoProxyServiceClient {
	return &repoProxyServiceClient{cc}
}

func (c *repoProxyServiceClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeResponse)
	err := c.cc.Invoke(ctx, RepoProxyService_Describe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoProxyServiceClient) DescribeMany(ctx context.Context, in *DescribeManyRequest, opts ...grpc.CallOption) (*DescribeManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeManyResponse)
	err := c.cc.Invoke(ctx, RepoProxyService_DescribeMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoProxyServiceClient) ListBlockedHooks(ctx context.Context, in *ListBlockedHooksRequest, opts ...grpc.CallOption) (*ListBlockedHooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlockedHooksResponse)
	err := c.cc.Invoke(ctx, RepoProxyService_ListBlockedHooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoProxyServiceClient) ScheduleBlockedHook(ctx context.Context, in *ScheduleBlockedHookRequest, opts ...grpc.CallOption) (*ScheduleBlockedHookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleBlockedHookResponse)
	err := c.cc.Invoke(ctx, RepoProxyService_ScheduleBlockedHook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoProxyServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, RepoProxyService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoProxyServiceClient) CreateBlank(ctx context.Context, in *CreateBlankRequest, opts ...grpc.CallOption) (*CreateBlankResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBlankResponse)
	err := c.cc.Invoke(ctx, RepoProxyService_CreateBlank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepoProxyServiceServer is the server API for RepoProxyService service.
// All implementations should embed UnimplementedRepoProxyServiceServer
// for forward compatibility.
type RepoProxyServiceServer interface {
	// Operation is called to describe an existing repo_proxy.
	// Operation is synchronous.
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	// Operation is called to describe many existing repo_proxies.
	// Operation is synchronous.
	DescribeMany(context.Context, *DescribeManyRequest) (*DescribeManyResponse, error)
	ListBlockedHooks(context.Context, *ListBlockedHooksRequest) (*ListBlockedHooksResponse, error)
	ScheduleBlockedHook(context.Context, *ScheduleBlockedHookRequest) (*ScheduleBlockedHookResponse, error)
	// Operation is called to create a repo_proxy
	// Operation is synchronous.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Operation is called to create a repo_proxy for a blank workflow
	// Operation is synchronous
	CreateBlank(context.Context, *CreateBlankRequest) (*CreateBlankResponse, error)
}

// UnimplementedRepoProxyServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRepoProxyServiceServer struct{}

func (UnimplementedRepoProxyServiceServer) Describe(context.Context, *DescribeRequest) (*DescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedRepoProxyServiceServer) DescribeMany(context.Context, *DescribeManyRequest) (*DescribeManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMany not implemented")
}
func (UnimplementedRepoProxyServiceServer) ListBlockedHooks(context.Context, *ListBlockedHooksRequest) (*ListBlockedHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockedHooks not implemented")
}
func (UnimplementedRepoProxyServiceServer) ScheduleBlockedHook(context.Context, *ScheduleBlockedHookRequest) (*ScheduleBlockedHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleBlockedHook not implemented")
}
func (UnimplementedRepoProxyServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRepoProxyServiceServer) CreateBlank(context.Context, *CreateBlankRequest) (*CreateBlankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlank not implemented")
}
func (UnimplementedRepoProxyServiceServer) testEmbeddedByValue() {}

// UnsafeRepoProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepoProxyServiceServer will
// result in compilation errors.
type UnsafeRepoProxyServiceServer interface {
	mustEmbedUnimplementedRepoProxyServiceServer()
}

func RegisterRepoProxyServiceServer(s grpc.ServiceRegistrar, srv RepoProxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedRepoProxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RepoProxyService_ServiceDesc, srv)
}

func _RepoProxyService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoProxyServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoProxyService_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoProxyServiceServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoProxyService_DescribeMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoProxyServiceServer).DescribeMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoProxyService_DescribeMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoProxyServiceServer).DescribeMany(ctx, req.(*DescribeManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoProxyService_ListBlockedHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockedHooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoProxyServiceServer).ListBlockedHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoProxyService_ListBlockedHooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoProxyServiceServer).ListBlockedHooks(ctx, req.(*ListBlockedHooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoProxyService_ScheduleBlockedHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleBlockedHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoProxyServiceServer).ScheduleBlockedHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoProxyService_ScheduleBlockedHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoProxyServiceServer).ScheduleBlockedHook(ctx, req.(*ScheduleBlockedHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoProxyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoProxyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoProxyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoProxyServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoProxyService_CreateBlank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoProxyServiceServer).CreateBlank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoProxyService_CreateBlank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoProxyServiceServer).CreateBlank(ctx, req.(*CreateBlankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepoProxyService_ServiceDesc is the grpc.ServiceDesc for RepoProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepoProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.RepoProxy.RepoProxyService",
	HandlerType: (*RepoProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _RepoProxyService_Describe_Handler,
		},
		{
			MethodName: "DescribeMany",
			Handler:    _RepoProxyService_DescribeMany_Handler,
		},
		{
			MethodName: "ListBlockedHooks",
			Handler:    _RepoProxyService_ListBlockedHooks_Handler,
		},
		{
			MethodName: "ScheduleBlockedHook",
			Handler:    _RepoProxyService_ScheduleBlockedHook_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RepoProxyService_Create_Handler,
		},
		{
			MethodName: "CreateBlank",
			Handler:    _RepoProxyService_CreateBlank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repo_proxy.proto",
}
