// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.3.0
// source: plumber_w_f.workflow.proto

package plumber_w_f_workflow

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	status "github.com/superplanehq/superplane/pkg/protos/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TriggeredBy int32

const (
	TriggeredBy_HOOK       TriggeredBy = 0
	TriggeredBy_SCHEDULE   TriggeredBy = 1
	TriggeredBy_API        TriggeredBy = 2
	TriggeredBy_MANUAL_RUN TriggeredBy = 3
)

// Enum value maps for TriggeredBy.
var (
	TriggeredBy_name = map[int32]string{
		0: "HOOK",
		1: "SCHEDULE",
		2: "API",
		3: "MANUAL_RUN",
	}
	TriggeredBy_value = map[string]int32{
		"HOOK":       0,
		"SCHEDULE":   1,
		"API":        2,
		"MANUAL_RUN": 3,
	}
)

func (x TriggeredBy) Enum() *TriggeredBy {
	p := new(TriggeredBy)
	*p = x
	return p
}

func (x TriggeredBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggeredBy) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_w_f_workflow_proto_enumTypes[0].Descriptor()
}

func (TriggeredBy) Type() protoreflect.EnumType {
	return &file_plumber_w_f_workflow_proto_enumTypes[0]
}

func (x TriggeredBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggeredBy.Descriptor instead.
func (TriggeredBy) EnumDescriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{0}
}

// Type of git reference for which workflow is initiated.
type GitRefType int32

const (
	GitRefType_BRANCH GitRefType = 0
	GitRefType_TAG    GitRefType = 1
	GitRefType_PR     GitRefType = 2
)

// Enum value maps for GitRefType.
var (
	GitRefType_name = map[int32]string{
		0: "BRANCH",
		1: "TAG",
		2: "PR",
	}
	GitRefType_value = map[string]int32{
		"BRANCH": 0,
		"TAG":    1,
		"PR":     2,
	}
)

func (x GitRefType) Enum() *GitRefType {
	p := new(GitRefType)
	*p = x
	return p
}

func (x GitRefType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitRefType) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_w_f_workflow_proto_enumTypes[1].Descriptor()
}

func (GitRefType) Type() protoreflect.EnumType {
	return &file_plumber_w_f_workflow_proto_enumTypes[1]
}

func (x GitRefType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitRefType.Descriptor instead.
func (GitRefType) EnumDescriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{1}
}

type ScheduleRequest_ServiceType int32

const (
	ScheduleRequest_GIT_HUB   ScheduleRequest_ServiceType = 0
	ScheduleRequest_LOCAL     ScheduleRequest_ServiceType = 1
	ScheduleRequest_SNAPSHOT  ScheduleRequest_ServiceType = 2
	ScheduleRequest_BITBUCKET ScheduleRequest_ServiceType = 3
	ScheduleRequest_GITLAB    ScheduleRequest_ServiceType = 4
	ScheduleRequest_GIT       ScheduleRequest_ServiceType = 5
)

// Enum value maps for ScheduleRequest_ServiceType.
var (
	ScheduleRequest_ServiceType_name = map[int32]string{
		0: "GIT_HUB",
		1: "LOCAL",
		2: "SNAPSHOT",
		3: "BITBUCKET",
		4: "GITLAB",
		5: "GIT",
	}
	ScheduleRequest_ServiceType_value = map[string]int32{
		"GIT_HUB":   0,
		"LOCAL":     1,
		"SNAPSHOT":  2,
		"BITBUCKET": 3,
		"GITLAB":    4,
		"GIT":       5,
	}
)

func (x ScheduleRequest_ServiceType) Enum() *ScheduleRequest_ServiceType {
	p := new(ScheduleRequest_ServiceType)
	*p = x
	return p
}

func (x ScheduleRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_w_f_workflow_proto_enumTypes[2].Descriptor()
}

func (ScheduleRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_plumber_w_f_workflow_proto_enumTypes[2]
}

func (x ScheduleRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleRequest_ServiceType.Descriptor instead.
func (ScheduleRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{0, 0}
}

type ListLatestWorkflowsRequest_Order int32

const (
	ListLatestWorkflowsRequest_BY_CREATION_TIME_DESC ListLatestWorkflowsRequest_Order = 0
)

// Enum value maps for ListLatestWorkflowsRequest_Order.
var (
	ListLatestWorkflowsRequest_Order_name = map[int32]string{
		0: "BY_CREATION_TIME_DESC",
	}
	ListLatestWorkflowsRequest_Order_value = map[string]int32{
		"BY_CREATION_TIME_DESC": 0,
	}
)

func (x ListLatestWorkflowsRequest_Order) Enum() *ListLatestWorkflowsRequest_Order {
	p := new(ListLatestWorkflowsRequest_Order)
	*p = x
	return p
}

func (x ListLatestWorkflowsRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListLatestWorkflowsRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_w_f_workflow_proto_enumTypes[3].Descriptor()
}

func (ListLatestWorkflowsRequest_Order) Type() protoreflect.EnumType {
	return &file_plumber_w_f_workflow_proto_enumTypes[3]
}

func (x ListLatestWorkflowsRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListLatestWorkflowsRequest_Order.Descriptor instead.
func (ListLatestWorkflowsRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{4, 0}
}

type ListLatestWorkflowsRequest_Direction int32

const (
	ListLatestWorkflowsRequest_NEXT     ListLatestWorkflowsRequest_Direction = 0
	ListLatestWorkflowsRequest_PREVIOUS ListLatestWorkflowsRequest_Direction = 1
)

// Enum value maps for ListLatestWorkflowsRequest_Direction.
var (
	ListLatestWorkflowsRequest_Direction_name = map[int32]string{
		0: "NEXT",
		1: "PREVIOUS",
	}
	ListLatestWorkflowsRequest_Direction_value = map[string]int32{
		"NEXT":     0,
		"PREVIOUS": 1,
	}
)

func (x ListLatestWorkflowsRequest_Direction) Enum() *ListLatestWorkflowsRequest_Direction {
	p := new(ListLatestWorkflowsRequest_Direction)
	*p = x
	return p
}

func (x ListLatestWorkflowsRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListLatestWorkflowsRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_w_f_workflow_proto_enumTypes[4].Descriptor()
}

func (ListLatestWorkflowsRequest_Direction) Type() protoreflect.EnumType {
	return &file_plumber_w_f_workflow_proto_enumTypes[4]
}

func (x ListLatestWorkflowsRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListLatestWorkflowsRequest_Direction.Descriptor instead.
func (ListLatestWorkflowsRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{4, 1}
}

type ListGroupedKSRequest_Order int32

const (
	ListGroupedKSRequest_BY_CREATION_TIME_DESC ListGroupedKSRequest_Order = 0
)

// Enum value maps for ListGroupedKSRequest_Order.
var (
	ListGroupedKSRequest_Order_name = map[int32]string{
		0: "BY_CREATION_TIME_DESC",
	}
	ListGroupedKSRequest_Order_value = map[string]int32{
		"BY_CREATION_TIME_DESC": 0,
	}
)

func (x ListGroupedKSRequest_Order) Enum() *ListGroupedKSRequest_Order {
	p := new(ListGroupedKSRequest_Order)
	*p = x
	return p
}

func (x ListGroupedKSRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListGroupedKSRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_w_f_workflow_proto_enumTypes[5].Descriptor()
}

func (ListGroupedKSRequest_Order) Type() protoreflect.EnumType {
	return &file_plumber_w_f_workflow_proto_enumTypes[5]
}

func (x ListGroupedKSRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListGroupedKSRequest_Order.Descriptor instead.
func (ListGroupedKSRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{6, 0}
}

type ListGroupedKSRequest_Direction int32

const (
	ListGroupedKSRequest_NEXT     ListGroupedKSRequest_Direction = 0
	ListGroupedKSRequest_PREVIOUS ListGroupedKSRequest_Direction = 1
)

// Enum value maps for ListGroupedKSRequest_Direction.
var (
	ListGroupedKSRequest_Direction_name = map[int32]string{
		0: "NEXT",
		1: "PREVIOUS",
	}
	ListGroupedKSRequest_Direction_value = map[string]int32{
		"NEXT":     0,
		"PREVIOUS": 1,
	}
)

func (x ListGroupedKSRequest_Direction) Enum() *ListGroupedKSRequest_Direction {
	p := new(ListGroupedKSRequest_Direction)
	*p = x
	return p
}

func (x ListGroupedKSRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListGroupedKSRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_w_f_workflow_proto_enumTypes[6].Descriptor()
}

func (ListGroupedKSRequest_Direction) Type() protoreflect.EnumType {
	return &file_plumber_w_f_workflow_proto_enumTypes[6]
}

func (x ListGroupedKSRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListGroupedKSRequest_Direction.Descriptor instead.
func (ListGroupedKSRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{6, 1}
}

type ListGroupedRequest_SourceType int32

const (
	ListGroupedRequest_BRANCH       ListGroupedRequest_SourceType = 0
	ListGroupedRequest_TAG          ListGroupedRequest_SourceType = 1
	ListGroupedRequest_PULL_REQUEST ListGroupedRequest_SourceType = 2
)

// Enum value maps for ListGroupedRequest_SourceType.
var (
	ListGroupedRequest_SourceType_name = map[int32]string{
		0: "BRANCH",
		1: "TAG",
		2: "PULL_REQUEST",
	}
	ListGroupedRequest_SourceType_value = map[string]int32{
		"BRANCH":       0,
		"TAG":          1,
		"PULL_REQUEST": 2,
	}
)

func (x ListGroupedRequest_SourceType) Enum() *ListGroupedRequest_SourceType {
	p := new(ListGroupedRequest_SourceType)
	*p = x
	return p
}

func (x ListGroupedRequest_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListGroupedRequest_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_w_f_workflow_proto_enumTypes[7].Descriptor()
}

func (ListGroupedRequest_SourceType) Type() protoreflect.EnumType {
	return &file_plumber_w_f_workflow_proto_enumTypes[7]
}

func (x ListGroupedRequest_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListGroupedRequest_SourceType.Descriptor instead.
func (ListGroupedRequest_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{8, 0}
}

type ListKeysetRequest_Order int32

const (
	ListKeysetRequest_BY_CREATION_TIME_DESC ListKeysetRequest_Order = 0
)

// Enum value maps for ListKeysetRequest_Order.
var (
	ListKeysetRequest_Order_name = map[int32]string{
		0: "BY_CREATION_TIME_DESC",
	}
	ListKeysetRequest_Order_value = map[string]int32{
		"BY_CREATION_TIME_DESC": 0,
	}
)

func (x ListKeysetRequest_Order) Enum() *ListKeysetRequest_Order {
	p := new(ListKeysetRequest_Order)
	*p = x
	return p
}

func (x ListKeysetRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListKeysetRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_w_f_workflow_proto_enumTypes[8].Descriptor()
}

func (ListKeysetRequest_Order) Type() protoreflect.EnumType {
	return &file_plumber_w_f_workflow_proto_enumTypes[8]
}

func (x ListKeysetRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListKeysetRequest_Order.Descriptor instead.
func (ListKeysetRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{12, 0}
}

type ListKeysetRequest_Direction int32

const (
	ListKeysetRequest_NEXT     ListKeysetRequest_Direction = 0
	ListKeysetRequest_PREVIOUS ListKeysetRequest_Direction = 1
)

// Enum value maps for ListKeysetRequest_Direction.
var (
	ListKeysetRequest_Direction_name = map[int32]string{
		0: "NEXT",
		1: "PREVIOUS",
	}
	ListKeysetRequest_Direction_value = map[string]int32{
		"NEXT":     0,
		"PREVIOUS": 1,
	}
)

func (x ListKeysetRequest_Direction) Enum() *ListKeysetRequest_Direction {
	p := new(ListKeysetRequest_Direction)
	*p = x
	return p
}

func (x ListKeysetRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListKeysetRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_plumber_w_f_workflow_proto_enumTypes[9].Descriptor()
}

func (ListKeysetRequest_Direction) Type() protoreflect.EnumType {
	return &file_plumber_w_f_workflow_proto_enumTypes[9]
}

func (x ListKeysetRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListKeysetRequest_Direction.Descriptor instead.
func (ListKeysetRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{12, 1}
}

// Schedule call request
//
// This operation depricates Pipeline.schedule()
//
// Arguments:
//   - service           = [required] Repo host provider (GitHub etc.)
//   - repo              = [required] Data about repository
//   - project_id        = [required] Id of project on Semaphore
//   - branch_id         = [required] UUID of project's branch on Semaphore
//   - hook_id           = [required] Originally generated by repo-host.
//     Ties the schedule-request to repo post-commit hook.
//     Plumber has to pass it on, otherwise not used.
//   - request_token     = [required] unique string, see Idempotency
//   - snapshot_id       = [required if service == SANPSHOT] Snapshot id
//   - definition_file   = [optional] Full path to file containing pipeline definition.
//   - requester_id      = [optional] The user who initiated workflow
//   - organization_id   = [required] The organization for which to schedule workflow.
//   - label             = [required] Branch name, PR number, tag value or other value
//     used for listing/grouping of similar workflows
//   - triggered_by      = [required] Event that triggered workflow (hook, schedule, API call..)
//   - scheduler_task_id = [optional] Task ID passed by periodic scheduler
//
// Preconditions:
// - service and repo fields have valid values
// - hook_id value is previously generated by repo-host or hooks_processor
// - request_token has to be unique for every workflow, see Idempotency
//
// Postconditions:
// - ResponseCode
//   - OK =>
//   - Workflow with request_token is created or was previously created.
//   - If workflow is created => pipeline with the same request_token is also scheduled.
//   - wf_id is returned either way.
//   - otherwise =>
//   - Pipeline with request_token is NOT scheduled. Error is returned.
//
// Idempotency:
//   - When schedule request is received, request_token is checked first.
//     If workflow with the same request_token is already created:
//   - OK and previously generated wf_id are returned,
//     without creating new workflow.
//   - Other parameters are not checked; they are assumed to be the same.
type ScheduleRequest struct {
	state           protoimpl.MessageState      `protogen:"open.v1"`
	Service         ScheduleRequest_ServiceType `protobuf:"varint,2,opt,name=service,proto3,enum=InternalApi.PlumberWF.ScheduleRequest_ServiceType" json:"service,omitempty"`
	Repo            *ScheduleRequest_Repo       `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	ProjectId       string                      `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BranchId        string                      `protobuf:"bytes,7,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	HookId          string                      `protobuf:"bytes,8,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	RequestToken    string                      `protobuf:"bytes,9,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
	SnapshotId      string                      `protobuf:"bytes,10,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	DefinitionFile  string                      `protobuf:"bytes,11,opt,name=definition_file,json=definitionFile,proto3" json:"definition_file,omitempty"`
	RequesterId     string                      `protobuf:"bytes,12,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	OrganizationId  string                      `protobuf:"bytes,13,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Label           string                      `protobuf:"bytes,14,opt,name=label,proto3" json:"label,omitempty"`
	TriggeredBy     TriggeredBy                 `protobuf:"varint,15,opt,name=triggered_by,json=triggeredBy,proto3,enum=InternalApi.PlumberWF.TriggeredBy" json:"triggered_by,omitempty"`
	SchedulerTaskId string                      `protobuf:"bytes,16,opt,name=scheduler_task_id,json=schedulerTaskId,proto3" json:"scheduler_task_id,omitempty"`
	EnvVars         []*ScheduleRequest_EnvVar   `protobuf:"bytes,17,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ScheduleRequest) Reset() {
	*x = ScheduleRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest) ProtoMessage() {}

func (x *ScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest.ProtoReflect.Descriptor instead.
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleRequest) GetService() ScheduleRequest_ServiceType {
	if x != nil {
		return x.Service
	}
	return ScheduleRequest_GIT_HUB
}

func (x *ScheduleRequest) GetRepo() *ScheduleRequest_Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *ScheduleRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ScheduleRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *ScheduleRequest) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *ScheduleRequest) GetRequestToken() string {
	if x != nil {
		return x.RequestToken
	}
	return ""
}

func (x *ScheduleRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *ScheduleRequest) GetDefinitionFile() string {
	if x != nil {
		return x.DefinitionFile
	}
	return ""
}

func (x *ScheduleRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *ScheduleRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ScheduleRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ScheduleRequest) GetTriggeredBy() TriggeredBy {
	if x != nil {
		return x.TriggeredBy
	}
	return TriggeredBy_HOOK
}

func (x *ScheduleRequest) GetSchedulerTaskId() string {
	if x != nil {
		return x.SchedulerTaskId
	}
	return ""
}

func (x *ScheduleRequest) GetEnvVars() []*ScheduleRequest_EnvVar {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

// Schedule call response
//
// Response:
//   - status  = [required] contains google.rpc.Code:
//     OK               = Workflow exists and is available for Describe call.
//     INVALID_ARGUMENT = Workflow request is rejected because of
//     malformed request.
//   - wf_id   = [required if OK] workflow id
//   - ppl_id  = [required if OK] id of initial pipeline in workflow
type ScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WfId          string                 `protobuf:"bytes,2,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	Status        *status.Status         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	PplId         string                 `protobuf:"bytes,4,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{1}
}

func (x *ScheduleResponse) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *ScheduleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ScheduleResponse) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

// GetPath call request
//
// Synchronous operation.
// Returns the path = list of sequential pipeliens.
//
//   - If only wf_id is provided =>
//     Returns path containing newest (chronologically latest) pipeline as
//     the last element and coresponding first pipeline as first element of the path.
//   - If first_ppl_id is provided =>
//     Returns path with first_ppl_id as first pipeline in the path and
//     the newest pipeline in first_ppl_id subtree as last pipeline the path.
//   - If last_ppl_id is provided =>
//     Returns path containing last_ppl_id pipeline as the last element and
//     coresponding first pipeline as first element of the path.
//   - If both first_ppl_id and last_ppl_id are provided =>
//     Returns path connecting first_ppl_id and last_ppl_id pipelines as the first
//     and the last elements in the path.
//
// Arguments:
// - wf_id        = [optional] Workflow id. Needed only of other two are not specified.
// - first_ppl_id = [optional] First pipeline in returned sequence.
// - last_ppl_id  = [optional] Last pipeline in returned sequence.
//
// Preconditions:
//   - If wf_id is  provided => Workflow with first_ppl_id wf_id exists.
//   - If first_ppl_id is  provided => Pipeline with first_ppl_id exists.
//   - If last_ppl_id is provided => Pipeline with last_ppl_id exists.
//   - If more than one argument is provided => they all belong to the same workflow.
//   - If both first_ppl_id and last_ppl_id are provided => last_ppl_id pipeline
//     must belong to the first_ppl_id subtree.
//
// Note:
// 'first_ppl_id subtree' is subtree containing first_ppl_id pipeline as its root.
//
// Postconditions:
//
// Idempotency:
type GetPathRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WfId          string                 `protobuf:"bytes,1,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	FirstPplId    string                 `protobuf:"bytes,2,opt,name=first_ppl_id,json=firstPplId,proto3" json:"first_ppl_id,omitempty"`
	LastPplId     string                 `protobuf:"bytes,3,opt,name=last_ppl_id,json=lastPplId,proto3" json:"last_ppl_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPathRequest) Reset() {
	*x = GetPathRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPathRequest) ProtoMessage() {}

func (x *GetPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPathRequest.ProtoReflect.Descriptor instead.
func (*GetPathRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{2}
}

func (x *GetPathRequest) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *GetPathRequest) GetFirstPplId() string {
	if x != nil {
		return x.FirstPplId
	}
	return ""
}

func (x *GetPathRequest) GetLastPplId() string {
	if x != nil {
		return x.LastPplId
	}
	return ""
}

// GetPath call response
//
// Response:
//   - status         = [required] contains google.rpc.Code:
//     OK                  = Response contains valid data in other fields.
//     FAILED_PRECONDITION = see Preconditions section in request.
//   - wf_id          = [required] Workflow id to which pipeline from the request belongs to.
//   - wf_created_at  = [required] Workflow creation time.
//   - path           = [required, list] Selected pipelines belonging to the workflow,
//     with their switches and partial-rebuild-peers.
type GetPathResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	WfId          string                         `protobuf:"bytes,2,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	WfCreatedAt   *timestamp.Timestamp           `protobuf:"bytes,3,opt,name=wf_created_at,json=wfCreatedAt,proto3" json:"wf_created_at,omitempty"`
	Path          []*GetPathResponse_PathElement `protobuf:"bytes,4,rep,name=path,proto3" json:"path,omitempty"`
	Status        *status.Status                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPathResponse) Reset() {
	*x = GetPathResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPathResponse) ProtoMessage() {}

func (x *GetPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPathResponse.ProtoReflect.Descriptor instead.
func (*GetPathResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{3}
}

func (x *GetPathResponse) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *GetPathResponse) GetWfCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.WfCreatedAt
	}
	return nil
}

func (x *GetPathResponse) GetPath() []*GetPathResponse_PathElement {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GetPathResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// ListLatestWorkflows call request
//
// Synchronous operation.
// Returns paginated details of one latest workflow per each branch/tag/pull request
//
// Arguments:
//   - order         = [required] Sorting order direction
//   - page_size     = [optional, default = 30] Number of workflows per page in response.
//   - page_token    = [required] Starting point for listing, tokens for next and previous
//     page are returned in response. If you are fetching first
//     page leave it empty and set direction to NEXT
//   - direction     = [required] Listing direction. Use NEXT with value of 'next_page_token'
//     from ListLatestWorkflows response as 'page_token' to fetch next page
//     of results, or use PREVIOUS with value of 'previous_page_token'
//     as 'page_token' to fetch the previous page.
//   - project_id    = [required] ID of project which workflows should be returned.
//   - requester_id  = [optional] The ID of user who triggered workflow.
//   - git_ref_types = [optional] Takes all distinct git refs for chosen git ref types
//     and returns one latest workflow for each of them
//
// Preconditions:
//
// Postconditions:
//   - gRPC status: OK                => Response contains valid data in other fields.
//   - gRPC status: INVALID_ARGUMENT  => Workflow list request is rejected because of
//     malformed request. The error message contains
//     a description
//   - gRPC status: RESOURCE_EXHAUSTED => Too many requests, server is overloaded, try later.
//
// Idempotency:
type ListLatestWorkflowsRequest struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Order         ListLatestWorkflowsRequest_Order     `protobuf:"varint,1,opt,name=order,proto3,enum=InternalApi.PlumberWF.ListLatestWorkflowsRequest_Order" json:"order,omitempty"`
	PageSize      int32                                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                               `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Direction     ListLatestWorkflowsRequest_Direction `protobuf:"varint,4,opt,name=direction,proto3,enum=InternalApi.PlumberWF.ListLatestWorkflowsRequest_Direction" json:"direction,omitempty"`
	ProjectId     string                               `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RequesterId   string                               `protobuf:"bytes,6,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	GitRefTypes   []GitRefType                         `protobuf:"varint,7,rep,packed,name=git_ref_types,json=gitRefTypes,proto3,enum=InternalApi.PlumberWF.GitRefType" json:"git_ref_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLatestWorkflowsRequest) Reset() {
	*x = ListLatestWorkflowsRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLatestWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLatestWorkflowsRequest) ProtoMessage() {}

func (x *ListLatestWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLatestWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*ListLatestWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{4}
}

func (x *ListLatestWorkflowsRequest) GetOrder() ListLatestWorkflowsRequest_Order {
	if x != nil {
		return x.Order
	}
	return ListLatestWorkflowsRequest_BY_CREATION_TIME_DESC
}

func (x *ListLatestWorkflowsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLatestWorkflowsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListLatestWorkflowsRequest) GetDirection() ListLatestWorkflowsRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return ListLatestWorkflowsRequest_NEXT
}

func (x *ListLatestWorkflowsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListLatestWorkflowsRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *ListLatestWorkflowsRequest) GetGitRefTypes() []GitRefType {
	if x != nil {
		return x.GitRefTypes
	}
	return nil
}

// ListLatestWorkflows call response
//
// Response:
//   - workflows           = [required] Workflows which match search params in request
//   - next_page_token     = [required] Token which should be passed in request
//     to fetch the next page of workflows
//   - previous_page_token = [required] Token which should be passed in request
//     to fetch the previous page of workflows
type ListLatestWorkflowsResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Workflows         []*WorkflowDetails     `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	NextPageToken     string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PreviousPageToken string                 `protobuf:"bytes,3,opt,name=previous_page_token,json=previousPageToken,proto3" json:"previous_page_token,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListLatestWorkflowsResponse) Reset() {
	*x = ListLatestWorkflowsResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLatestWorkflowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLatestWorkflowsResponse) ProtoMessage() {}

func (x *ListLatestWorkflowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLatestWorkflowsResponse.ProtoReflect.Descriptor instead.
func (*ListLatestWorkflowsResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{5}
}

func (x *ListLatestWorkflowsResponse) GetWorkflows() []*WorkflowDetails {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *ListLatestWorkflowsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListLatestWorkflowsResponse) GetPreviousPageToken() string {
	if x != nil {
		return x.PreviousPageToken
	}
	return ""
}

// ListGroupedKS call request
//
// Synchronous operation.
// Returns paginated details of one latest workflow for each branch/tag/pull request
//
// Arguments:
//   - order         = [required] Sorting order direction
//   - page_size     = [optional, default = 30] Number of workflows per page in response.
//   - page_token    = [required] Starting point for listing, tokens for next and previous
//     page are returned in response. If you are fetching first
//     page leave it empty and set direction to NEXT
//   - direction     = [required] Listing direction. Use NEXT with value of 'next_page_token'
//     from ListGroupedKS response as 'page_token' to fetch next page
//     of results, or use PREVIOUS with value of 'previous_page_token'
//     as 'page_token' to fetch the previous page.
//   - project_id    = [required] ID of project which workflows should be returned.
//   - requester_id  = [optional] The ID of user who triggered workflow.
//   - git_ref_types = [optional] Takes all distinct git refs for chosen git ref types
//     and returns one latest workflow for each of them
//
// Preconditions:
//
// Postconditions:
//   - gRPC status: OK                => Response contains valid data in other fields.
//   - gRPC status: INVALID_ARGUMENT  => Workflow list request is rejected because of
//     malformed request. The error message contains
//     a description
//   - gRPC status: RESOURCE_EXHAUSTED => Too many requests, server is overloaded, try later.
//
// Idempotency:
type ListGroupedKSRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Order         ListGroupedKSRequest_Order     `protobuf:"varint,1,opt,name=order,proto3,enum=InternalApi.PlumberWF.ListGroupedKSRequest_Order" json:"order,omitempty"`
	PageSize      int32                          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                         `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Direction     ListGroupedKSRequest_Direction `protobuf:"varint,4,opt,name=direction,proto3,enum=InternalApi.PlumberWF.ListGroupedKSRequest_Direction" json:"direction,omitempty"`
	ProjectId     string                         `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RequesterId   string                         `protobuf:"bytes,6,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	GitRefTypes   []GitRefType                   `protobuf:"varint,7,rep,packed,name=git_ref_types,json=gitRefTypes,proto3,enum=InternalApi.PlumberWF.GitRefType" json:"git_ref_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupedKSRequest) Reset() {
	*x = ListGroupedKSRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupedKSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupedKSRequest) ProtoMessage() {}

func (x *ListGroupedKSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupedKSRequest.ProtoReflect.Descriptor instead.
func (*ListGroupedKSRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{6}
}

func (x *ListGroupedKSRequest) GetOrder() ListGroupedKSRequest_Order {
	if x != nil {
		return x.Order
	}
	return ListGroupedKSRequest_BY_CREATION_TIME_DESC
}

func (x *ListGroupedKSRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGroupedKSRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListGroupedKSRequest) GetDirection() ListGroupedKSRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return ListGroupedKSRequest_NEXT
}

func (x *ListGroupedKSRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListGroupedKSRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *ListGroupedKSRequest) GetGitRefTypes() []GitRefType {
	if x != nil {
		return x.GitRefTypes
	}
	return nil
}

// ListGroupedKS call response
//
// Response:
//   - workflows           = [required] Workflows which match search params in request
//   - next_page_token     = [required] Token which should be passed in request
//     to fetch the next page of workflows
//   - previous_page_token = [required] Token which should be passed in request
//     to fetch the previous page of workflows
type ListGroupedKSResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Workflows         []*WorkflowDetails     `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	NextPageToken     string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PreviousPageToken string                 `protobuf:"bytes,3,opt,name=previous_page_token,json=previousPageToken,proto3" json:"previous_page_token,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListGroupedKSResponse) Reset() {
	*x = ListGroupedKSResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupedKSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupedKSResponse) ProtoMessage() {}

func (x *ListGroupedKSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupedKSResponse.ProtoReflect.Descriptor instead.
func (*ListGroupedKSResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{7}
}

func (x *ListGroupedKSResponse) GetWorkflows() []*WorkflowDetails {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *ListGroupedKSResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListGroupedKSResponse) GetPreviousPageToken() string {
	if x != nil {
		return x.PreviousPageToken
	}
	return ""
}

// ListGrouped call request
//
// Synchronous operation.
// Returns paginated details of one latest workflow for each branch/tag/pull request
//
// Arguments:
// - page            = [optional, default =  1] Serial number of wanted page with List call result.
// - page_size       = [optional, default = 30] Number of workflows per page of List call result.
// - project_id      = [required] ID of project which workflows should be returned.
//
//	# DEPRECATED - instead use:  git_ref_types list with one element
//
// - grouped_by      = [optional] Group workflows by their source type
//
//   - git_ref_types   = [optional] Takes all distinct git refs for chosen git ref types
//     and returns one latest workflow for each of them
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type ListGroupedRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Page          int32                         `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                         `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ProjectId     string                        `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GroupedBy     ListGroupedRequest_SourceType `protobuf:"varint,4,opt,name=grouped_by,json=groupedBy,proto3,enum=InternalApi.PlumberWF.ListGroupedRequest_SourceType" json:"grouped_by,omitempty"` // DEPRECATED
	GitRefTypes   []GitRefType                  `protobuf:"varint,5,rep,packed,name=git_ref_types,json=gitRefTypes,proto3,enum=InternalApi.PlumberWF.GitRefType" json:"git_ref_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupedRequest) Reset() {
	*x = ListGroupedRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupedRequest) ProtoMessage() {}

func (x *ListGroupedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupedRequest.ProtoReflect.Descriptor instead.
func (*ListGroupedRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{8}
}

func (x *ListGroupedRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListGroupedRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGroupedRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListGroupedRequest) GetGroupedBy() ListGroupedRequest_SourceType {
	if x != nil {
		return x.GroupedBy
	}
	return ListGroupedRequest_BRANCH
}

func (x *ListGroupedRequest) GetGitRefTypes() []GitRefType {
	if x != nil {
		return x.GitRefTypes
	}
	return nil
}

// ListGrouped call response
//
// Response:
//   - workflows        = [required] Workflows which match search params in ListGroupedRequest
//   - status           = [required] contains google.rpc.Code:
//     OK = Response contains valid data in other fields.
//     INVALID_ARGUMENT = Workflow list request is rejected because of
//     malformed request.
//   - page_number      = [required] Serial number of returned page with workflow search results
//   - page_size        = [required] Number of workflows per page
//   - total_entries    = [required] Total number of workflows for given project and branch
//   - total_pages      = [required] Total number of pages with workflow search results
type ListGroupedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Workflows     []*WorkflowDetails     `protobuf:"bytes,2,rep,name=workflows,proto3" json:"workflows,omitempty"`
	PageNumber    int32                  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalEntries  int32                  `protobuf:"varint,5,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	TotalPages    int32                  `protobuf:"varint,6,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupedResponse) Reset() {
	*x = ListGroupedResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupedResponse) ProtoMessage() {}

func (x *ListGroupedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupedResponse.ProtoReflect.Descriptor instead.
func (*ListGroupedResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{9}
}

func (x *ListGroupedResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListGroupedResponse) GetWorkflows() []*WorkflowDetails {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *ListGroupedResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListGroupedResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGroupedResponse) GetTotalEntries() int32 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *ListGroupedResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// List call request  - DEPRECATED
//
// Synchronous operation.
// Returns paginated details of all workflows which mach given search parameters
//
// Arguments:
// - page            = [optional, default =  1] Serial number of wanted page with List call result.
// - page_size       = [optional, default = 30] Number of workflows per page of List call result.
// - project_id      = [required, optional if organization_id is given] ID of project which workflows should be returned.
//
//	# DEPRECATED - instead use: label + git_ref_types = [BRANCH]
//
// - branch_name     = [optional] Name of branch which workflows should be returned.
//
//   - requester_id    = [optional] The ID of user who triggered workflow.
//   - organization_id = [required, optional if project_id is given] The ID of an organization which workflow belongs to.
//   - project_ids     = [optional if organization_id or project_id are given, otherwise required] The IDs of projects for which to list workflows.
//   - created_before  = [optional] Return only workflows created before this timestamp
//   - created_after   = [optional] Return only workflows created after this timestamp
//   - label           = [optional] Return only workflows with given label
//     (label is branch/tag name, PR number, snapshot generated label etc.)
//   - git_ref_types   = [optional] Return only workflows which originated from one of given git refs
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type ListRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Page           int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ProjectId      string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BranchName     string                 `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"` // DEPRECATED
	RequesterId    string                 `protobuf:"bytes,5,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	OrganizationId string                 `protobuf:"bytes,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectIds     []string               `protobuf:"bytes,7,rep,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
	CreatedBefore  *timestamp.Timestamp   `protobuf:"bytes,8,opt,name=created_before,json=createdBefore,proto3" json:"created_before,omitempty"`
	CreatedAfter   *timestamp.Timestamp   `protobuf:"bytes,9,opt,name=created_after,json=createdAfter,proto3" json:"created_after,omitempty"`
	Label          string                 `protobuf:"bytes,10,opt,name=label,proto3" json:"label,omitempty"`
	GitRefTypes    []GitRefType           `protobuf:"varint,11,rep,packed,name=git_ref_types,json=gitRefTypes,proto3,enum=InternalApi.PlumberWF.GitRefType" json:"git_ref_types,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{10}
}

func (x *ListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ListRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *ListRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListRequest) GetProjectIds() []string {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

func (x *ListRequest) GetCreatedBefore() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedBefore
	}
	return nil
}

func (x *ListRequest) GetCreatedAfter() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAfter
	}
	return nil
}

func (x *ListRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ListRequest) GetGitRefTypes() []GitRefType {
	if x != nil {
		return x.GitRefTypes
	}
	return nil
}

// List call response
//
// Response:
//   - workflows        = [required] Workflows which match search params in ListRequest
//   - status           = [required] contains google.rpc.Code:
//     OK = Response contains valid data in other fields.
//     INVALID_ARGUMENT = Workflow list request is rejected because of
//     malformed request.
//   - page_number      = [required] Serial number of returned page with workflow search results
//   - page_size        = [required] Number of workflows per page
//   - total_entries    = [required] Total number of workflows for given project and branch
//   - total_pages      = [required] Total number of pages with workflow search results
type ListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Workflows     []*WorkflowDetails     `protobuf:"bytes,2,rep,name=workflows,proto3" json:"workflows,omitempty"`
	PageNumber    int32                  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalEntries  int32                  `protobuf:"varint,5,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	TotalPages    int32                  `protobuf:"varint,6,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{11}
}

func (x *ListResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListResponse) GetWorkflows() []*WorkflowDetails {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *ListResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListResponse) GetTotalEntries() int32 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *ListResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// ListKeyset call request
//
// Synchronous operation.
// Returns paginated details of all workflows which mach given search parameters
//
// Arguments:
//
//   - page_size       = [optional, default = 30] Number of workflows per page of List call result.
//   - page_token      = [required] Starting point for listing, tokens for next and previous
//     page are returned in response. If you are fetching first
//     page leave it empty and set direction to NEXT
//   - order           = [required] Sorting order direction
//   - organization_id = [required, optional if project_id is given] The ID of an organization which workflow belongs to.
//   - project_id      = [required, optional if organization_id is given] ID of project which workflows should be returned.
//   - requester_id    = [optional] The ID of user who triggered workflow.
//   - project_ids     = [optional if organization_id or project_id are given, otherwise required]
//     The IDs of projects for which to list workflows.
//   - created_before  = [optional] Return only workflows created before this timestamp
//   - created_after   = [optional] Return only workflows created after this timestamp
//   - label           = [optional] Return only workflows with given label
//     (label is branch/tag name, PR number, snapshot generated label etc.)
//   - git_ref_types   = [optional] Return only workflows which originated from one of given git refs
//   - direction       = [required] Listing direction. Use NEXT with value of 'next_page_token'
//     from ListKeyset response as 'page_token' to fetch next page
//     of results, or use PREVIOUS with value of 'previous_page_token'
//     as 'page_token' to fetch the previous page.
//   - triggerers      = [optional] Return only workflows with `triggered_by` value that is included in this list.
//     If empty list is given all workflows will be returned for backwards compatibility.
//   - branch_name     = [optional] Return only workflows for single branch_name.
//   - requester_ids   = [optional] The IDs of users who triggered workflow.
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type ListKeysetRequest struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	PageSize       int32                       `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken      string                      `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Order          ListKeysetRequest_Order     `protobuf:"varint,3,opt,name=order,proto3,enum=InternalApi.PlumberWF.ListKeysetRequest_Order" json:"order,omitempty"`
	OrganizationId string                      `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      string                      `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RequesterId    string                      `protobuf:"bytes,6,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	ProjectIds     []string                    `protobuf:"bytes,7,rep,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
	CreatedBefore  *timestamp.Timestamp        `protobuf:"bytes,8,opt,name=created_before,json=createdBefore,proto3" json:"created_before,omitempty"`
	CreatedAfter   *timestamp.Timestamp        `protobuf:"bytes,9,opt,name=created_after,json=createdAfter,proto3" json:"created_after,omitempty"`
	Label          string                      `protobuf:"bytes,10,opt,name=label,proto3" json:"label,omitempty"`
	GitRefTypes    []GitRefType                `protobuf:"varint,11,rep,packed,name=git_ref_types,json=gitRefTypes,proto3,enum=InternalApi.PlumberWF.GitRefType" json:"git_ref_types,omitempty"`
	Direction      ListKeysetRequest_Direction `protobuf:"varint,12,opt,name=direction,proto3,enum=InternalApi.PlumberWF.ListKeysetRequest_Direction" json:"direction,omitempty"`
	Triggerers     []TriggeredBy               `protobuf:"varint,13,rep,packed,name=triggerers,proto3,enum=InternalApi.PlumberWF.TriggeredBy" json:"triggerers,omitempty"`
	BranchName     string                      `protobuf:"bytes,14,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	RequesterIds   []string                    `protobuf:"bytes,15,rep,name=requester_ids,json=requesterIds,proto3" json:"requester_ids,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListKeysetRequest) Reset() {
	*x = ListKeysetRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKeysetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysetRequest) ProtoMessage() {}

func (x *ListKeysetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysetRequest.ProtoReflect.Descriptor instead.
func (*ListKeysetRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{12}
}

func (x *ListKeysetRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKeysetRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListKeysetRequest) GetOrder() ListKeysetRequest_Order {
	if x != nil {
		return x.Order
	}
	return ListKeysetRequest_BY_CREATION_TIME_DESC
}

func (x *ListKeysetRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListKeysetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListKeysetRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *ListKeysetRequest) GetProjectIds() []string {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

func (x *ListKeysetRequest) GetCreatedBefore() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedBefore
	}
	return nil
}

func (x *ListKeysetRequest) GetCreatedAfter() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAfter
	}
	return nil
}

func (x *ListKeysetRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ListKeysetRequest) GetGitRefTypes() []GitRefType {
	if x != nil {
		return x.GitRefTypes
	}
	return nil
}

func (x *ListKeysetRequest) GetDirection() ListKeysetRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return ListKeysetRequest_NEXT
}

func (x *ListKeysetRequest) GetTriggerers() []TriggeredBy {
	if x != nil {
		return x.Triggerers
	}
	return nil
}

func (x *ListKeysetRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ListKeysetRequest) GetRequesterIds() []string {
	if x != nil {
		return x.RequesterIds
	}
	return nil
}

// ListKeyset call response
//
// Response:
//   - workflows           = [required] Workflows which match search params in ListRequest
//   - status              = [required] contains google.rpc.Code:
//     OK = Response contains valid data in other fields.
//     INVALID_ARGUMENT = Workflow list request is rejected because
//     of malformed request.
//   - next_page_token     = [required] Token which should be passed in ListKeysetRequest
//     to fetch the next page of workflows
//   - previous_page_token = [required] Token which should be passed in ListKeysetRequest
//     to fetch the previous page of workflows
type ListKeysetResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Status            *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Workflows         []*WorkflowDetails     `protobuf:"bytes,2,rep,name=workflows,proto3" json:"workflows,omitempty"`
	NextPageToken     string                 `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PreviousPageToken string                 `protobuf:"bytes,4,opt,name=previous_page_token,json=previousPageToken,proto3" json:"previous_page_token,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListKeysetResponse) Reset() {
	*x = ListKeysetResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKeysetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysetResponse) ProtoMessage() {}

func (x *ListKeysetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysetResponse.ProtoReflect.Descriptor instead.
func (*ListKeysetResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{13}
}

func (x *ListKeysetResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListKeysetResponse) GetWorkflows() []*WorkflowDetails {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *ListKeysetResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListKeysetResponse) GetPreviousPageToken() string {
	if x != nil {
		return x.PreviousPageToken
	}
	return ""
}

// Workflow entity details
//
//   - wf_id          = [required] Unique Workflow identifier
//   - initial_ppl_id = [required] Unique identifier of intitial pipeline in workflow
//   - project_id     = [required] Id of project to which given workflow belongs
//   - hook_id        = [required] Received in schedule request
//   - requester_id   = [required] The user who initiated workflow
//   - branch_id      = [required] Received in schedule request
//   - branch_name    = [required] Name of git branch for which workflow was scheduled
//   - commit_sha     = [required] Git commit sha for which workflow was scheduled
//   - created_at     = [required] Timestamp when workflow schedule request was recorded
//   - triggered_by   = [required] Event that triggered workflow (hook, schedule, API call..)
//   - rerun_of       = [optional] Id of the workflow from which this workflow was rerun.
//     It is empty ("") if  if the workflow is the original (first) run.
//
// -repository_id   = [optional] The ID of the repository from which workflow was initialized
//
//	Only available if related hook was processed by hooks-receiver/processor
//
// -organization_id = [required] Id of the organization to which given workflow belongs.
type WorkflowDetails struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WfId           string                 `protobuf:"bytes,1,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	InitialPplId   string                 `protobuf:"bytes,2,opt,name=initial_ppl_id,json=initialPplId,proto3" json:"initial_ppl_id,omitempty"`
	ProjectId      string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	HookId         string                 `protobuf:"bytes,4,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	RequesterId    string                 `protobuf:"bytes,5,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	BranchId       string                 `protobuf:"bytes,6,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	BranchName     string                 `protobuf:"bytes,7,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CommitSha      string                 `protobuf:"bytes,8,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	CreatedAt      *timestamp.Timestamp   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	TriggeredBy    TriggeredBy            `protobuf:"varint,10,opt,name=triggered_by,json=triggeredBy,proto3,enum=InternalApi.PlumberWF.TriggeredBy" json:"triggered_by,omitempty"`
	RerunOf        string                 `protobuf:"bytes,11,opt,name=rerun_of,json=rerunOf,proto3" json:"rerun_of,omitempty"`
	RepositoryId   string                 `protobuf:"bytes,12,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	OrganizationId string                 `protobuf:"bytes,13,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkflowDetails) Reset() {
	*x = WorkflowDetails{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowDetails) ProtoMessage() {}

func (x *WorkflowDetails) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowDetails.ProtoReflect.Descriptor instead.
func (*WorkflowDetails) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{14}
}

func (x *WorkflowDetails) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *WorkflowDetails) GetInitialPplId() string {
	if x != nil {
		return x.InitialPplId
	}
	return ""
}

func (x *WorkflowDetails) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *WorkflowDetails) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *WorkflowDetails) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *WorkflowDetails) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *WorkflowDetails) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *WorkflowDetails) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *WorkflowDetails) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkflowDetails) GetTriggeredBy() TriggeredBy {
	if x != nil {
		return x.TriggeredBy
	}
	return TriggeredBy_HOOK
}

func (x *WorkflowDetails) GetRerunOf() string {
	if x != nil {
		return x.RerunOf
	}
	return ""
}

func (x *WorkflowDetails) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *WorkflowDetails) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

// Describe call request
//
// Synchronous operation.
// Returns details of workflow with given wf_id.
//
// Arguments:
// - wf_id   = [required] Workflow to describe.
//
// Preconditions:
// - Workflow with wf_id was previously scheduled.
//
// Postconditions:
//
// Idempotency:
type DescribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WfId          string                 `protobuf:"bytes,1,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{15}
}

func (x *DescribeRequest) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

// Describe call response
//
// Response:
//   - workflow         = [required] Workflow's description.
//   - response_status  = [required] contains ResponseCode:
//     OK                  = Response contains valid data in other fields
//     FAILED_PRECONDITION = Workflow with given wf_id was not found.
type DescribeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Workflow      *WorkflowDetails       `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeResponse) Reset() {
	*x = DescribeResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResponse) ProtoMessage() {}

func (x *DescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResponse.ProtoReflect.Descriptor instead.
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{16}
}

func (x *DescribeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DescribeResponse) GetWorkflow() *WorkflowDetails {
	if x != nil {
		return x.Workflow
	}
	return nil
}

// DescribeMany call request
//
// Synchronous operation.
// Returns details of workflows with given wf_ids.
//
// Arguments:
// - wf_ids  = [required] Workflows to describe.
//
// Preconditions:
//
// Postconditions:
// - If any of the listed workflows doesn't exist, it is not returned in response.
//
// Idempotency:
type DescribeManyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WfIds         []string               `protobuf:"bytes,1,rep,name=wf_ids,json=wfIds,proto3" json:"wf_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeManyRequest) Reset() {
	*x = DescribeManyRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeManyRequest) ProtoMessage() {}

func (x *DescribeManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeManyRequest.ProtoReflect.Descriptor instead.
func (*DescribeManyRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{17}
}

func (x *DescribeManyRequest) GetWfIds() []string {
	if x != nil {
		return x.WfIds
	}
	return nil
}

// DescribeMany call response
//
// Response:
//   - workflows        = [required] Workflows' descriptions.
//   - response_status  = [required] contains ResponseCode:
//     OK                  = Response contains valid data in other fields
type DescribeManyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Workflows     []*WorkflowDetails     `protobuf:"bytes,2,rep,name=workflows,proto3" json:"workflows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeManyResponse) Reset() {
	*x = DescribeManyResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeManyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeManyResponse) ProtoMessage() {}

func (x *DescribeManyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeManyResponse.ProtoReflect.Descriptor instead.
func (*DescribeManyResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{18}
}

func (x *DescribeManyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DescribeManyResponse) GetWorkflows() []*WorkflowDetails {
	if x != nil {
		return x.Workflows
	}
	return nil
}

// Terminate call request
//
// When this request is received, all pipelines in state other than done
// receive 'stop' termination request
//
// Arguments:
// - wf_id  = [required] Workflow to terminate.
// - requester_id = [required] The user who requested termination.
//
// Preconditions:
// - Workflow with wf_id exists.
//
// Postconditions:
// All pipelines in state other than done received 'stop' termination request.
//
// Idempotency:
type TerminateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequesterId   string                 `protobuf:"bytes,2,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	WfId          string                 `protobuf:"bytes,3,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminateRequest) Reset() {
	*x = TerminateRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateRequest) ProtoMessage() {}

func (x *TerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateRequest.ProtoReflect.Descriptor instead.
func (*TerminateRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{19}
}

func (x *TerminateRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *TerminateRequest) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

// Terminate call response
//
// Response:
//   - status  = [required] contains google.rpc.Code:
//     OK                   = Workflow exists. Request propagated to pipelines.
//     FAILED_PRECONDITION  = Workflow with given wf_id was not found.
type TerminateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminateResponse) Reset() {
	*x = TerminateResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateResponse) ProtoMessage() {}

func (x *TerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateResponse.ProtoReflect.Descriptor instead.
func (*TerminateResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{20}
}

func (x *TerminateResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// ListLabels call request
//
// Synchronous operation.
// Returns paginated details of all labels in given project
//
// Arguments:
// - page         = [optional, default =  1] Serial number of wanted page with ListLabels call result.
// - page_size    = [optional, default = 30] Number of labels per page of ListLabels call result.
// - project_id   = [required] Id of project whose labels should be returned.
//
// Preconditions:
//
// Postconditions:
//
// Idempotency:
type ListLabelsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ProjectId     string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLabelsRequest) Reset() {
	*x = ListLabelsRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsRequest) ProtoMessage() {}

func (x *ListLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsRequest.ProtoReflect.Descriptor instead.
func (*ListLabelsRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{21}
}

func (x *ListLabelsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListLabelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLabelsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// ListLabels call response
//
// Response:
//   - status           = [required] contains google.rpc.Code:
//     OK = Response contains valid data in other fields.
//     INVALID_ARGUMENT = Request is rejected because requested
//     project_id does not exist.
//   - labels           = [required] list of labels
//   - page_number      = [required] Serial number of returned page with label search results
//   - page_size        = [required] Number of label per page
//   - total_entries    = [required] Total number of label for given project and branch
//   - total_pages      = [required] Total number of pages with label search results
type ListLabelsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Labels        []string               `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	PageNumber    int32                  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalEntries  int32                  `protobuf:"varint,5,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	TotalPages    int32                  `protobuf:"varint,6,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLabelsResponse) Reset() {
	*x = ListLabelsResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsResponse) ProtoMessage() {}

func (x *ListLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsResponse.ProtoReflect.Descriptor instead.
func (*ListLabelsResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{22}
}

func (x *ListLabelsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListLabelsResponse) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListLabelsResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListLabelsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLabelsResponse) GetTotalEntries() int32 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *ListLabelsResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// Reschedule call request
//
// Asynchronous operation.
//
// Arguments:
// - wf_id         = [required] Workflow to reschedule
// - requester_id  = [required] Id of the user who requested calld the operation
// - request_token = [required] Idempotency thing, unique string
//
// Preconditions:
// - wf_id is id of existing workflow
// - requester_id is id of existing user
//
// Postconditions:
// - New workflow is created
//
// Idempotency:
// If request with the same request_token was previously received,
// do not create new workflow, just return ids of the workflow created for the
// previous request
type RescheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WfId          string                 `protobuf:"bytes,1,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	RequesterId   string                 `protobuf:"bytes,2,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	RequestToken  string                 `protobuf:"bytes,3,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleRequest) Reset() {
	*x = RescheduleRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleRequest) ProtoMessage() {}

func (x *RescheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleRequest.ProtoReflect.Descriptor instead.
func (*RescheduleRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{23}
}

func (x *RescheduleRequest) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *RescheduleRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *RescheduleRequest) GetRequestToken() string {
	if x != nil {
		return x.RequestToken
	}
	return ""
}

// GetProjectId call request
//
// Synchronous operation.
// Returns project_id for workflow with given wf_id.
// That project_id can later be used for authorization etc.
//
// Arguments:
//   - wf_id  = [required] Workflow for which project_id is needed.
//
// Preconditions:
// - Workflow scheduling request for 'wf_id' was accepted.
//
// Postconditions:
//
// Idempotency:
type GetProjectIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WfId          string                 `protobuf:"bytes,1,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectIdRequest) Reset() {
	*x = GetProjectIdRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectIdRequest) ProtoMessage() {}

func (x *GetProjectIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectIdRequest.ProtoReflect.Descriptor instead.
func (*GetProjectIdRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{24}
}

func (x *GetProjectIdRequest) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

// GetProjectId call response
//
// Response:
//   - project_id  = [required] Id of project on Semaphore.
//   - status      = [required] contains google.rpc.Code:
//     OK = Response contains valid data in other fields.
//     INVALID_ARGUMENT = Request is rejected because workflow with
//     given wf_id does not exist
type GetProjectIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ProjectId     string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectIdResponse) Reset() {
	*x = GetProjectIdResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectIdResponse) ProtoMessage() {}

func (x *GetProjectIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectIdResponse.ProtoReflect.Descriptor instead.
func (*GetProjectIdResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{25}
}

func (x *GetProjectIdResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetProjectIdResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// Create call request
//
// Arguments:
//   - project_id       = [required] Id of project on Semaphore.
//   - label            = [required] Used to group/organize workflows.
//   - hook_id          = [required] Originally generated by listener_proxy.
//     Ties the create-request to triggering listener.
//   - request_token    = [required] unique string, see Idempotency
//   - definition_key   = [optional] Key to blob containing initial pipeline definition.
//   - requester_id     = [required] The user who created workflow.
//
// Preconditions:
// - hook_id value is previously generated by listener_proxy
// - request_token has to be unique for every workflow, see Idempotency
//
// Postconditions:
// - ResponseCode
//   - OK =>
//   - Workflow with request_token is created or was previously created.
//   - If workflow is created => pipeline with the same request_token is also scheduled.
//   - wf_id is returned either way.
//   - otherwise =>
//   - Pipeline with request_token is NOT scheduled. Error is returned.
//
// Idempotency:
//   - When schedule request is received, request_token is checked first.
//     If workflow with the same request_token is already created:
//   - OK and previously generated wf_id are returned,
//     without creating new workflow.
//   - Other parameters are not checked; they are assumed to be the same.
type CreateRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProjectId      string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Label          string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	HookId         string                 `protobuf:"bytes,3,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	RequestToken   string                 `protobuf:"bytes,4,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
	DefinitionFile string                 `protobuf:"bytes,5,opt,name=definition_file,json=definitionFile,proto3" json:"definition_file,omitempty"`
	RequesterId    string                 `protobuf:"bytes,6,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{26}
}

func (x *CreateRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CreateRequest) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *CreateRequest) GetRequestToken() string {
	if x != nil {
		return x.RequestToken
	}
	return ""
}

func (x *CreateRequest) GetDefinitionFile() string {
	if x != nil {
		return x.DefinitionFile
	}
	return ""
}

func (x *CreateRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

// Create call response
//
// Response:
//   - status  = [required] contains google.rpc.Code:
//     OK               = Workflow exists and is available for Describe call.
//     INVALID_ARGUMENT = Workflow request is rejected because of
//     malformed request.
//   - wf_id   = [required if OK] workflow id
//   - ppl_id  = [required if OK] id of initial pipeline in workflow
type CreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WfId          string                 `protobuf:"bytes,1,opt,name=wf_id,json=wfId,proto3" json:"wf_id,omitempty"`
	Status        *status.Status         `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	PplId         string                 `protobuf:"bytes,3,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{27}
}

func (x *CreateResponse) GetWfId() string {
	if x != nil {
		return x.WfId
	}
	return ""
}

func (x *CreateResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateResponse) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

type ScheduleRequest_Repo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Owner         string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	RepoName      string                 `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	BranchName    string                 `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CommitSha     string                 `protobuf:"bytes,5,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	RepositoryId  string                 `protobuf:"bytes,6,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"` // currently required only for bitbucket projects
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleRequest_Repo) Reset() {
	*x = ScheduleRequest_Repo{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleRequest_Repo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest_Repo) ProtoMessage() {}

func (x *ScheduleRequest_Repo) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest_Repo.ProtoReflect.Descriptor instead.
func (*ScheduleRequest_Repo) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ScheduleRequest_Repo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ScheduleRequest_Repo) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ScheduleRequest_Repo) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ScheduleRequest_Repo) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *ScheduleRequest_Repo) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

// Environment variables passed to scheduled pipeline
//
// - name = [required] name of the variable
// - value = [required] value of the variable
type ScheduleRequest_EnvVar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleRequest_EnvVar) Reset() {
	*x = ScheduleRequest_EnvVar{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleRequest_EnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest_EnvVar) ProtoMessage() {}

func (x *ScheduleRequest_EnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest_EnvVar.ProtoReflect.Descriptor instead.
func (*ScheduleRequest_EnvVar) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ScheduleRequest_EnvVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduleRequest_EnvVar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// PathElement structure
// Contains pipeline identifier and additional data useful for rendering.
//
// Fields:
//   - ppl_id             = [required] Pipeline id (unique) of the pipeline on the path.
//   - switch_id          = [optional if pipeline has promotions] Switch id (unique).
//   - rebuild_partition  = [required, list] The pipelines in the workflow can be
//     partitioned in n non-overlapping subsets,
//     each containing pipelines partially rebuilt from each other.
//     This field contains chronologically ordered list of pipeline ids,
//     from subset containing ppl_id pipeline.
type GetPathResponse_PathElement struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PplId            string                 `protobuf:"bytes,1,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	SwitchId         string                 `protobuf:"bytes,2,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	RebuildPartition []string               `protobuf:"bytes,3,rep,name=rebuild_partition,json=rebuildPartition,proto3" json:"rebuild_partition,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetPathResponse_PathElement) Reset() {
	*x = GetPathResponse_PathElement{}
	mi := &file_plumber_w_f_workflow_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPathResponse_PathElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPathResponse_PathElement) ProtoMessage() {}

func (x *GetPathResponse_PathElement) ProtoReflect() protoreflect.Message {
	mi := &file_plumber_w_f_workflow_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPathResponse_PathElement.ProtoReflect.Descriptor instead.
func (*GetPathResponse_PathElement) Descriptor() ([]byte, []int) {
	return file_plumber_w_f_workflow_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetPathResponse_PathElement) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

func (x *GetPathResponse_PathElement) GetSwitchId() string {
	if x != nil {
		return x.SwitchId
	}
	return ""
}

func (x *GetPathResponse_PathElement) GetRebuildPartition() []string {
	if x != nil {
		return x.RebuildPartition
	}
	return nil
}

var File_plumber_w_f_workflow_proto protoreflect.FileDescriptor

const file_plumber_w_f_workflow_proto_rawDesc = "" +
	"\n" +
	"\x1aplumber_w_f.workflow.proto\x12\x15InternalApi.PlumberWF\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19internal_api/status.proto\"\xb1\a\n" +
	"\x0fScheduleRequest\x12L\n" +
	"\aservice\x18\x02 \x01(\x0e22.InternalApi.PlumberWF.ScheduleRequest.ServiceTypeR\aservice\x12?\n" +
	"\x04repo\x18\x03 \x01(\v2+.InternalApi.PlumberWF.ScheduleRequest.RepoR\x04repo\x12\x1d\n" +
	"\n" +
	"project_id\x18\x06 \x01(\tR\tprojectId\x12\x1b\n" +
	"\tbranch_id\x18\a \x01(\tR\bbranchId\x12\x17\n" +
	"\ahook_id\x18\b \x01(\tR\x06hookId\x12#\n" +
	"\rrequest_token\x18\t \x01(\tR\frequestToken\x12\x1f\n" +
	"\vsnapshot_id\x18\n" +
	" \x01(\tR\n" +
	"snapshotId\x12'\n" +
	"\x0fdefinition_file\x18\v \x01(\tR\x0edefinitionFile\x12!\n" +
	"\frequester_id\x18\f \x01(\tR\vrequesterId\x12'\n" +
	"\x0forganization_id\x18\r \x01(\tR\x0eorganizationId\x12\x14\n" +
	"\x05label\x18\x0e \x01(\tR\x05label\x12E\n" +
	"\ftriggered_by\x18\x0f \x01(\x0e2\".InternalApi.PlumberWF.TriggeredByR\vtriggeredBy\x12*\n" +
	"\x11scheduler_task_id\x18\x10 \x01(\tR\x0fschedulerTaskId\x12H\n" +
	"\benv_vars\x18\x11 \x03(\v2-.InternalApi.PlumberWF.ScheduleRequest.EnvVarR\aenvVars\x1a\x9e\x01\n" +
	"\x04Repo\x12\x14\n" +
	"\x05owner\x18\x01 \x01(\tR\x05owner\x12\x1b\n" +
	"\trepo_name\x18\x02 \x01(\tR\brepoName\x12\x1f\n" +
	"\vbranch_name\x18\x04 \x01(\tR\n" +
	"branchName\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x05 \x01(\tR\tcommitSha\x12#\n" +
	"\rrepository_id\x18\x06 \x01(\tR\frepositoryId\x1a2\n" +
	"\x06EnvVar\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"W\n" +
	"\vServiceType\x12\v\n" +
	"\aGIT_HUB\x10\x00\x12\t\n" +
	"\x05LOCAL\x10\x01\x12\f\n" +
	"\bSNAPSHOT\x10\x02\x12\r\n" +
	"\tBITBUCKET\x10\x03\x12\n" +
	"\n" +
	"\x06GITLAB\x10\x04\x12\a\n" +
	"\x03GIT\x10\x05\"k\n" +
	"\x10ScheduleResponse\x12\x13\n" +
	"\x05wf_id\x18\x02 \x01(\tR\x04wfId\x12+\n" +
	"\x06status\x18\x03 \x01(\v2\x13.InternalApi.StatusR\x06status\x12\x15\n" +
	"\x06ppl_id\x18\x04 \x01(\tR\x05pplId\"g\n" +
	"\x0eGetPathRequest\x12\x13\n" +
	"\x05wf_id\x18\x01 \x01(\tR\x04wfId\x12 \n" +
	"\ffirst_ppl_id\x18\x02 \x01(\tR\n" +
	"firstPplId\x12\x1e\n" +
	"\vlast_ppl_id\x18\x03 \x01(\tR\tlastPplId\"\xcb\x02\n" +
	"\x0fGetPathResponse\x12\x13\n" +
	"\x05wf_id\x18\x02 \x01(\tR\x04wfId\x12>\n" +
	"\rwf_created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\vwfCreatedAt\x12F\n" +
	"\x04path\x18\x04 \x03(\v22.InternalApi.PlumberWF.GetPathResponse.PathElementR\x04path\x12+\n" +
	"\x06status\x18\x05 \x01(\v2\x13.InternalApi.StatusR\x06status\x1an\n" +
	"\vPathElement\x12\x15\n" +
	"\x06ppl_id\x18\x01 \x01(\tR\x05pplId\x12\x1b\n" +
	"\tswitch_id\x18\x02 \x01(\tR\bswitchId\x12+\n" +
	"\x11rebuild_partition\x18\x03 \x03(\tR\x10rebuildPartition\"\xd4\x03\n" +
	"\x1aListLatestWorkflowsRequest\x12M\n" +
	"\x05order\x18\x01 \x01(\x0e27.InternalApi.PlumberWF.ListLatestWorkflowsRequest.OrderR\x05order\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12Y\n" +
	"\tdirection\x18\x04 \x01(\x0e2;.InternalApi.PlumberWF.ListLatestWorkflowsRequest.DirectionR\tdirection\x12\x1d\n" +
	"\n" +
	"project_id\x18\x05 \x01(\tR\tprojectId\x12!\n" +
	"\frequester_id\x18\x06 \x01(\tR\vrequesterId\x12E\n" +
	"\rgit_ref_types\x18\a \x03(\x0e2!.InternalApi.PlumberWF.GitRefTypeR\vgitRefTypes\"\"\n" +
	"\x05Order\x12\x19\n" +
	"\x15BY_CREATION_TIME_DESC\x10\x00\"#\n" +
	"\tDirection\x12\b\n" +
	"\x04NEXT\x10\x00\x12\f\n" +
	"\bPREVIOUS\x10\x01\"\xbb\x01\n" +
	"\x1bListLatestWorkflowsResponse\x12D\n" +
	"\tworkflows\x18\x01 \x03(\v2&.InternalApi.PlumberWF.WorkflowDetailsR\tworkflows\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12.\n" +
	"\x13previous_page_token\x18\x03 \x01(\tR\x11previousPageToken\"\xc2\x03\n" +
	"\x14ListGroupedKSRequest\x12G\n" +
	"\x05order\x18\x01 \x01(\x0e21.InternalApi.PlumberWF.ListGroupedKSRequest.OrderR\x05order\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12S\n" +
	"\tdirection\x18\x04 \x01(\x0e25.InternalApi.PlumberWF.ListGroupedKSRequest.DirectionR\tdirection\x12\x1d\n" +
	"\n" +
	"project_id\x18\x05 \x01(\tR\tprojectId\x12!\n" +
	"\frequester_id\x18\x06 \x01(\tR\vrequesterId\x12E\n" +
	"\rgit_ref_types\x18\a \x03(\x0e2!.InternalApi.PlumberWF.GitRefTypeR\vgitRefTypes\"\"\n" +
	"\x05Order\x12\x19\n" +
	"\x15BY_CREATION_TIME_DESC\x10\x00\"#\n" +
	"\tDirection\x12\b\n" +
	"\x04NEXT\x10\x00\x12\f\n" +
	"\bPREVIOUS\x10\x01\"\xb5\x01\n" +
	"\x15ListGroupedKSResponse\x12D\n" +
	"\tworkflows\x18\x01 \x03(\v2&.InternalApi.PlumberWF.WorkflowDetailsR\tworkflows\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12.\n" +
	"\x13previous_page_token\x18\x03 \x01(\tR\x11previousPageToken\"\xb5\x02\n" +
	"\x12ListGroupedRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12S\n" +
	"\n" +
	"grouped_by\x18\x04 \x01(\x0e24.InternalApi.PlumberWF.ListGroupedRequest.SourceTypeR\tgroupedBy\x12E\n" +
	"\rgit_ref_types\x18\x05 \x03(\x0e2!.InternalApi.PlumberWF.GitRefTypeR\vgitRefTypes\"3\n" +
	"\n" +
	"SourceType\x12\n" +
	"\n" +
	"\x06BRANCH\x10\x00\x12\a\n" +
	"\x03TAG\x10\x01\x12\x10\n" +
	"\fPULL_REQUEST\x10\x02\"\x8c\x02\n" +
	"\x13ListGroupedResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12D\n" +
	"\tworkflows\x18\x02 \x03(\v2&.InternalApi.PlumberWF.WorkflowDetailsR\tworkflows\x12\x1f\n" +
	"\vpage_number\x18\x03 \x01(\x05R\n" +
	"pageNumber\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12#\n" +
	"\rtotal_entries\x18\x05 \x01(\x05R\ftotalEntries\x12\x1f\n" +
	"\vtotal_pages\x18\x06 \x01(\x05R\n" +
	"totalPages\"\xcc\x03\n" +
	"\vListRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12\x1f\n" +
	"\vbranch_name\x18\x04 \x01(\tR\n" +
	"branchName\x12!\n" +
	"\frequester_id\x18\x05 \x01(\tR\vrequesterId\x12'\n" +
	"\x0forganization_id\x18\x06 \x01(\tR\x0eorganizationId\x12\x1f\n" +
	"\vproject_ids\x18\a \x03(\tR\n" +
	"projectIds\x12A\n" +
	"\x0ecreated_before\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\rcreatedBefore\x12?\n" +
	"\rcreated_after\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\fcreatedAfter\x12\x14\n" +
	"\x05label\x18\n" +
	" \x01(\tR\x05label\x12E\n" +
	"\rgit_ref_types\x18\v \x03(\x0e2!.InternalApi.PlumberWF.GitRefTypeR\vgitRefTypes\"\x85\x02\n" +
	"\fListResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12D\n" +
	"\tworkflows\x18\x02 \x03(\v2&.InternalApi.PlumberWF.WorkflowDetailsR\tworkflows\x12\x1f\n" +
	"\vpage_number\x18\x03 \x01(\x05R\n" +
	"pageNumber\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12#\n" +
	"\rtotal_entries\x18\x05 \x01(\x05R\ftotalEntries\x12\x1f\n" +
	"\vtotal_pages\x18\x06 \x01(\x05R\n" +
	"totalPages\"\xa7\x06\n" +
	"\x11ListKeysetRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12D\n" +
	"\x05order\x18\x03 \x01(\x0e2..InternalApi.PlumberWF.ListKeysetRequest.OrderR\x05order\x12'\n" +
	"\x0forganization_id\x18\x04 \x01(\tR\x0eorganizationId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x05 \x01(\tR\tprojectId\x12!\n" +
	"\frequester_id\x18\x06 \x01(\tR\vrequesterId\x12\x1f\n" +
	"\vproject_ids\x18\a \x03(\tR\n" +
	"projectIds\x12A\n" +
	"\x0ecreated_before\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\rcreatedBefore\x12?\n" +
	"\rcreated_after\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\fcreatedAfter\x12\x14\n" +
	"\x05label\x18\n" +
	" \x01(\tR\x05label\x12E\n" +
	"\rgit_ref_types\x18\v \x03(\x0e2!.InternalApi.PlumberWF.GitRefTypeR\vgitRefTypes\x12P\n" +
	"\tdirection\x18\f \x01(\x0e22.InternalApi.PlumberWF.ListKeysetRequest.DirectionR\tdirection\x12B\n" +
	"\n" +
	"triggerers\x18\r \x03(\x0e2\".InternalApi.PlumberWF.TriggeredByR\n" +
	"triggerers\x12\x1f\n" +
	"\vbranch_name\x18\x0e \x01(\tR\n" +
	"branchName\x12#\n" +
	"\rrequester_ids\x18\x0f \x03(\tR\frequesterIds\"\"\n" +
	"\x05Order\x12\x19\n" +
	"\x15BY_CREATION_TIME_DESC\x10\x00\"#\n" +
	"\tDirection\x12\b\n" +
	"\x04NEXT\x10\x00\x12\f\n" +
	"\bPREVIOUS\x10\x01\"\xdf\x01\n" +
	"\x12ListKeysetResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12D\n" +
	"\tworkflows\x18\x02 \x03(\v2&.InternalApi.PlumberWF.WorkflowDetailsR\tworkflows\x12&\n" +
	"\x0fnext_page_token\x18\x03 \x01(\tR\rnextPageToken\x12.\n" +
	"\x13previous_page_token\x18\x04 \x01(\tR\x11previousPageToken\"\xef\x03\n" +
	"\x0fWorkflowDetails\x12\x13\n" +
	"\x05wf_id\x18\x01 \x01(\tR\x04wfId\x12$\n" +
	"\x0einitial_ppl_id\x18\x02 \x01(\tR\finitialPplId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12\x17\n" +
	"\ahook_id\x18\x04 \x01(\tR\x06hookId\x12!\n" +
	"\frequester_id\x18\x05 \x01(\tR\vrequesterId\x12\x1b\n" +
	"\tbranch_id\x18\x06 \x01(\tR\bbranchId\x12\x1f\n" +
	"\vbranch_name\x18\a \x01(\tR\n" +
	"branchName\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\b \x01(\tR\tcommitSha\x129\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12E\n" +
	"\ftriggered_by\x18\n" +
	" \x01(\x0e2\".InternalApi.PlumberWF.TriggeredByR\vtriggeredBy\x12\x19\n" +
	"\brerun_of\x18\v \x01(\tR\arerunOf\x12#\n" +
	"\rrepository_id\x18\f \x01(\tR\frepositoryId\x12'\n" +
	"\x0forganization_id\x18\r \x01(\tR\x0eorganizationId\"&\n" +
	"\x0fDescribeRequest\x12\x13\n" +
	"\x05wf_id\x18\x01 \x01(\tR\x04wfId\"\x83\x01\n" +
	"\x10DescribeResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12B\n" +
	"\bworkflow\x18\x02 \x01(\v2&.InternalApi.PlumberWF.WorkflowDetailsR\bworkflow\",\n" +
	"\x13DescribeManyRequest\x12\x15\n" +
	"\x06wf_ids\x18\x01 \x03(\tR\x05wfIds\"\x89\x01\n" +
	"\x14DescribeManyResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12D\n" +
	"\tworkflows\x18\x02 \x03(\v2&.InternalApi.PlumberWF.WorkflowDetailsR\tworkflows\"J\n" +
	"\x10TerminateRequest\x12!\n" +
	"\frequester_id\x18\x02 \x01(\tR\vrequesterId\x12\x13\n" +
	"\x05wf_id\x18\x03 \x01(\tR\x04wfId\"@\n" +
	"\x11TerminateResponse\x12+\n" +
	"\x06status\x18\x02 \x01(\v2\x13.InternalApi.StatusR\x06status\"c\n" +
	"\x11ListLabelsRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\"\xdd\x01\n" +
	"\x12ListLabelsResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12\x16\n" +
	"\x06labels\x18\x02 \x03(\tR\x06labels\x12\x1f\n" +
	"\vpage_number\x18\x03 \x01(\x05R\n" +
	"pageNumber\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12#\n" +
	"\rtotal_entries\x18\x05 \x01(\x05R\ftotalEntries\x12\x1f\n" +
	"\vtotal_pages\x18\x06 \x01(\x05R\n" +
	"totalPages\"p\n" +
	"\x11RescheduleRequest\x12\x13\n" +
	"\x05wf_id\x18\x01 \x01(\tR\x04wfId\x12!\n" +
	"\frequester_id\x18\x02 \x01(\tR\vrequesterId\x12#\n" +
	"\rrequest_token\x18\x03 \x01(\tR\frequestToken\"*\n" +
	"\x13GetProjectIdRequest\x12\x13\n" +
	"\x05wf_id\x18\x01 \x01(\tR\x04wfId\"b\n" +
	"\x14GetProjectIdResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.InternalApi.StatusR\x06status\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\"\xce\x01\n" +
	"\rCreateRequest\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12\x14\n" +
	"\x05label\x18\x02 \x01(\tR\x05label\x12\x17\n" +
	"\ahook_id\x18\x03 \x01(\tR\x06hookId\x12#\n" +
	"\rrequest_token\x18\x04 \x01(\tR\frequestToken\x12'\n" +
	"\x0fdefinition_file\x18\x05 \x01(\tR\x0edefinitionFile\x12!\n" +
	"\frequester_id\x18\x06 \x01(\tR\vrequesterId\"i\n" +
	"\x0eCreateResponse\x12\x13\n" +
	"\x05wf_id\x18\x01 \x01(\tR\x04wfId\x12+\n" +
	"\x06status\x18\x02 \x01(\v2\x13.InternalApi.StatusR\x06status\x12\x15\n" +
	"\x06ppl_id\x18\x03 \x01(\tR\x05pplId*>\n" +
	"\vTriggeredBy\x12\b\n" +
	"\x04HOOK\x10\x00\x12\f\n" +
	"\bSCHEDULE\x10\x01\x12\a\n" +
	"\x03API\x10\x02\x12\x0e\n" +
	"\n" +
	"MANUAL_RUN\x10\x03*)\n" +
	"\n" +
	"GitRefType\x12\n" +
	"\n" +
	"\x06BRANCH\x10\x00\x12\a\n" +
	"\x03TAG\x10\x01\x12\x06\n" +
	"\x02PR\x10\x022\xf6\n" +
	"\n" +
	"\x0fWorkflowService\x12[\n" +
	"\bSchedule\x12&.InternalApi.PlumberWF.ScheduleRequest\x1a'.InternalApi.PlumberWF.ScheduleResponse\x12X\n" +
	"\aGetPath\x12%.InternalApi.PlumberWF.GetPathRequest\x1a&.InternalApi.PlumberWF.GetPathResponse\x12O\n" +
	"\x04List\x12\".InternalApi.PlumberWF.ListRequest\x1a#.InternalApi.PlumberWF.ListResponse\x12a\n" +
	"\n" +
	"ListKeyset\x12(.InternalApi.PlumberWF.ListKeysetRequest\x1a).InternalApi.PlumberWF.ListKeysetResponse\x12d\n" +
	"\vListGrouped\x12).InternalApi.PlumberWF.ListGroupedRequest\x1a*.InternalApi.PlumberWF.ListGroupedResponse\x12j\n" +
	"\rListGroupedKS\x12+.InternalApi.PlumberWF.ListGroupedKSRequest\x1a,.InternalApi.PlumberWF.ListGroupedKSResponse\x12|\n" +
	"\x13ListLatestWorkflows\x121.InternalApi.PlumberWF.ListLatestWorkflowsRequest\x1a2.InternalApi.PlumberWF.ListLatestWorkflowsResponse\x12[\n" +
	"\bDescribe\x12&.InternalApi.PlumberWF.DescribeRequest\x1a'.InternalApi.PlumberWF.DescribeResponse\x12g\n" +
	"\fDescribeMany\x12*.InternalApi.PlumberWF.DescribeManyRequest\x1a+.InternalApi.PlumberWF.DescribeManyResponse\x12^\n" +
	"\tTerminate\x12'.InternalApi.PlumberWF.TerminateRequest\x1a(.InternalApi.PlumberWF.TerminateResponse\x12a\n" +
	"\n" +
	"ListLabels\x12(.InternalApi.PlumberWF.ListLabelsRequest\x1a).InternalApi.PlumberWF.ListLabelsResponse\x12_\n" +
	"\n" +
	"Reschedule\x12(.InternalApi.PlumberWF.RescheduleRequest\x1a'.InternalApi.PlumberWF.ScheduleResponse\x12g\n" +
	"\fGetProjectId\x12*.InternalApi.PlumberWF.GetProjectIdRequest\x1a+.InternalApi.PlumberWF.GetProjectIdResponse\x12U\n" +
	"\x06Create\x12$.InternalApi.PlumberWF.CreateRequest\x1a%.InternalApi.PlumberWF.CreateResponseBOZMgithub.com/superplanehq/superplane/pkg/protos/plumber_w_f.workflowb\x06proto3"

var (
	file_plumber_w_f_workflow_proto_rawDescOnce sync.Once
	file_plumber_w_f_workflow_proto_rawDescData []byte
)

func file_plumber_w_f_workflow_proto_rawDescGZIP() []byte {
	file_plumber_w_f_workflow_proto_rawDescOnce.Do(func() {
		file_plumber_w_f_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plumber_w_f_workflow_proto_rawDesc), len(file_plumber_w_f_workflow_proto_rawDesc)))
	})
	return file_plumber_w_f_workflow_proto_rawDescData
}

var file_plumber_w_f_workflow_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_plumber_w_f_workflow_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_plumber_w_f_workflow_proto_goTypes = []any{
	(TriggeredBy)(0),                          // 0: InternalApi.PlumberWF.TriggeredBy
	(GitRefType)(0),                           // 1: InternalApi.PlumberWF.GitRefType
	(ScheduleRequest_ServiceType)(0),          // 2: InternalApi.PlumberWF.ScheduleRequest.ServiceType
	(ListLatestWorkflowsRequest_Order)(0),     // 3: InternalApi.PlumberWF.ListLatestWorkflowsRequest.Order
	(ListLatestWorkflowsRequest_Direction)(0), // 4: InternalApi.PlumberWF.ListLatestWorkflowsRequest.Direction
	(ListGroupedKSRequest_Order)(0),           // 5: InternalApi.PlumberWF.ListGroupedKSRequest.Order
	(ListGroupedKSRequest_Direction)(0),       // 6: InternalApi.PlumberWF.ListGroupedKSRequest.Direction
	(ListGroupedRequest_SourceType)(0),        // 7: InternalApi.PlumberWF.ListGroupedRequest.SourceType
	(ListKeysetRequest_Order)(0),              // 8: InternalApi.PlumberWF.ListKeysetRequest.Order
	(ListKeysetRequest_Direction)(0),          // 9: InternalApi.PlumberWF.ListKeysetRequest.Direction
	(*ScheduleRequest)(nil),                   // 10: InternalApi.PlumberWF.ScheduleRequest
	(*ScheduleResponse)(nil),                  // 11: InternalApi.PlumberWF.ScheduleResponse
	(*GetPathRequest)(nil),                    // 12: InternalApi.PlumberWF.GetPathRequest
	(*GetPathResponse)(nil),                   // 13: InternalApi.PlumberWF.GetPathResponse
	(*ListLatestWorkflowsRequest)(nil),        // 14: InternalApi.PlumberWF.ListLatestWorkflowsRequest
	(*ListLatestWorkflowsResponse)(nil),       // 15: InternalApi.PlumberWF.ListLatestWorkflowsResponse
	(*ListGroupedKSRequest)(nil),              // 16: InternalApi.PlumberWF.ListGroupedKSRequest
	(*ListGroupedKSResponse)(nil),             // 17: InternalApi.PlumberWF.ListGroupedKSResponse
	(*ListGroupedRequest)(nil),                // 18: InternalApi.PlumberWF.ListGroupedRequest
	(*ListGroupedResponse)(nil),               // 19: InternalApi.PlumberWF.ListGroupedResponse
	(*ListRequest)(nil),                       // 20: InternalApi.PlumberWF.ListRequest
	(*ListResponse)(nil),                      // 21: InternalApi.PlumberWF.ListResponse
	(*ListKeysetRequest)(nil),                 // 22: InternalApi.PlumberWF.ListKeysetRequest
	(*ListKeysetResponse)(nil),                // 23: InternalApi.PlumberWF.ListKeysetResponse
	(*WorkflowDetails)(nil),                   // 24: InternalApi.PlumberWF.WorkflowDetails
	(*DescribeRequest)(nil),                   // 25: InternalApi.PlumberWF.DescribeRequest
	(*DescribeResponse)(nil),                  // 26: InternalApi.PlumberWF.DescribeResponse
	(*DescribeManyRequest)(nil),               // 27: InternalApi.PlumberWF.DescribeManyRequest
	(*DescribeManyResponse)(nil),              // 28: InternalApi.PlumberWF.DescribeManyResponse
	(*TerminateRequest)(nil),                  // 29: InternalApi.PlumberWF.TerminateRequest
	(*TerminateResponse)(nil),                 // 30: InternalApi.PlumberWF.TerminateResponse
	(*ListLabelsRequest)(nil),                 // 31: InternalApi.PlumberWF.ListLabelsRequest
	(*ListLabelsResponse)(nil),                // 32: InternalApi.PlumberWF.ListLabelsResponse
	(*RescheduleRequest)(nil),                 // 33: InternalApi.PlumberWF.RescheduleRequest
	(*GetProjectIdRequest)(nil),               // 34: InternalApi.PlumberWF.GetProjectIdRequest
	(*GetProjectIdResponse)(nil),              // 35: InternalApi.PlumberWF.GetProjectIdResponse
	(*CreateRequest)(nil),                     // 36: InternalApi.PlumberWF.CreateRequest
	(*CreateResponse)(nil),                    // 37: InternalApi.PlumberWF.CreateResponse
	(*ScheduleRequest_Repo)(nil),              // 38: InternalApi.PlumberWF.ScheduleRequest.Repo
	(*ScheduleRequest_EnvVar)(nil),            // 39: InternalApi.PlumberWF.ScheduleRequest.EnvVar
	(*GetPathResponse_PathElement)(nil),       // 40: InternalApi.PlumberWF.GetPathResponse.PathElement
	(*status.Status)(nil),                     // 41: InternalApi.Status
	(*timestamp.Timestamp)(nil),               // 42: google.protobuf.Timestamp
}
var file_plumber_w_f_workflow_proto_depIdxs = []int32{
	2,  // 0: InternalApi.PlumberWF.ScheduleRequest.service:type_name -> InternalApi.PlumberWF.ScheduleRequest.ServiceType
	38, // 1: InternalApi.PlumberWF.ScheduleRequest.repo:type_name -> InternalApi.PlumberWF.ScheduleRequest.Repo
	0,  // 2: InternalApi.PlumberWF.ScheduleRequest.triggered_by:type_name -> InternalApi.PlumberWF.TriggeredBy
	39, // 3: InternalApi.PlumberWF.ScheduleRequest.env_vars:type_name -> InternalApi.PlumberWF.ScheduleRequest.EnvVar
	41, // 4: InternalApi.PlumberWF.ScheduleResponse.status:type_name -> InternalApi.Status
	42, // 5: InternalApi.PlumberWF.GetPathResponse.wf_created_at:type_name -> google.protobuf.Timestamp
	40, // 6: InternalApi.PlumberWF.GetPathResponse.path:type_name -> InternalApi.PlumberWF.GetPathResponse.PathElement
	41, // 7: InternalApi.PlumberWF.GetPathResponse.status:type_name -> InternalApi.Status
	3,  // 8: InternalApi.PlumberWF.ListLatestWorkflowsRequest.order:type_name -> InternalApi.PlumberWF.ListLatestWorkflowsRequest.Order
	4,  // 9: InternalApi.PlumberWF.ListLatestWorkflowsRequest.direction:type_name -> InternalApi.PlumberWF.ListLatestWorkflowsRequest.Direction
	1,  // 10: InternalApi.PlumberWF.ListLatestWorkflowsRequest.git_ref_types:type_name -> InternalApi.PlumberWF.GitRefType
	24, // 11: InternalApi.PlumberWF.ListLatestWorkflowsResponse.workflows:type_name -> InternalApi.PlumberWF.WorkflowDetails
	5,  // 12: InternalApi.PlumberWF.ListGroupedKSRequest.order:type_name -> InternalApi.PlumberWF.ListGroupedKSRequest.Order
	6,  // 13: InternalApi.PlumberWF.ListGroupedKSRequest.direction:type_name -> InternalApi.PlumberWF.ListGroupedKSRequest.Direction
	1,  // 14: InternalApi.PlumberWF.ListGroupedKSRequest.git_ref_types:type_name -> InternalApi.PlumberWF.GitRefType
	24, // 15: InternalApi.PlumberWF.ListGroupedKSResponse.workflows:type_name -> InternalApi.PlumberWF.WorkflowDetails
	7,  // 16: InternalApi.PlumberWF.ListGroupedRequest.grouped_by:type_name -> InternalApi.PlumberWF.ListGroupedRequest.SourceType
	1,  // 17: InternalApi.PlumberWF.ListGroupedRequest.git_ref_types:type_name -> InternalApi.PlumberWF.GitRefType
	41, // 18: InternalApi.PlumberWF.ListGroupedResponse.status:type_name -> InternalApi.Status
	24, // 19: InternalApi.PlumberWF.ListGroupedResponse.workflows:type_name -> InternalApi.PlumberWF.WorkflowDetails
	42, // 20: InternalApi.PlumberWF.ListRequest.created_before:type_name -> google.protobuf.Timestamp
	42, // 21: InternalApi.PlumberWF.ListRequest.created_after:type_name -> google.protobuf.Timestamp
	1,  // 22: InternalApi.PlumberWF.ListRequest.git_ref_types:type_name -> InternalApi.PlumberWF.GitRefType
	41, // 23: InternalApi.PlumberWF.ListResponse.status:type_name -> InternalApi.Status
	24, // 24: InternalApi.PlumberWF.ListResponse.workflows:type_name -> InternalApi.PlumberWF.WorkflowDetails
	8,  // 25: InternalApi.PlumberWF.ListKeysetRequest.order:type_name -> InternalApi.PlumberWF.ListKeysetRequest.Order
	42, // 26: InternalApi.PlumberWF.ListKeysetRequest.created_before:type_name -> google.protobuf.Timestamp
	42, // 27: InternalApi.PlumberWF.ListKeysetRequest.created_after:type_name -> google.protobuf.Timestamp
	1,  // 28: InternalApi.PlumberWF.ListKeysetRequest.git_ref_types:type_name -> InternalApi.PlumberWF.GitRefType
	9,  // 29: InternalApi.PlumberWF.ListKeysetRequest.direction:type_name -> InternalApi.PlumberWF.ListKeysetRequest.Direction
	0,  // 30: InternalApi.PlumberWF.ListKeysetRequest.triggerers:type_name -> InternalApi.PlumberWF.TriggeredBy
	41, // 31: InternalApi.PlumberWF.ListKeysetResponse.status:type_name -> InternalApi.Status
	24, // 32: InternalApi.PlumberWF.ListKeysetResponse.workflows:type_name -> InternalApi.PlumberWF.WorkflowDetails
	42, // 33: InternalApi.PlumberWF.WorkflowDetails.created_at:type_name -> google.protobuf.Timestamp
	0,  // 34: InternalApi.PlumberWF.WorkflowDetails.triggered_by:type_name -> InternalApi.PlumberWF.TriggeredBy
	41, // 35: InternalApi.PlumberWF.DescribeResponse.status:type_name -> InternalApi.Status
	24, // 36: InternalApi.PlumberWF.DescribeResponse.workflow:type_name -> InternalApi.PlumberWF.WorkflowDetails
	41, // 37: InternalApi.PlumberWF.DescribeManyResponse.status:type_name -> InternalApi.Status
	24, // 38: InternalApi.PlumberWF.DescribeManyResponse.workflows:type_name -> InternalApi.PlumberWF.WorkflowDetails
	41, // 39: InternalApi.PlumberWF.TerminateResponse.status:type_name -> InternalApi.Status
	41, // 40: InternalApi.PlumberWF.ListLabelsResponse.status:type_name -> InternalApi.Status
	41, // 41: InternalApi.PlumberWF.GetProjectIdResponse.status:type_name -> InternalApi.Status
	41, // 42: InternalApi.PlumberWF.CreateResponse.status:type_name -> InternalApi.Status
	10, // 43: InternalApi.PlumberWF.WorkflowService.Schedule:input_type -> InternalApi.PlumberWF.ScheduleRequest
	12, // 44: InternalApi.PlumberWF.WorkflowService.GetPath:input_type -> InternalApi.PlumberWF.GetPathRequest
	20, // 45: InternalApi.PlumberWF.WorkflowService.List:input_type -> InternalApi.PlumberWF.ListRequest
	22, // 46: InternalApi.PlumberWF.WorkflowService.ListKeyset:input_type -> InternalApi.PlumberWF.ListKeysetRequest
	18, // 47: InternalApi.PlumberWF.WorkflowService.ListGrouped:input_type -> InternalApi.PlumberWF.ListGroupedRequest
	16, // 48: InternalApi.PlumberWF.WorkflowService.ListGroupedKS:input_type -> InternalApi.PlumberWF.ListGroupedKSRequest
	14, // 49: InternalApi.PlumberWF.WorkflowService.ListLatestWorkflows:input_type -> InternalApi.PlumberWF.ListLatestWorkflowsRequest
	25, // 50: InternalApi.PlumberWF.WorkflowService.Describe:input_type -> InternalApi.PlumberWF.DescribeRequest
	27, // 51: InternalApi.PlumberWF.WorkflowService.DescribeMany:input_type -> InternalApi.PlumberWF.DescribeManyRequest
	29, // 52: InternalApi.PlumberWF.WorkflowService.Terminate:input_type -> InternalApi.PlumberWF.TerminateRequest
	31, // 53: InternalApi.PlumberWF.WorkflowService.ListLabels:input_type -> InternalApi.PlumberWF.ListLabelsRequest
	33, // 54: InternalApi.PlumberWF.WorkflowService.Reschedule:input_type -> InternalApi.PlumberWF.RescheduleRequest
	34, // 55: InternalApi.PlumberWF.WorkflowService.GetProjectId:input_type -> InternalApi.PlumberWF.GetProjectIdRequest
	36, // 56: InternalApi.PlumberWF.WorkflowService.Create:input_type -> InternalApi.PlumberWF.CreateRequest
	11, // 57: InternalApi.PlumberWF.WorkflowService.Schedule:output_type -> InternalApi.PlumberWF.ScheduleResponse
	13, // 58: InternalApi.PlumberWF.WorkflowService.GetPath:output_type -> InternalApi.PlumberWF.GetPathResponse
	21, // 59: InternalApi.PlumberWF.WorkflowService.List:output_type -> InternalApi.PlumberWF.ListResponse
	23, // 60: InternalApi.PlumberWF.WorkflowService.ListKeyset:output_type -> InternalApi.PlumberWF.ListKeysetResponse
	19, // 61: InternalApi.PlumberWF.WorkflowService.ListGrouped:output_type -> InternalApi.PlumberWF.ListGroupedResponse
	17, // 62: InternalApi.PlumberWF.WorkflowService.ListGroupedKS:output_type -> InternalApi.PlumberWF.ListGroupedKSResponse
	15, // 63: InternalApi.PlumberWF.WorkflowService.ListLatestWorkflows:output_type -> InternalApi.PlumberWF.ListLatestWorkflowsResponse
	26, // 64: InternalApi.PlumberWF.WorkflowService.Describe:output_type -> InternalApi.PlumberWF.DescribeResponse
	28, // 65: InternalApi.PlumberWF.WorkflowService.DescribeMany:output_type -> InternalApi.PlumberWF.DescribeManyResponse
	30, // 66: InternalApi.PlumberWF.WorkflowService.Terminate:output_type -> InternalApi.PlumberWF.TerminateResponse
	32, // 67: InternalApi.PlumberWF.WorkflowService.ListLabels:output_type -> InternalApi.PlumberWF.ListLabelsResponse
	11, // 68: InternalApi.PlumberWF.WorkflowService.Reschedule:output_type -> InternalApi.PlumberWF.ScheduleResponse
	35, // 69: InternalApi.PlumberWF.WorkflowService.GetProjectId:output_type -> InternalApi.PlumberWF.GetProjectIdResponse
	37, // 70: InternalApi.PlumberWF.WorkflowService.Create:output_type -> InternalApi.PlumberWF.CreateResponse
	57, // [57:71] is the sub-list for method output_type
	43, // [43:57] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_plumber_w_f_workflow_proto_init() }
func file_plumber_w_f_workflow_proto_init() {
	if File_plumber_w_f_workflow_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plumber_w_f_workflow_proto_rawDesc), len(file_plumber_w_f_workflow_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plumber_w_f_workflow_proto_goTypes,
		DependencyIndexes: file_plumber_w_f_workflow_proto_depIdxs,
		EnumInfos:         file_plumber_w_f_workflow_proto_enumTypes,
		MessageInfos:      file_plumber_w_f_workflow_proto_msgTypes,
	}.Build()
	File_plumber_w_f_workflow_proto = out.File
	file_plumber_w_f_workflow_proto_goTypes = nil
	file_plumber_w_f_workflow_proto_depIdxs = nil
}
