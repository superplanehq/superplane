{
  "swagger": "2.0",
  "info": {
    "title": "Superplane Authorization API",
    "description": "API for the Superplane Authorization service",
    "version": "1.0",
    "contact": {
      "name": "API Support",
      "email": "support@superplane.com"
    }
  },
  "tags": [
    {
      "name": "Authorization"
    },
    {
      "name": "Organizations"
    },
    {
      "name": "Secrets"
    },
    {
      "name": "Integrations"
    },
    {
      "name": "Superplane"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/authorization/canvases/{canvasIdOrName}/groups": {
      "get": {
        "summary": "List canvas groups",
        "description": "Returns a list of groups within a canvas",
        "operationId": "Authorization_ListCanvasGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationListCanvasGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "summary": "Create canvas group",
        "description": "Creates a new group within a canvas with a specific role",
        "operationId": "Authorization_CreateCanvasGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateCanvasGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateCanvasGroupBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/canvases/{canvasIdOrName}/groups/{groupName}": {
      "get": {
        "summary": "Get canvas group",
        "description": "Returns details of a specific group within a canvas",
        "operationId": "Authorization_GetCanvasGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetCanvasGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "delete": {
        "summary": "Delete canvas group",
        "description": "Deletes an existing group within a canvas",
        "operationId": "Authorization_DeleteCanvasGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationDeleteCanvasGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "put": {
        "summary": "Update canvas group",
        "description": "Updates an existing group within a canvas",
        "operationId": "Authorization_UpdateCanvasGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationUpdateCanvasGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationUpdateCanvasGroupBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/canvases/{canvasIdOrName}/groups/{groupName}/users": {
      "get": {
        "summary": "Get canvas group users",
        "description": "Returns users that belong to a specific group within a canvas",
        "operationId": "Authorization_GetCanvasGroupUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetCanvasGroupUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "summary": "Add user to canvas group",
        "description": "Adds a user to a group within a canvas",
        "operationId": "Authorization_AddUserToCanvasGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationAddUserToCanvasGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationAddUserToCanvasGroupBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/canvases/{canvasIdOrName}/groups/{groupName}/users/remove": {
      "patch": {
        "summary": "Remove user from canvas group",
        "description": "Removes a user from a group within a canvas",
        "operationId": "Authorization_RemoveUserFromCanvasGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationRemoveUserFromCanvasGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationRemoveUserFromCanvasGroupBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/canvases/{canvasIdOrName}/users": {
      "get": {
        "summary": "Get canvas users",
        "description": "Returns all users that have roles within a canvas",
        "operationId": "Authorization_GetCanvasUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetCanvasUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/groups": {
      "get": {
        "summary": "List organization groups",
        "description": "Returns a list of groups within an organization",
        "operationId": "Authorization_ListOrganizationGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationListOrganizationGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "summary": "Create group",
        "description": "Creates a new group within an organization with a specific role",
        "operationId": "Authorization_CreateOrganizationGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateOrganizationGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateOrganizationGroupRequest"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/groups/{groupName}": {
      "get": {
        "summary": "Get organization group",
        "description": "Returns details of a specific group within an organization",
        "operationId": "Authorization_GetOrganizationGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetOrganizationGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "delete": {
        "summary": "Delete organization group",
        "description": "Deletes an existing group within an organization",
        "operationId": "Authorization_DeleteOrganizationGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationDeleteOrganizationGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "put": {
        "summary": "Update organization group",
        "description": "Updates an existing group within an organization",
        "operationId": "Authorization_UpdateOrganizationGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationUpdateOrganizationGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationUpdateOrganizationGroupBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/groups/{groupName}/users": {
      "get": {
        "summary": "Get organization group users",
        "description": "Returns users that belong to a specific group within an organization",
        "operationId": "Authorization_GetOrganizationGroupUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetOrganizationGroupUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "summary": "Add user to organization group",
        "description": "Adds a user to a group within an organization",
        "operationId": "Authorization_AddUserToOrganizationGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationAddUserToOrganizationGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationAddUserToOrganizationGroupBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/groups/{groupName}/users/remove": {
      "patch": {
        "summary": "Remove user from organization group",
        "description": "Removes a user from a group within an organization",
        "operationId": "Authorization_RemoveUserFromOrganizationGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationRemoveUserFromOrganizationGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationRemoveUserFromOrganizationGroupBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/organizations/{organizationId}/users": {
      "get": {
        "summary": "Get organization users",
        "description": "Returns all users that have roles within an organization",
        "operationId": "Authorization_GetOrganizationUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetOrganizationUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/roles": {
      "get": {
        "summary": "List roles",
        "description": "Returns available roles for a specific domain type with their permissions and inheritance",
        "operationId": "Authorization_ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationListRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domainType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_TYPE_UNSPECIFIED",
              "DOMAIN_TYPE_ORGANIZATION",
              "DOMAIN_TYPE_CANVAS"
            ],
            "default": "DOMAIN_TYPE_UNSPECIFIED"
          },
          {
            "name": "domainId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "summary": "Create role",
        "description": "Creates a new custom role with specified permissions",
        "operationId": "Authorization_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateRoleRequest"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/roles/assign": {
      "patch": {
        "summary": "Assign role",
        "description": "Assigns a role to a user within an organization or canvas",
        "operationId": "Authorization_AssignRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationAssignRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationAssignRoleRequest"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/roles/describe": {
      "get": {
        "summary": "Describe role",
        "description": "Returns detailed information about a specific role including permissions and inheritance",
        "operationId": "Authorization_DescribeRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationDescribeRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domainType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_TYPE_UNSPECIFIED",
              "DOMAIN_TYPE_ORGANIZATION",
              "DOMAIN_TYPE_CANVAS"
            ],
            "default": "DOMAIN_TYPE_UNSPECIFIED"
          },
          {
            "name": "domainId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/roles/remove": {
      "patch": {
        "summary": "Remove role",
        "description": "Removes a role from a user within an organization or canvas",
        "operationId": "Authorization_RemoveRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationRemoveRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationRemoveRoleRequest"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/roles/{roleName}": {
      "delete": {
        "summary": "Delete role",
        "description": "Deletes an existing custom role",
        "operationId": "Authorization_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationDeleteRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "roleName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_TYPE_UNSPECIFIED",
              "DOMAIN_TYPE_ORGANIZATION",
              "DOMAIN_TYPE_CANVAS"
            ],
            "default": "DOMAIN_TYPE_UNSPECIFIED"
          },
          {
            "name": "domainId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "put": {
        "summary": "Update role",
        "description": "Updates an existing custom role with new permissions",
        "operationId": "Authorization_UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationUpdateRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "roleName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationUpdateRoleBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/users/{userId}/permissions": {
      "get": {
        "summary": "List user permissions",
        "description": "Returns all permissions a user has within a specific domain",
        "operationId": "Authorization_ListUserPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationListUserPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_TYPE_UNSPECIFIED",
              "DOMAIN_TYPE_ORGANIZATION",
              "DOMAIN_TYPE_CANVAS"
            ],
            "default": "DOMAIN_TYPE_UNSPECIFIED"
          },
          {
            "name": "domainId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/authorization/users/{userId}/roles": {
      "get": {
        "summary": "Get user roles",
        "description": "Returns the roles a user has within a specific domain",
        "operationId": "Authorization_GetUserRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetUserRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_TYPE_UNSPECIFIED",
              "DOMAIN_TYPE_ORGANIZATION",
              "DOMAIN_TYPE_CANVAS"
            ],
            "default": "DOMAIN_TYPE_UNSPECIFIED"
          },
          {
            "name": "domainId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/canvases": {
      "get": {
        "summary": "List canvases",
        "description": "Returns a list of all canvases",
        "operationId": "Superplane_ListCanvases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneListCanvasesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Canvas"
        ]
      },
      "post": {
        "summary": "Create a new canvas",
        "description": "Creates a new canvas with the given name and organization ID",
        "operationId": "Superplane_CreateCanvas",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneCreateCanvasResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuperplaneCreateCanvasRequest"
            }
          }
        ],
        "tags": [
          "Canvas"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/connection-groups": {
      "get": {
        "summary": "List connection groups",
        "description": "Returns a list of all connection groups for the specified canvas (can be referenced by ID or name)",
        "operationId": "Superplane_ListConnectionGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneListConnectionGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ConnectionGroup"
        ]
      },
      "post": {
        "summary": "Create a new canvas connection group",
        "description": "Creates a new canvas connection group",
        "operationId": "Superplane_CreateConnectionGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneCreateConnectionGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuperplaneCreateConnectionGroupBody"
            }
          }
        ],
        "tags": [
          "ConnectionGroup"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}": {
      "get": {
        "summary": "Get connection group details",
        "description": "Returns the details of a specific connection group (canvas can be referenced by ID or name)",
        "operationId": "Superplane_DescribeConnectionGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneDescribeConnectionGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ConnectionGroup"
        ]
      },
      "patch": {
        "summary": "Update a connection group",
        "description": "Updates the specified connection group (canvas can be referenced by ID or name)",
        "operationId": "Superplane_UpdateConnectionGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneUpdateConnectionGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuperplaneUpdateConnectionGroupBody"
            }
          }
        ],
        "tags": [
          "ConnectionGroup"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/connection-groups/{idOrName}/field-sets": {
      "get": {
        "summary": "List connection group field sets",
        "description": "Returns a list of field sets for the specified connection group (canvas can be referenced by ID or name)",
        "operationId": "Superplane_ListConnectionGroupFieldSets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneListConnectionGroupFieldSetsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ConnectionGroup"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/event-sources": {
      "get": {
        "summary": "List event sources",
        "description": "Returns a list of all event sources for the specified canvas (can be referenced by ID or name)",
        "operationId": "Superplane_ListEventSources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneListEventSourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EventSource"
        ]
      },
      "post": {
        "summary": "Create a new event source",
        "description": "Creates a new event source for the specified canvas (can be referenced by ID or name)",
        "operationId": "Superplane_CreateEventSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneCreateEventSourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuperplaneCreateEventSourceBody"
            }
          }
        ],
        "tags": [
          "EventSource"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/event-sources/{idOrName}/reset-key": {
      "post": {
        "summary": "Reset the key for an event source",
        "description": "Resets the key used to receive events from the specified event source (canvas can be referenced by ID or name)",
        "operationId": "Superplane_ResetEventSourceKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneResetEventSourceKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuperplaneResetEventSourceKeyBody"
            }
          }
        ],
        "tags": [
          "EventSource"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/event-sources/{id}": {
      "get": {
        "summary": "Get event source details",
        "description": "Returns the details of a specific event source (canvas can be referenced by ID or name)",
        "operationId": "Superplane_DescribeEventSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneDescribeEventSourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EventSource"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/groups": {
      "get": {
        "summary": "List canvas groups",
        "description": "Returns a list of groups within a canvas",
        "operationId": "Authorization_ListCanvasGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationListCanvasGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "summary": "Create canvas group",
        "description": "Creates a new group within a canvas with a specific role",
        "operationId": "Authorization_CreateCanvasGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateCanvasGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateCanvasGroupBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/groups/{groupName}": {
      "get": {
        "summary": "Get canvas group",
        "description": "Returns details of a specific group within a canvas",
        "operationId": "Authorization_GetCanvasGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetCanvasGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/groups/{groupName}/users": {
      "get": {
        "summary": "Get canvas group users",
        "description": "Returns users that belong to a specific group within a canvas",
        "operationId": "Authorization_GetCanvasGroupUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetCanvasGroupUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "summary": "Add user to canvas group",
        "description": "Adds a user to a group within a canvas",
        "operationId": "Authorization_AddUserToCanvasGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationAddUserToCanvasGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationAddUserToCanvasGroupBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/groups/{groupName}/users/{userId}": {
      "delete": {
        "summary": "Remove user from canvas group",
        "description": "Removes a user from a group within a canvas",
        "operationId": "Authorization_RemoveUserFromCanvasGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationRemoveUserFromCanvasGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/stages": {
      "get": {
        "summary": "List stages",
        "description": "Returns a list of all stages for the specified canvas (can be referenced by ID or name)",
        "operationId": "Superplane_ListStages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneListStagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Stage"
        ]
      },
      "post": {
        "summary": "Create a new stage",
        "description": "Creates a new stage for the specified canvas (can be referenced by ID or name)",
        "operationId": "Superplane_CreateStage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneCreateStageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuperplaneCreateStageBody"
            }
          }
        ],
        "tags": [
          "Stage"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/stages/{idOrName}": {
      "patch": {
        "summary": "Update a stage",
        "description": "Updates the specified stage (canvas can be referenced by ID or name)",
        "operationId": "Superplane_UpdateStage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneUpdateStageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuperplaneUpdateStageBody"
            }
          }
        ],
        "tags": [
          "Stage"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/stages/{id}": {
      "get": {
        "summary": "Get stage details",
        "description": "Returns the details of a specific stage (canvas can be referenced by ID or name)",
        "operationId": "Superplane_DescribeStage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneDescribeStageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Stage"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/stages/{stageIdOrName}/events": {
      "get": {
        "summary": "List stage events",
        "description": "Returns a list of events for the specified stage (canvas can be referenced by ID or name)",
        "operationId": "Superplane_ListStageEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneListStageEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stageIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "states",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATE_UNKNOWN",
                "STATE_PENDING",
                "STATE_WAITING",
                "STATE_PROCESSED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "stateReasons",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATE_REASON_UNKNOWN",
                "STATE_REASON_APPROVAL",
                "STATE_REASON_TIME_WINDOW",
                "STATE_REASON_EXECUTION",
                "STATE_REASON_CONNECTION",
                "STATE_REASON_CANCELLED",
                "STATE_REASON_UNHEALTHY"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Stage"
        ]
      }
    },
    "/api/v1/canvases/{canvasIdOrName}/stages/{stageIdOrName}/events/{eventId}/approve": {
      "post": {
        "summary": "Approve a stage event",
        "description": "Approves the specified stage event (canvas can be referenced by ID or name)",
        "operationId": "Superplane_ApproveStageEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneApproveStageEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stageIdOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuperplaneApproveStageEventBody"
            }
          }
        ],
        "tags": [
          "Stage"
        ]
      }
    },
    "/api/v1/canvases/{id}": {
      "get": {
        "summary": "Get canvas details",
        "description": "Returns the details of a specific canvas",
        "operationId": "Superplane_DescribeCanvas",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SuperplaneDescribeCanvasResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Canvas"
        ]
      }
    },
    "/api/v1/groups": {
      "get": {
        "summary": "List organization groups",
        "description": "Returns a list of groups within an organization",
        "operationId": "Authorization_ListOrganizationGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationListOrganizationGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "summary": "Create group",
        "description": "Creates a new group within an organization with a specific role",
        "operationId": "Authorization_CreateOrganizationGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateOrganizationGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateOrganizationGroupRequest"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/groups/{groupName}": {
      "get": {
        "summary": "Get organization group",
        "description": "Returns details of a specific group within an organization",
        "operationId": "Authorization_GetOrganizationGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetOrganizationGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/groups/{groupName}/users": {
      "get": {
        "summary": "Get organization group users",
        "description": "Returns users that belong to a specific group within an organization",
        "operationId": "Authorization_GetOrganizationGroupUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationGetOrganizationGroupUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "summary": "Add user to organization group",
        "description": "Adds a user to a group within an organization",
        "operationId": "Authorization_AddUserToOrganizationGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationAddUserToOrganizationGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationAddUserToOrganizationGroupBody"
            }
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/groups/{groupName}/users/{userId}": {
      "delete": {
        "summary": "Remove user from organization group",
        "description": "Removes a user from a group within an organization",
        "operationId": "Authorization_RemoveUserFromOrganizationGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthorizationRemoveUserFromOrganizationGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api/v1/integrations": {
      "get": {
        "summary": "List integrations",
        "description": "List integrations",
        "operationId": "Integrations_ListIntegrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IntegrationsListIntegrationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domainType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_TYPE_UNSPECIFIED",
              "DOMAIN_TYPE_ORGANIZATION",
              "DOMAIN_TYPE_CANVAS"
            ],
            "default": "DOMAIN_TYPE_UNSPECIFIED"
          },
          {
            "name": "domainId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Integration"
        ]
      },
      "post": {
        "summary": "Create a new canvas integration",
        "description": "Creates a new canvas integration",
        "operationId": "Integrations_CreateIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IntegrationsCreateIntegrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntegrationsCreateIntegrationRequest"
            }
          }
        ],
        "tags": [
          "Integration"
        ]
      }
    },
    "/api/v1/integrations/{idOrName}": {
      "get": {
        "summary": "Describe an integration",
        "description": "Describe an integration",
        "operationId": "Integrations_DescribeIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IntegrationsDescribeIntegrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_TYPE_UNSPECIFIED",
              "DOMAIN_TYPE_ORGANIZATION",
              "DOMAIN_TYPE_CANVAS"
            ],
            "default": "DOMAIN_TYPE_UNSPECIFIED"
          },
          {
            "name": "domainId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Integration"
        ]
      }
    },
    "/api/v1/organizations": {
      "get": {
        "summary": "List organizations",
        "description": "Returns a list of all organizations ordered by display name",
        "operationId": "Organizations_ListOrganizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/OrganizationsListOrganizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "summary": "Create a new organization",
        "description": "Creates a new organization with the given name and display name",
        "operationId": "Organizations_CreateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/OrganizationsCreateOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationsCreateOrganizationRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/api/v1/organizations/{idOrName}": {
      "get": {
        "summary": "Get organization details",
        "description": "Returns the details of a specific organization (can be referenced by ID or name)",
        "operationId": "Organizations_DescribeOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/OrganizationsDescribeOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "summary": "Delete an organization",
        "description": "Deletes the specified organization (can be referenced by ID or name)",
        "operationId": "Organizations_DeleteOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/OrganizationsDeleteOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "patch": {
        "summary": "Update an organization",
        "description": "Updates the specified organization (can be referenced by ID or name)",
        "operationId": "Organizations_UpdateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/OrganizationsUpdateOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationsUpdateOrganizationBody"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/api/v1/secrets": {
      "get": {
        "summary": "List secrets",
        "description": "Returns the list of secrets",
        "operationId": "Secrets_ListSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SecretsListSecretsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domainType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_TYPE_UNSPECIFIED",
              "DOMAIN_TYPE_ORGANIZATION",
              "DOMAIN_TYPE_CANVAS"
            ],
            "default": "DOMAIN_TYPE_UNSPECIFIED"
          },
          {
            "name": "domainId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secret"
        ]
      },
      "post": {
        "summary": "Create a new secret",
        "description": "Creates a new secret",
        "operationId": "Secrets_CreateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SecretsCreateSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretsCreateSecretRequest"
            }
          }
        ],
        "tags": [
          "Secret"
        ]
      }
    },
    "/api/v1/secrets/{idOrName}": {
      "get": {
        "summary": "Get secret details",
        "description": "Returns the details of a specific secret",
        "operationId": "Secrets_DescribeSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SecretsDescribeSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_TYPE_UNSPECIFIED",
              "DOMAIN_TYPE_ORGANIZATION",
              "DOMAIN_TYPE_CANVAS"
            ],
            "default": "DOMAIN_TYPE_UNSPECIFIED"
          },
          {
            "name": "domainId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secret"
        ]
      },
      "delete": {
        "summary": "Deletes a secret",
        "description": "Deletes the specified secret",
        "operationId": "Secrets_DeleteSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SecretsDeleteSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DOMAIN_TYPE_UNSPECIFIED",
              "DOMAIN_TYPE_ORGANIZATION",
              "DOMAIN_TYPE_CANVAS"
            ],
            "default": "DOMAIN_TYPE_UNSPECIFIED"
          },
          {
            "name": "domainId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secret"
        ]
      },
      "patch": {
        "summary": "Updates a secret",
        "description": "Updates the specified secret",
        "operationId": "Secrets_UpdateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SecretsUpdateSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretsUpdateSecretBody"
            }
          }
        ],
        "tags": [
          "Secret"
        ]
      }
    }
  },
  "definitions": {
    "AuthToken": {
      "type": "object",
      "properties": {
        "valueFrom": {
          "$ref": "#/definitions/SuperplaneIntegrationsValueFrom"
        }
      }
    },
    "AuthorizationAccountProvider": {
      "type": "object",
      "properties": {
        "providerType": {
          "type": "string",
          "title": "e.g., \"google\", \"github\", \"email\""
        },
        "providerId": {
          "type": "string",
          "title": "unique ID from the provider"
        },
        "email": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "isPrimary": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },
    "AuthorizationAddUserToCanvasGroupBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        }
      }
    },
    "AuthorizationAddUserToCanvasGroupResponse": {
      "type": "object"
    },
    "AuthorizationAddUserToOrganizationGroupBody": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        }
      }
    },
    "AuthorizationAddUserToOrganizationGroupResponse": {
      "type": "object"
    },
    "AuthorizationAssignRoleRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "roleAssignment": {
          "$ref": "#/definitions/AuthorizationRoleAssignment"
        }
      },
      "title": "Role assignment messages"
    },
    "AuthorizationAssignRoleResponse": {
      "type": "object"
    },
    "AuthorizationCreateCanvasGroupBody": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "Canvas group management messages"
    },
    "AuthorizationCreateCanvasGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/AuthorizationGroup"
        }
      }
    },
    "AuthorizationCreateOrganizationGroupRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "Group management messages"
    },
    "AuthorizationCreateOrganizationGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/AuthorizationGroup"
        }
      }
    },
    "AuthorizationCreateRoleRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationPermission"
          }
        },
        "inheritedRole": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "Custom role management messages"
    },
    "AuthorizationCreateRoleResponse": {
      "type": "object"
    },
    "AuthorizationDeleteCanvasGroupResponse": {
      "type": "object"
    },
    "AuthorizationDeleteOrganizationGroupResponse": {
      "type": "object"
    },
    "AuthorizationDeleteRoleResponse": {
      "type": "object"
    },
    "AuthorizationDescribeRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/AuthorizationRole"
        }
      }
    },
    "AuthorizationDomainType": {
      "type": "string",
      "enum": [
        "DOMAIN_TYPE_UNSPECIFIED",
        "DOMAIN_TYPE_ORGANIZATION",
        "DOMAIN_TYPE_CANVAS"
      ],
      "default": "DOMAIN_TYPE_UNSPECIFIED",
      "title": "Enums"
    },
    "AuthorizationGetCanvasGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/AuthorizationGroup"
        }
      }
    },
    "AuthorizationGetCanvasGroupUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationUser"
          }
        },
        "group": {
          "$ref": "#/definitions/AuthorizationGroup"
        }
      }
    },
    "AuthorizationGetCanvasUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationUser"
          }
        }
      }
    },
    "AuthorizationGetOrganizationGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/AuthorizationGroup"
        }
      }
    },
    "AuthorizationGetOrganizationGroupUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationUser"
          }
        },
        "group": {
          "$ref": "#/definitions/AuthorizationGroup"
        }
      }
    },
    "AuthorizationGetOrganizationUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationUser"
          }
        }
      }
    },
    "AuthorizationGetUserRolesResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationRole"
          }
        }
      }
    },
    "AuthorizationGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "membersCount": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "title": "Core data structures"
    },
    "AuthorizationListCanvasGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationGroup"
          }
        }
      }
    },
    "AuthorizationListOrganizationGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationGroup"
          }
        }
      }
    },
    "AuthorizationListRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationRole"
          }
        }
      }
    },
    "AuthorizationListUserPermissionsResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationPermission"
          }
        }
      }
    },
    "AuthorizationPermission": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        }
      }
    },
    "AuthorizationRemoveRoleRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "roleAssignment": {
          "$ref": "#/definitions/AuthorizationRoleAssignment"
        }
      }
    },
    "AuthorizationRemoveRoleResponse": {
      "type": "object"
    },
    "AuthorizationRemoveUserFromCanvasGroupBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        }
      }
    },
    "AuthorizationRemoveUserFromCanvasGroupResponse": {
      "type": "object"
    },
    "AuthorizationRemoveUserFromOrganizationGroupBody": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        }
      }
    },
    "AuthorizationRemoveUserFromOrganizationGroupResponse": {
      "type": "object"
    },
    "AuthorizationRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationPermission"
          }
        },
        "inheritedRole": {
          "$ref": "#/definitions/AuthorizationRole"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "AuthorizationRoleAssignment": {
      "type": "object",
      "properties": {
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "AuthorizationUpdateCanvasGroupBody": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "AuthorizationUpdateCanvasGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/AuthorizationGroup"
        }
      }
    },
    "AuthorizationUpdateOrganizationGroupBody": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "AuthorizationUpdateOrganizationGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/AuthorizationGroup"
        }
      }
    },
    "AuthorizationUpdateRoleBody": {
      "type": "object",
      "properties": {
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationPermission"
          }
        },
        "inheritedRole": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "AuthorizationUpdateRoleResponse": {
      "type": "object"
    },
    "AuthorizationUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationUserRoleAssignment"
          }
        },
        "accountProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthorizationAccountProvider"
          }
        }
      }
    },
    "AuthorizationUserRoleAssignment": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string"
        },
        "roleDisplayName": {
          "type": "string"
        },
        "roleDescription": {
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        },
        "assignedAt": {
          "type": "string"
        }
      }
    },
    "EventSourceSpecSemaphore": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        }
      }
    },
    "ExecutionResult": {
      "type": "string",
      "enum": [
        "RESULT_UNKNOWN",
        "RESULT_PASSED",
        "RESULT_FAILED"
      ],
      "default": "RESULT_UNKNOWN"
    },
    "ExecutorSpecHTTP": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "payload": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "responsePolicy": {
          "$ref": "#/definitions/ExecutorSpecHTTPResponsePolicy"
        }
      }
    },
    "ExecutorSpecHTTPResponsePolicy": {
      "type": "object",
      "properties": {
        "statusCodes": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "GroupByField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        }
      }
    },
    "InputMappingWhen": {
      "type": "object",
      "properties": {
        "triggeredBy": {
          "$ref": "#/definitions/InputMappingWhenTriggeredBy"
        }
      }
    },
    "InputMappingWhenTriggeredBy": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "string"
        }
      }
    },
    "IntegrationAuth": {
      "type": "object",
      "properties": {
        "use": {
          "$ref": "#/definitions/IntegrationAuthType"
        },
        "token": {
          "$ref": "#/definitions/AuthToken"
        }
      }
    },
    "IntegrationAuthType": {
      "type": "string",
      "enum": [
        "AUTH_TYPE_NONE",
        "AUTH_TYPE_TOKEN",
        "AUTH_TYPE_OIDC"
      ],
      "default": "AUTH_TYPE_NONE"
    },
    "IntegrationOIDC": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "IntegrationsCreateIntegrationRequest": {
      "type": "object",
      "properties": {
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        },
        "integration": {
          "$ref": "#/definitions/IntegrationsIntegration"
        }
      }
    },
    "IntegrationsCreateIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/IntegrationsIntegration"
        }
      }
    },
    "IntegrationsDescribeIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/IntegrationsIntegration"
        }
      }
    },
    "IntegrationsIntegration": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/IntegrationsIntegrationMetadata"
        },
        "spec": {
          "$ref": "#/definitions/IntegrationsIntegrationSpec"
        }
      }
    },
    "IntegrationsIntegrationMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        }
      }
    },
    "IntegrationsIntegrationRef": {
      "type": "object",
      "properties": {
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "IntegrationsIntegrationSpec": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/IntegrationsIntegrationType"
        },
        "url": {
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/IntegrationAuth"
        },
        "oidc": {
          "$ref": "#/definitions/IntegrationOIDC"
        }
      }
    },
    "IntegrationsIntegrationType": {
      "type": "string",
      "enum": [
        "TYPE_NONE",
        "TYPE_SEMAPHORE",
        "TYPE_GITHUB"
      ],
      "default": "TYPE_NONE"
    },
    "IntegrationsListIntegrationsResponse": {
      "type": "object",
      "properties": {
        "integrations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IntegrationsIntegration"
          }
        }
      }
    },
    "OrganizationsCreateOrganizationRequest": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/OrganizationsOrganization"
        }
      }
    },
    "OrganizationsCreateOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/OrganizationsOrganization"
        }
      }
    },
    "OrganizationsDeleteOrganizationResponse": {
      "type": "object"
    },
    "OrganizationsDescribeOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/OrganizationsOrganization"
        }
      }
    },
    "OrganizationsListOrganizationsResponse": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/OrganizationsOrganization"
          }
        }
      }
    },
    "OrganizationsOrganization": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/OrganizationsOrganizationMetadata"
        }
      }
    },
    "OrganizationsOrganizationMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "OrganizationsUpdateOrganizationBody": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/OrganizationsOrganization"
        }
      }
    },
    "OrganizationsUpdateOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/OrganizationsOrganization"
        }
      }
    },
    "SecretLocal": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Local secrets are stored and managed by SuperPlane itself."
    },
    "SecretProvider": {
      "type": "string",
      "enum": [
        "PROVIDER_UNKNOWN",
        "PROVIDER_LOCAL"
      ],
      "default": "PROVIDER_UNKNOWN"
    },
    "SecretsCreateSecretRequest": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/SecretsSecret"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        }
      }
    },
    "SecretsCreateSecretResponse": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/SecretsSecret"
        }
      }
    },
    "SecretsDeleteSecretResponse": {
      "type": "object"
    },
    "SecretsDescribeSecretResponse": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/SecretsSecret"
        }
      }
    },
    "SecretsListSecretsResponse": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SecretsSecret"
          }
        }
      }
    },
    "SecretsSecret": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/SecretsSecretMetadata"
        },
        "spec": {
          "$ref": "#/definitions/SecretsSecretSpec"
        }
      }
    },
    "SecretsSecretMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SecretsSecretSpec": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/SecretProvider"
        },
        "local": {
          "$ref": "#/definitions/SecretLocal"
        }
      }
    },
    "SecretsUpdateSecretBody": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/SecretsSecret"
        },
        "domainType": {
          "$ref": "#/definitions/AuthorizationDomainType"
        },
        "domainId": {
          "type": "string"
        }
      }
    },
    "SecretsUpdateSecretResponse": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/SecretsSecret"
        }
      }
    },
    "SpecGroupBy": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GroupByField"
          }
        }
      }
    },
    "SpecTimeoutBehavior": {
      "type": "string",
      "enum": [
        "TIMEOUT_BEHAVIOR_NONE",
        "TIMEOUT_BEHAVIOR_DROP",
        "TIMEOUT_BEHAVIOR_EMIT"
      ],
      "default": "TIMEOUT_BEHAVIOR_NONE"
    },
    "SuperplaneApproveStageEventBody": {
      "type": "object"
    },
    "SuperplaneApproveStageEventResponse": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/SuperplaneStageEvent"
        }
      }
    },
    "SuperplaneCanvas": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/SuperplaneCanvasMetadata",
          "title": "No spec needed for Canvas as per the YAML example"
        }
      }
    },
    "SuperplaneCanvasMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SuperplaneCondition": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SuperplaneConditionType"
        },
        "approval": {
          "$ref": "#/definitions/SuperplaneConditionApproval"
        },
        "timeWindow": {
          "$ref": "#/definitions/SuperplaneConditionTimeWindow"
        }
      }
    },
    "SuperplaneConditionApproval": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SuperplaneConditionTimeWindow": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string"
        },
        "end": {
          "type": "string"
        },
        "weekDays": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SuperplaneConditionType": {
      "type": "string",
      "enum": [
        "CONDITION_TYPE_UNKNOWN",
        "CONDITION_TYPE_APPROVAL",
        "CONDITION_TYPE_TIME_WINDOW"
      ],
      "default": "CONDITION_TYPE_UNKNOWN"
    },
    "SuperplaneConnection": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SuperplaneConnectionType"
        },
        "name": {
          "type": "string"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneFilter"
          }
        },
        "filterOperator": {
          "$ref": "#/definitions/SuperplaneFilterOperator"
        }
      }
    },
    "SuperplaneConnectionGroup": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/SuperplaneConnectionGroupMetadata"
        },
        "spec": {
          "$ref": "#/definitions/SuperplaneConnectionGroupSpec"
        }
      }
    },
    "SuperplaneConnectionGroupEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        },
        "sourceType": {
          "$ref": "#/definitions/SuperplaneConnectionType"
        },
        "sourceName": {
          "type": "string"
        },
        "receivedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SuperplaneConnectionGroupFieldSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneKeyValuePair"
          }
        },
        "hash": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/SuperplaneConnectionGroupFieldSetState"
        },
        "stateReason": {
          "$ref": "#/definitions/SuperplaneConnectionGroupFieldSetStateReason"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneConnectionGroupEvent"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SuperplaneConnectionGroupFieldSetState": {
      "type": "string",
      "enum": [
        "STATE_UNKNOWN",
        "STATE_PENDING",
        "STATE_PROCESSED",
        "STATE_DISCARDED"
      ],
      "default": "STATE_UNKNOWN"
    },
    "SuperplaneConnectionGroupFieldSetStateReason": {
      "type": "string",
      "enum": [
        "STATE_REASON_NONE",
        "STATE_REASON_OK",
        "STATE_REASON_TIMEOUT"
      ],
      "default": "STATE_REASON_NONE"
    },
    "SuperplaneConnectionGroupMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "canvasId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        }
      }
    },
    "SuperplaneConnectionGroupSpec": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneConnection"
          }
        },
        "groupBy": {
          "$ref": "#/definitions/SpecGroupBy"
        },
        "timeout": {
          "type": "integer",
          "format": "int64"
        },
        "timeoutBehavior": {
          "$ref": "#/definitions/SpecTimeoutBehavior"
        }
      }
    },
    "SuperplaneConnectionType": {
      "type": "string",
      "enum": [
        "TYPE_UNKNOWN",
        "TYPE_EVENT_SOURCE",
        "TYPE_STAGE",
        "TYPE_CONNECTION_GROUP"
      ],
      "default": "TYPE_UNKNOWN"
    },
    "SuperplaneCreateCanvasRequest": {
      "type": "object",
      "properties": {
        "canvas": {
          "$ref": "#/definitions/SuperplaneCanvas"
        },
        "organizationId": {
          "type": "string"
        }
      }
    },
    "SuperplaneCreateCanvasResponse": {
      "type": "object",
      "properties": {
        "canvas": {
          "$ref": "#/definitions/SuperplaneCanvas"
        }
      }
    },
    "SuperplaneCreateConnectionGroupBody": {
      "type": "object",
      "properties": {
        "connectionGroup": {
          "$ref": "#/definitions/SuperplaneConnectionGroup"
        }
      }
    },
    "SuperplaneCreateConnectionGroupResponse": {
      "type": "object",
      "properties": {
        "connectionGroup": {
          "$ref": "#/definitions/SuperplaneConnectionGroup"
        }
      }
    },
    "SuperplaneCreateEventSourceBody": {
      "type": "object",
      "properties": {
        "eventSource": {
          "$ref": "#/definitions/SuperplaneEventSource"
        }
      }
    },
    "SuperplaneCreateEventSourceResponse": {
      "type": "object",
      "properties": {
        "eventSource": {
          "$ref": "#/definitions/SuperplaneEventSource"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "SuperplaneCreateStageBody": {
      "type": "object",
      "properties": {
        "stage": {
          "$ref": "#/definitions/SuperplaneStage"
        }
      }
    },
    "SuperplaneCreateStageResponse": {
      "type": "object",
      "properties": {
        "stage": {
          "$ref": "#/definitions/SuperplaneStage"
        }
      }
    },
    "SuperplaneDataFilter": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string"
        }
      }
    },
    "SuperplaneDescribeCanvasResponse": {
      "type": "object",
      "properties": {
        "canvas": {
          "$ref": "#/definitions/SuperplaneCanvas"
        }
      }
    },
    "SuperplaneDescribeConnectionGroupResponse": {
      "type": "object",
      "properties": {
        "connectionGroup": {
          "$ref": "#/definitions/SuperplaneConnectionGroup"
        }
      }
    },
    "SuperplaneDescribeEventSourceResponse": {
      "type": "object",
      "properties": {
        "eventSource": {
          "$ref": "#/definitions/SuperplaneEventSource"
        }
      }
    },
    "SuperplaneDescribeStageResponse": {
      "type": "object",
      "properties": {
        "stage": {
          "$ref": "#/definitions/SuperplaneStage"
        }
      }
    },
    "SuperplaneEventSource": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/SuperplaneEventSourceMetadata"
        },
        "spec": {
          "$ref": "#/definitions/SuperplaneEventSourceSpec"
        }
      }
    },
    "SuperplaneEventSourceMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "canvasId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SuperplaneEventSourceSpec": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/IntegrationsIntegrationRef"
        },
        "semaphore": {
          "$ref": "#/definitions/EventSourceSpecSemaphore"
        }
      }
    },
    "SuperplaneExecution": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/SuperplaneExecutionState"
        },
        "result": {
          "$ref": "#/definitions/ExecutionResult"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "finishedAt": {
          "type": "string",
          "format": "date-time"
        },
        "outputs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneOutputValue"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneExecutionResource"
          }
        }
      }
    },
    "SuperplaneExecutionResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "SuperplaneExecutionState": {
      "type": "string",
      "enum": [
        "STATE_UNKNOWN",
        "STATE_PENDING",
        "STATE_STARTED",
        "STATE_FINISHED"
      ],
      "default": "STATE_UNKNOWN"
    },
    "SuperplaneExecutorSpec": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SuperplaneExecutorSpecType"
        },
        "integration": {
          "$ref": "#/definitions/IntegrationsIntegrationRef"
        },
        "semaphore": {
          "$ref": "#/definitions/SuperplaneExecutorSpecSemaphore"
        },
        "http": {
          "$ref": "#/definitions/ExecutorSpecHTTP"
        }
      }
    },
    "SuperplaneExecutorSpecSemaphore": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "task": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "pipelineFile": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SuperplaneExecutorSpecType": {
      "type": "string",
      "enum": [
        "TYPE_UNKNOWN",
        "TYPE_SEMAPHORE",
        "TYPE_HTTP"
      ],
      "default": "TYPE_UNKNOWN"
    },
    "SuperplaneFilter": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SuperplaneFilterType"
        },
        "data": {
          "$ref": "#/definitions/SuperplaneDataFilter"
        },
        "header": {
          "$ref": "#/definitions/SuperplaneHeaderFilter"
        }
      }
    },
    "SuperplaneFilterOperator": {
      "type": "string",
      "enum": [
        "FILTER_OPERATOR_AND",
        "FILTER_OPERATOR_OR"
      ],
      "default": "FILTER_OPERATOR_AND",
      "title": "Filters can be combined in two ways:\n  - FILTER_OPERATOR_AND: all filters must be true (default)\n  - FILTER_OPERATOR_OR: at least one filter must be true"
    },
    "SuperplaneFilterType": {
      "type": "string",
      "enum": [
        "FILTER_TYPE_UNKNOWN",
        "FILTER_TYPE_DATA",
        "FILTER_TYPE_HEADER"
      ],
      "default": "FILTER_TYPE_UNKNOWN"
    },
    "SuperplaneHeaderFilter": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string"
        }
      }
    },
    "SuperplaneInputDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "SuperplaneInputMapping": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneValueDefinition"
          }
        },
        "when": {
          "$ref": "#/definitions/InputMappingWhen"
        }
      }
    },
    "SuperplaneIntegrationsValueFrom": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/SuperplaneIntegrationsValueFromSecret"
        }
      }
    },
    "SuperplaneIntegrationsValueFromSecret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "SuperplaneKeyValuePair": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SuperplaneListCanvasesResponse": {
      "type": "object",
      "properties": {
        "canvases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneCanvas"
          }
        }
      }
    },
    "SuperplaneListConnectionGroupFieldSetsResponse": {
      "type": "object",
      "properties": {
        "fieldSets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneConnectionGroupFieldSet"
          }
        }
      }
    },
    "SuperplaneListConnectionGroupsResponse": {
      "type": "object",
      "properties": {
        "connectionGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneConnectionGroup"
          }
        }
      }
    },
    "SuperplaneListEventSourcesResponse": {
      "type": "object",
      "properties": {
        "eventSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneEventSource"
          }
        }
      }
    },
    "SuperplaneListStageEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneStageEvent"
          }
        }
      }
    },
    "SuperplaneListStagesResponse": {
      "type": "object",
      "properties": {
        "stages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneStage"
          }
        }
      }
    },
    "SuperplaneOutputDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        }
      }
    },
    "SuperplaneOutputValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SuperplaneResetEventSourceKeyBody": {
      "type": "object"
    },
    "SuperplaneResetEventSourceKeyResponse": {
      "type": "object",
      "properties": {
        "eventSource": {
          "$ref": "#/definitions/SuperplaneEventSource"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "SuperplaneStage": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/SuperplaneStageMetadata"
        },
        "spec": {
          "$ref": "#/definitions/SuperplaneStageSpec"
        }
      }
    },
    "SuperplaneStageEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        },
        "sourceType": {
          "$ref": "#/definitions/SuperplaneConnectionType"
        },
        "state": {
          "$ref": "#/definitions/SuperplaneStageEventState"
        },
        "stateReason": {
          "$ref": "#/definitions/SuperplaneStageEventStateReason"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "approvals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneStageEventApproval"
          }
        },
        "execution": {
          "$ref": "#/definitions/SuperplaneExecution"
        },
        "inputs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneKeyValuePair"
          }
        }
      }
    },
    "SuperplaneStageEventApproval": {
      "type": "object",
      "properties": {
        "approvedBy": {
          "type": "string"
        },
        "approvedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SuperplaneStageEventState": {
      "type": "string",
      "enum": [
        "STATE_UNKNOWN",
        "STATE_PENDING",
        "STATE_WAITING",
        "STATE_PROCESSED"
      ],
      "default": "STATE_UNKNOWN"
    },
    "SuperplaneStageEventStateReason": {
      "type": "string",
      "enum": [
        "STATE_REASON_UNKNOWN",
        "STATE_REASON_APPROVAL",
        "STATE_REASON_TIME_WINDOW",
        "STATE_REASON_EXECUTION",
        "STATE_REASON_CONNECTION",
        "STATE_REASON_CANCELLED",
        "STATE_REASON_UNHEALTHY"
      ],
      "default": "STATE_REASON_UNKNOWN"
    },
    "SuperplaneStageMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "canvasId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SuperplaneStageSpec": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneConnection"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneCondition"
          }
        },
        "executor": {
          "$ref": "#/definitions/SuperplaneExecutorSpec"
        },
        "inputs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneInputDefinition"
          }
        },
        "inputMappings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneInputMapping"
          }
        },
        "outputs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneOutputDefinition"
          }
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SuperplaneValueDefinition"
          }
        }
      }
    },
    "SuperplaneUpdateConnectionGroupBody": {
      "type": "object",
      "properties": {
        "connectionGroup": {
          "$ref": "#/definitions/SuperplaneConnectionGroup"
        }
      }
    },
    "SuperplaneUpdateConnectionGroupResponse": {
      "type": "object",
      "properties": {
        "connectionGroup": {
          "$ref": "#/definitions/SuperplaneConnectionGroup"
        }
      }
    },
    "SuperplaneUpdateStageBody": {
      "type": "object",
      "properties": {
        "stage": {
          "$ref": "#/definitions/SuperplaneStage"
        }
      }
    },
    "SuperplaneUpdateStageResponse": {
      "type": "object",
      "properties": {
        "stage": {
          "$ref": "#/definitions/SuperplaneStage"
        }
      }
    },
    "SuperplaneValueDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/SuperplaneValueFrom"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SuperplaneValueFrom": {
      "type": "object",
      "properties": {
        "eventData": {
          "$ref": "#/definitions/SuperplaneValueFromEventData"
        },
        "lastExecution": {
          "$ref": "#/definitions/SuperplaneValueFromLastExecution"
        },
        "secret": {
          "$ref": "#/definitions/SuperplaneValueFromSecret"
        }
      }
    },
    "SuperplaneValueFromEventData": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        }
      }
    },
    "SuperplaneValueFromLastExecution": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionResult"
          }
        }
      }
    },
    "SuperplaneValueFromSecret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
